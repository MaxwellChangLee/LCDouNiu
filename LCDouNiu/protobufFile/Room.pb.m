// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Room.pb.h"
// @@protoc_insertion_point(imports)

@implementation RoomRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [RoomRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL RESULT_CODEIsValidValue(RESULT_CODE value) {
  switch (value) {
    case RESULT_CODERcSuccessC:
    case RESULT_CODERcCreateRoomFailC:
    case RESULT_CODERcNoRoomAvailableC:
    case RESULT_CODERcCreateRoomUpLimit:
    case RESULT_CODERcHasRoomAlready:
    case RESULT_CODERcUserInBacklist:
    case RESULT_CODERcUserRoomkeyNotEnough:
    case RESULT_CODERcInternalErrorC:
    case RESULT_CODERcInvalidParamC:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromRESULT_CODE(RESULT_CODE value) {
  switch (value) {
    case RESULT_CODERcSuccessC:
      return @"RESULT_CODERcSuccessC";
    case RESULT_CODERcCreateRoomFailC:
      return @"RESULT_CODERcCreateRoomFailC";
    case RESULT_CODERcNoRoomAvailableC:
      return @"RESULT_CODERcNoRoomAvailableC";
    case RESULT_CODERcCreateRoomUpLimit:
      return @"RESULT_CODERcCreateRoomUpLimit";
    case RESULT_CODERcHasRoomAlready:
      return @"RESULT_CODERcHasRoomAlready";
    case RESULT_CODERcUserInBacklist:
      return @"RESULT_CODERcUserInBacklist";
    case RESULT_CODERcUserRoomkeyNotEnough:
      return @"RESULT_CODERcUserRoomkeyNotEnough";
    case RESULT_CODERcInternalErrorC:
      return @"RESULT_CODERcInternalErrorC";
    case RESULT_CODERcInvalidParamC:
      return @"RESULT_CODERcInvalidParamC";
    default:
      return nil;
  }
}

BOOL OperateCodeIsValidValue(OperateCode value) {
  switch (value) {
    case OperateCodeOpercIgnor:
    case OperateCodeOpercTi:
    case OperateCodeOpercPao:
    case OperateCodeOpercKan:
    case OperateCodeOpercPeng:
    case OperateCodeOpercSao:
    case OperateCodeOpercChi:
    case OperateCodeOpercChiEx:
    case OperateCodeOpercHu:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromOperateCode(OperateCode value) {
  switch (value) {
    case OperateCodeOpercIgnor:
      return @"OperateCodeOpercIgnor";
    case OperateCodeOpercTi:
      return @"OperateCodeOpercTi";
    case OperateCodeOpercPao:
      return @"OperateCodeOpercPao";
    case OperateCodeOpercKan:
      return @"OperateCodeOpercKan";
    case OperateCodeOpercPeng:
      return @"OperateCodeOpercPeng";
    case OperateCodeOpercSao:
      return @"OperateCodeOpercSao";
    case OperateCodeOpercChi:
      return @"OperateCodeOpercChi";
    case OperateCodeOpercChiEx:
      return @"OperateCodeOpercChiEx";
    case OperateCodeOpercHu:
      return @"OperateCodeOpercHu";
    default:
      return nil;
  }
}

BOOL PointNameCodeIsValidValue(PointNameCode value) {
  switch (value) {
    case PointNameCodePncIgnor:
    case PointNameCodePncTi:
    case PointNameCodePncPao:
    case PointNameCodePncChongPao:
    case PointNameCodePncPeng:
    case PointNameCodePncPengSaida:
    case PointNameCodePncPengSiqin:
    case PointNameCodePncKan:
    case PointNameCodePncOuyang:
    case PointNameCodePncSao:
    case PointNameCodePncSaoSaida:
    case PointNameCodePncSaoSiqin:
    case PointNameCodePncChi:
    case PointNameCodePncChiEx:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPointNameCode(PointNameCode value) {
  switch (value) {
    case PointNameCodePncIgnor:
      return @"PointNameCodePncIgnor";
    case PointNameCodePncTi:
      return @"PointNameCodePncTi";
    case PointNameCodePncPao:
      return @"PointNameCodePncPao";
    case PointNameCodePncChongPao:
      return @"PointNameCodePncChongPao";
    case PointNameCodePncPeng:
      return @"PointNameCodePncPeng";
    case PointNameCodePncPengSaida:
      return @"PointNameCodePncPengSaida";
    case PointNameCodePncPengSiqin:
      return @"PointNameCodePncPengSiqin";
    case PointNameCodePncKan:
      return @"PointNameCodePncKan";
    case PointNameCodePncOuyang:
      return @"PointNameCodePncOuyang";
    case PointNameCodePncSao:
      return @"PointNameCodePncSao";
    case PointNameCodePncSaoSaida:
      return @"PointNameCodePncSaoSaida";
    case PointNameCodePncSaoSiqin:
      return @"PointNameCodePncSaoSiqin";
    case PointNameCodePncChi:
      return @"PointNameCodePncChi";
    case PointNameCodePncChiEx:
      return @"PointNameCodePncChiEx";
    default:
      return nil;
  }
}

BOOL HuNameCodeIsValidValue(HuNameCode value) {
  switch (value) {
    case HuNameCodeHncChihu:
    case HuNameCodeHncTiHu:
    case HuNameCodeHncPaoHu:
    case HuNameCodeHncPeng:
    case HuNameCodeHncPengSaida:
    case HuNameCodeHncPengSiqin:
    case HuNameCodeHncSaoHu:
    case HuNameCodeHncSaoSaidaHu:
    case HuNameCodeHncSaoSiqin:
    case HuNameCodeHncTianhu:
    case HuNameCodeHncDihu:
    case HuNameCodeHncWufuHu:
    case HuNameCodeHncQiduiHu:
    case HuNameCodeZzncChihu:
    case HuNameCodeZzncTiHu:
    case HuNameCodeZzncPaoHu:
    case HuNameCodeZzncPeng:
    case HuNameCodeZzncPengSaida:
    case HuNameCodeZzncPengSiqin:
    case HuNameCodeZzncSaoHu:
    case HuNameCodeZzncSaoSaidaHu:
    case HuNameCodeZzncSaoSiqin:
    case HuNameCodeZzncTianhu:
    case HuNameCodeZzncWufuHu:
    case HuNameCodeZzncQiduiHu:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromHuNameCode(HuNameCode value) {
  switch (value) {
    case HuNameCodeHncChihu:
      return @"HuNameCodeHncChihu";
    case HuNameCodeHncTiHu:
      return @"HuNameCodeHncTiHu";
    case HuNameCodeHncPaoHu:
      return @"HuNameCodeHncPaoHu";
    case HuNameCodeHncPeng:
      return @"HuNameCodeHncPeng";
    case HuNameCodeHncPengSaida:
      return @"HuNameCodeHncPengSaida";
    case HuNameCodeHncPengSiqin:
      return @"HuNameCodeHncPengSiqin";
    case HuNameCodeHncSaoHu:
      return @"HuNameCodeHncSaoHu";
    case HuNameCodeHncSaoSaidaHu:
      return @"HuNameCodeHncSaoSaidaHu";
    case HuNameCodeHncSaoSiqin:
      return @"HuNameCodeHncSaoSiqin";
    case HuNameCodeHncTianhu:
      return @"HuNameCodeHncTianhu";
    case HuNameCodeHncDihu:
      return @"HuNameCodeHncDihu";
    case HuNameCodeHncWufuHu:
      return @"HuNameCodeHncWufuHu";
    case HuNameCodeHncQiduiHu:
      return @"HuNameCodeHncQiduiHu";
    case HuNameCodeZzncChihu:
      return @"HuNameCodeZzncChihu";
    case HuNameCodeZzncTiHu:
      return @"HuNameCodeZzncTiHu";
    case HuNameCodeZzncPaoHu:
      return @"HuNameCodeZzncPaoHu";
    case HuNameCodeZzncPeng:
      return @"HuNameCodeZzncPeng";
    case HuNameCodeZzncPengSaida:
      return @"HuNameCodeZzncPengSaida";
    case HuNameCodeZzncPengSiqin:
      return @"HuNameCodeZzncPengSiqin";
    case HuNameCodeZzncSaoHu:
      return @"HuNameCodeZzncSaoHu";
    case HuNameCodeZzncSaoSaidaHu:
      return @"HuNameCodeZzncSaoSaidaHu";
    case HuNameCodeZzncSaoSiqin:
      return @"HuNameCodeZzncSaoSiqin";
    case HuNameCodeZzncTianhu:
      return @"HuNameCodeZzncTianhu";
    case HuNameCodeZzncWufuHu:
      return @"HuNameCodeZzncWufuHu";
    case HuNameCodeZzncQiduiHu:
      return @"HuNameCodeZzncQiduiHu";
    default:
      return nil;
  }
}

@interface PenHuProtocol ()
@property PenHuProtocolMsgType uri;
@property (strong) PBCS_LoginGameServerReq* loginGameServerReq;
@property (strong) PBCS_LoginGameServerRes* loginGameServerRes;
@property (strong) PBCS_LoginOutGameServerReq* loginoutGameServerReq;
@property (strong) PBCS_LoginOutGameServerRes* loginoutGameServerRes;
@property (strong) PBCS_ExchangeKeyReq* exchangekeyReq;
@property (strong) PBSC_ExchangeKeyRes* exchangekeyRes;
@property (strong) PBCS_CreateRoomReq* createRoomReq;
@property (strong) PBSC_CreateRoomRes* createRoomRes;
@property (strong) PBCS_JoinRoomReq* joinRoomReq;
@property (strong) PBSC_JoinRoomRes* joinRoomRes;
@property (strong) PBSC_UserLeaveRoomNotify* userLeaveRoomNotify;
@property (strong) PBSC_UserJoinRoomNotify* userJoinRoomNotify;
@property (strong) PBCS_userRoomGamePreparedOk* userPreparedOk;
@property (strong) PBSC_userRoomGamePreparedOkRes* userPreparedOkRes;
@property (strong) PBCS_userOperateRoomReq* userOperateRoomReq;
@property (strong) PBSC_userOperateRoomRes* userOperateRoomRes;
@property (strong) PBSC_BroadCastUserOperateRoom* broadcastUserOperatorRoom;
@property (strong) NS_RETURNS_NOT_RETAINED PBSC_NewRoundStart* newRoundStart;
@property (strong) NS_RETURNS_NOT_RETAINED PBCS_NewRoundStartUserAck* newRoundStartAck;
@property (strong) PBCS_UserOutCard* userOutCard;
@property (strong) PBSC_UserOutCardRes* userOutCardRes;
@property (strong) PBSC_UserOutCardNotify* userOutCardNotify;
@property (strong) PBCS_UserOperateCard* userOperateCard;
@property (strong) PBSC_UserOperateCardRes* userOperateCardRes;
@property (strong) PBSC_UserOperateCardNotify* userOperateCardNotify;
@property (strong) PBSC_UserCanOperateCardsNotify* userCanOperateCardNotify;
@property (strong) PBSC_UserGetCardInBuffer* userGetCardInBuffer;
@property (strong) PBCS_UserGetCardInBufferAck* userGetCardInBufferack;
@property (strong) PBSC_UserGetCardInBuffer_Notify* userGetCardBufferNotify;
@property (strong) PBCS_PingRoom* userPing;
@property (strong) PBSC_PingRoomRes* userPingRes;
@property (strong) PBSC_HuPai* hupaiNotify;
@property (strong) PBSC_RoomGameOver* roomGameOver;
@property (strong) PBSC_BroadCastWhoIsExcutorUser* whoIsCurExcutor;
@property (strong) PBCS_SendRoomMsgReq* sendRoomMsgReq;
@property (strong) PBSC_SendRoomMsgRes* sendRoomMsgRes;
@property (strong) PBSC_BroadCastRoomMsg* breadcastRoomMsg;
@end

@implementation PenHuProtocol

- (BOOL) hasUri {
  return !!hasUri_;
}
- (void) setHasUri:(BOOL) _value_ {
  hasUri_ = !!_value_;
}
@synthesize uri;
- (BOOL) hasLoginGameServerReq {
  return !!hasLoginGameServerReq_;
}
- (void) setHasLoginGameServerReq:(BOOL) _value_ {
  hasLoginGameServerReq_ = !!_value_;
}
@synthesize loginGameServerReq;
- (BOOL) hasLoginGameServerRes {
  return !!hasLoginGameServerRes_;
}
- (void) setHasLoginGameServerRes:(BOOL) _value_ {
  hasLoginGameServerRes_ = !!_value_;
}
@synthesize loginGameServerRes;
- (BOOL) hasLoginoutGameServerReq {
  return !!hasLoginoutGameServerReq_;
}
- (void) setHasLoginoutGameServerReq:(BOOL) _value_ {
  hasLoginoutGameServerReq_ = !!_value_;
}
@synthesize loginoutGameServerReq;
- (BOOL) hasLoginoutGameServerRes {
  return !!hasLoginoutGameServerRes_;
}
- (void) setHasLoginoutGameServerRes:(BOOL) _value_ {
  hasLoginoutGameServerRes_ = !!_value_;
}
@synthesize loginoutGameServerRes;
- (BOOL) hasExchangekeyReq {
  return !!hasExchangekeyReq_;
}
- (void) setHasExchangekeyReq:(BOOL) _value_ {
  hasExchangekeyReq_ = !!_value_;
}
@synthesize exchangekeyReq;
- (BOOL) hasExchangekeyRes {
  return !!hasExchangekeyRes_;
}
- (void) setHasExchangekeyRes:(BOOL) _value_ {
  hasExchangekeyRes_ = !!_value_;
}
@synthesize exchangekeyRes;
- (BOOL) hasCreateRoomReq {
  return !!hasCreateRoomReq_;
}
- (void) setHasCreateRoomReq:(BOOL) _value_ {
  hasCreateRoomReq_ = !!_value_;
}
@synthesize createRoomReq;
- (BOOL) hasCreateRoomRes {
  return !!hasCreateRoomRes_;
}
- (void) setHasCreateRoomRes:(BOOL) _value_ {
  hasCreateRoomRes_ = !!_value_;
}
@synthesize createRoomRes;
- (BOOL) hasJoinRoomReq {
  return !!hasJoinRoomReq_;
}
- (void) setHasJoinRoomReq:(BOOL) _value_ {
  hasJoinRoomReq_ = !!_value_;
}
@synthesize joinRoomReq;
- (BOOL) hasJoinRoomRes {
  return !!hasJoinRoomRes_;
}
- (void) setHasJoinRoomRes:(BOOL) _value_ {
  hasJoinRoomRes_ = !!_value_;
}
@synthesize joinRoomRes;
- (BOOL) hasUserLeaveRoomNotify {
  return !!hasUserLeaveRoomNotify_;
}
- (void) setHasUserLeaveRoomNotify:(BOOL) _value_ {
  hasUserLeaveRoomNotify_ = !!_value_;
}
@synthesize userLeaveRoomNotify;
- (BOOL) hasUserJoinRoomNotify {
  return !!hasUserJoinRoomNotify_;
}
- (void) setHasUserJoinRoomNotify:(BOOL) _value_ {
  hasUserJoinRoomNotify_ = !!_value_;
}
@synthesize userJoinRoomNotify;
- (BOOL) hasUserPreparedOk {
  return !!hasUserPreparedOk_;
}
- (void) setHasUserPreparedOk:(BOOL) _value_ {
  hasUserPreparedOk_ = !!_value_;
}
@synthesize userPreparedOk;
- (BOOL) hasUserPreparedOkRes {
  return !!hasUserPreparedOkRes_;
}
- (void) setHasUserPreparedOkRes:(BOOL) _value_ {
  hasUserPreparedOkRes_ = !!_value_;
}
@synthesize userPreparedOkRes;
- (BOOL) hasUserOperateRoomReq {
  return !!hasUserOperateRoomReq_;
}
- (void) setHasUserOperateRoomReq:(BOOL) _value_ {
  hasUserOperateRoomReq_ = !!_value_;
}
@synthesize userOperateRoomReq;
- (BOOL) hasUserOperateRoomRes {
  return !!hasUserOperateRoomRes_;
}
- (void) setHasUserOperateRoomRes:(BOOL) _value_ {
  hasUserOperateRoomRes_ = !!_value_;
}
@synthesize userOperateRoomRes;
- (BOOL) hasBroadcastUserOperatorRoom {
  return !!hasBroadcastUserOperatorRoom_;
}
- (void) setHasBroadcastUserOperatorRoom:(BOOL) _value_ {
  hasBroadcastUserOperatorRoom_ = !!_value_;
}
@synthesize broadcastUserOperatorRoom;
- (BOOL) hasNewRoundStart {
  return !!hasNewRoundStart_;
}
- (void) setHasNewRoundStart:(BOOL) _value_ {
  hasNewRoundStart_ = !!_value_;
}
@synthesize newRoundStart;
- (BOOL) hasNewRoundStartAck {
  return !!hasNewRoundStartAck_;
}
- (void) setHasNewRoundStartAck:(BOOL) _value_ {
  hasNewRoundStartAck_ = !!_value_;
}
@synthesize newRoundStartAck;
- (BOOL) hasUserOutCard {
  return !!hasUserOutCard_;
}
- (void) setHasUserOutCard:(BOOL) _value_ {
  hasUserOutCard_ = !!_value_;
}
@synthesize userOutCard;
- (BOOL) hasUserOutCardRes {
  return !!hasUserOutCardRes_;
}
- (void) setHasUserOutCardRes:(BOOL) _value_ {
  hasUserOutCardRes_ = !!_value_;
}
@synthesize userOutCardRes;
- (BOOL) hasUserOutCardNotify {
  return !!hasUserOutCardNotify_;
}
- (void) setHasUserOutCardNotify:(BOOL) _value_ {
  hasUserOutCardNotify_ = !!_value_;
}
@synthesize userOutCardNotify;
- (BOOL) hasUserOperateCard {
  return !!hasUserOperateCard_;
}
- (void) setHasUserOperateCard:(BOOL) _value_ {
  hasUserOperateCard_ = !!_value_;
}
@synthesize userOperateCard;
- (BOOL) hasUserOperateCardRes {
  return !!hasUserOperateCardRes_;
}
- (void) setHasUserOperateCardRes:(BOOL) _value_ {
  hasUserOperateCardRes_ = !!_value_;
}
@synthesize userOperateCardRes;
- (BOOL) hasUserOperateCardNotify {
  return !!hasUserOperateCardNotify_;
}
- (void) setHasUserOperateCardNotify:(BOOL) _value_ {
  hasUserOperateCardNotify_ = !!_value_;
}
@synthesize userOperateCardNotify;
- (BOOL) hasUserCanOperateCardNotify {
  return !!hasUserCanOperateCardNotify_;
}
- (void) setHasUserCanOperateCardNotify:(BOOL) _value_ {
  hasUserCanOperateCardNotify_ = !!_value_;
}
@synthesize userCanOperateCardNotify;
- (BOOL) hasUserGetCardInBuffer {
  return !!hasUserGetCardInBuffer_;
}
- (void) setHasUserGetCardInBuffer:(BOOL) _value_ {
  hasUserGetCardInBuffer_ = !!_value_;
}
@synthesize userGetCardInBuffer;
- (BOOL) hasUserGetCardInBufferack {
  return !!hasUserGetCardInBufferack_;
}
- (void) setHasUserGetCardInBufferack:(BOOL) _value_ {
  hasUserGetCardInBufferack_ = !!_value_;
}
@synthesize userGetCardInBufferack;
- (BOOL) hasUserGetCardBufferNotify {
  return !!hasUserGetCardBufferNotify_;
}
- (void) setHasUserGetCardBufferNotify:(BOOL) _value_ {
  hasUserGetCardBufferNotify_ = !!_value_;
}
@synthesize userGetCardBufferNotify;
- (BOOL) hasUserPing {
  return !!hasUserPing_;
}
- (void) setHasUserPing:(BOOL) _value_ {
  hasUserPing_ = !!_value_;
}
@synthesize userPing;
- (BOOL) hasUserPingRes {
  return !!hasUserPingRes_;
}
- (void) setHasUserPingRes:(BOOL) _value_ {
  hasUserPingRes_ = !!_value_;
}
@synthesize userPingRes;
- (BOOL) hasHupaiNotify {
  return !!hasHupaiNotify_;
}
- (void) setHasHupaiNotify:(BOOL) _value_ {
  hasHupaiNotify_ = !!_value_;
}
@synthesize hupaiNotify;
- (BOOL) hasRoomGameOver {
  return !!hasRoomGameOver_;
}
- (void) setHasRoomGameOver:(BOOL) _value_ {
  hasRoomGameOver_ = !!_value_;
}
@synthesize roomGameOver;
- (BOOL) hasWhoIsCurExcutor {
  return !!hasWhoIsCurExcutor_;
}
- (void) setHasWhoIsCurExcutor:(BOOL) _value_ {
  hasWhoIsCurExcutor_ = !!_value_;
}
@synthesize whoIsCurExcutor;
- (BOOL) hasSendRoomMsgReq {
  return !!hasSendRoomMsgReq_;
}
- (void) setHasSendRoomMsgReq:(BOOL) _value_ {
  hasSendRoomMsgReq_ = !!_value_;
}
@synthesize sendRoomMsgReq;
- (BOOL) hasSendRoomMsgRes {
  return !!hasSendRoomMsgRes_;
}
- (void) setHasSendRoomMsgRes:(BOOL) _value_ {
  hasSendRoomMsgRes_ = !!_value_;
}
@synthesize sendRoomMsgRes;
- (BOOL) hasBreadcastRoomMsg {
  return !!hasBreadcastRoomMsg_;
}
- (void) setHasBreadcastRoomMsg:(BOOL) _value_ {
  hasBreadcastRoomMsg_ = !!_value_;
}
@synthesize breadcastRoomMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.uri = PenHuProtocolMsgTypeInvalidProtocol;
    self.loginGameServerReq = [PBCS_LoginGameServerReq defaultInstance];
    self.loginGameServerRes = [PBCS_LoginGameServerRes defaultInstance];
    self.loginoutGameServerReq = [PBCS_LoginOutGameServerReq defaultInstance];
    self.loginoutGameServerRes = [PBCS_LoginOutGameServerRes defaultInstance];
    self.exchangekeyReq = [PBCS_ExchangeKeyReq defaultInstance];
    self.exchangekeyRes = [PBSC_ExchangeKeyRes defaultInstance];
    self.createRoomReq = [PBCS_CreateRoomReq defaultInstance];
    self.createRoomRes = [PBSC_CreateRoomRes defaultInstance];
    self.joinRoomReq = [PBCS_JoinRoomReq defaultInstance];
    self.joinRoomRes = [PBSC_JoinRoomRes defaultInstance];
    self.userLeaveRoomNotify = [PBSC_UserLeaveRoomNotify defaultInstance];
    self.userJoinRoomNotify = [PBSC_UserJoinRoomNotify defaultInstance];
    self.userPreparedOk = [PBCS_userRoomGamePreparedOk defaultInstance];
    self.userPreparedOkRes = [PBSC_userRoomGamePreparedOkRes defaultInstance];
    self.userOperateRoomReq = [PBCS_userOperateRoomReq defaultInstance];
    self.userOperateRoomRes = [PBSC_userOperateRoomRes defaultInstance];
    self.broadcastUserOperatorRoom = [PBSC_BroadCastUserOperateRoom defaultInstance];
    self.newRoundStart = [PBSC_NewRoundStart defaultInstance];
    self.newRoundStartAck = [PBCS_NewRoundStartUserAck defaultInstance];
    self.userOutCard = [PBCS_UserOutCard defaultInstance];
    self.userOutCardRes = [PBSC_UserOutCardRes defaultInstance];
    self.userOutCardNotify = [PBSC_UserOutCardNotify defaultInstance];
    self.userOperateCard = [PBCS_UserOperateCard defaultInstance];
    self.userOperateCardRes = [PBSC_UserOperateCardRes defaultInstance];
    self.userOperateCardNotify = [PBSC_UserOperateCardNotify defaultInstance];
    self.userCanOperateCardNotify = [PBSC_UserCanOperateCardsNotify defaultInstance];
    self.userGetCardInBuffer = [PBSC_UserGetCardInBuffer defaultInstance];
    self.userGetCardInBufferack = [PBCS_UserGetCardInBufferAck defaultInstance];
    self.userGetCardBufferNotify = [PBSC_UserGetCardInBuffer_Notify defaultInstance];
    self.userPing = [PBCS_PingRoom defaultInstance];
    self.userPingRes = [PBSC_PingRoomRes defaultInstance];
    self.hupaiNotify = [PBSC_HuPai defaultInstance];
    self.roomGameOver = [PBSC_RoomGameOver defaultInstance];
    self.whoIsCurExcutor = [PBSC_BroadCastWhoIsExcutorUser defaultInstance];
    self.sendRoomMsgReq = [PBCS_SendRoomMsgReq defaultInstance];
    self.sendRoomMsgRes = [PBSC_SendRoomMsgRes defaultInstance];
    self.breadcastRoomMsg = [PBSC_BroadCastRoomMsg defaultInstance];
  }
  return self;
}
static PenHuProtocol* defaultPenHuProtocolInstance = nil;
+ (void) initialize {
  if (self == [PenHuProtocol class]) {
    defaultPenHuProtocolInstance = [[PenHuProtocol alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPenHuProtocolInstance;
}
- (instancetype) defaultInstance {
  return defaultPenHuProtocolInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUri) {
    return NO;
  }
  if (self.hasLoginGameServerReq) {
    if (!self.loginGameServerReq.isInitialized) {
      return NO;
    }
  }
  if (self.hasLoginGameServerRes) {
    if (!self.loginGameServerRes.isInitialized) {
      return NO;
    }
  }
  if (self.hasLoginoutGameServerReq) {
    if (!self.loginoutGameServerReq.isInitialized) {
      return NO;
    }
  }
  if (self.hasLoginoutGameServerRes) {
    if (!self.loginoutGameServerRes.isInitialized) {
      return NO;
    }
  }
  if (self.hasExchangekeyReq) {
    if (!self.exchangekeyReq.isInitialized) {
      return NO;
    }
  }
  if (self.hasExchangekeyRes) {
    if (!self.exchangekeyRes.isInitialized) {
      return NO;
    }
  }
  if (self.hasCreateRoomReq) {
    if (!self.createRoomReq.isInitialized) {
      return NO;
    }
  }
  if (self.hasCreateRoomRes) {
    if (!self.createRoomRes.isInitialized) {
      return NO;
    }
  }
  if (self.hasJoinRoomReq) {
    if (!self.joinRoomReq.isInitialized) {
      return NO;
    }
  }
  if (self.hasJoinRoomRes) {
    if (!self.joinRoomRes.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserLeaveRoomNotify) {
    if (!self.userLeaveRoomNotify.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserJoinRoomNotify) {
    if (!self.userJoinRoomNotify.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserPreparedOk) {
    if (!self.userPreparedOk.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserPreparedOkRes) {
    if (!self.userPreparedOkRes.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserOperateRoomReq) {
    if (!self.userOperateRoomReq.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserOperateRoomRes) {
    if (!self.userOperateRoomRes.isInitialized) {
      return NO;
    }
  }
  if (self.hasBroadcastUserOperatorRoom) {
    if (!self.broadcastUserOperatorRoom.isInitialized) {
      return NO;
    }
  }
  if (self.hasNewRoundStart) {
    if (!self.newRoundStart.isInitialized) {
      return NO;
    }
  }
  if (self.hasNewRoundStartAck) {
    if (!self.newRoundStartAck.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserOutCard) {
    if (!self.userOutCard.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserOutCardRes) {
    if (!self.userOutCardRes.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserOutCardNotify) {
    if (!self.userOutCardNotify.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserOperateCard) {
    if (!self.userOperateCard.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserOperateCardRes) {
    if (!self.userOperateCardRes.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserOperateCardNotify) {
    if (!self.userOperateCardNotify.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserCanOperateCardNotify) {
    if (!self.userCanOperateCardNotify.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserGetCardInBuffer) {
    if (!self.userGetCardInBuffer.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserGetCardInBufferack) {
    if (!self.userGetCardInBufferack.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserGetCardBufferNotify) {
    if (!self.userGetCardBufferNotify.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserPing) {
    if (!self.userPing.isInitialized) {
      return NO;
    }
  }
  if (self.hasUserPingRes) {
    if (!self.userPingRes.isInitialized) {
      return NO;
    }
  }
  if (self.hasHupaiNotify) {
    if (!self.hupaiNotify.isInitialized) {
      return NO;
    }
  }
  if (self.hasRoomGameOver) {
    if (!self.roomGameOver.isInitialized) {
      return NO;
    }
  }
  if (self.hasWhoIsCurExcutor) {
    if (!self.whoIsCurExcutor.isInitialized) {
      return NO;
    }
  }
  if (self.hasSendRoomMsgReq) {
    if (!self.sendRoomMsgReq.isInitialized) {
      return NO;
    }
  }
  if (self.hasSendRoomMsgRes) {
    if (!self.sendRoomMsgRes.isInitialized) {
      return NO;
    }
  }
  if (self.hasBreadcastRoomMsg) {
    if (!self.breadcastRoomMsg.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUri) {
    [output writeEnum:1 value:self.uri];
  }
  if (self.hasLoginGameServerReq) {
    [output writeMessage:2 value:self.loginGameServerReq];
  }
  if (self.hasLoginGameServerRes) {
    [output writeMessage:3 value:self.loginGameServerRes];
  }
  if (self.hasLoginoutGameServerReq) {
    [output writeMessage:4 value:self.loginoutGameServerReq];
  }
  if (self.hasLoginoutGameServerRes) {
    [output writeMessage:5 value:self.loginoutGameServerRes];
  }
  if (self.hasExchangekeyReq) {
    [output writeMessage:6 value:self.exchangekeyReq];
  }
  if (self.hasExchangekeyRes) {
    [output writeMessage:7 value:self.exchangekeyRes];
  }
  if (self.hasCreateRoomReq) {
    [output writeMessage:8 value:self.createRoomReq];
  }
  if (self.hasCreateRoomRes) {
    [output writeMessage:9 value:self.createRoomRes];
  }
  if (self.hasJoinRoomReq) {
    [output writeMessage:10 value:self.joinRoomReq];
  }
  if (self.hasJoinRoomRes) {
    [output writeMessage:11 value:self.joinRoomRes];
  }
  if (self.hasUserLeaveRoomNotify) {
    [output writeMessage:12 value:self.userLeaveRoomNotify];
  }
  if (self.hasUserJoinRoomNotify) {
    [output writeMessage:13 value:self.userJoinRoomNotify];
  }
  if (self.hasUserPreparedOk) {
    [output writeMessage:14 value:self.userPreparedOk];
  }
  if (self.hasUserPreparedOkRes) {
    [output writeMessage:15 value:self.userPreparedOkRes];
  }
  if (self.hasUserOperateRoomReq) {
    [output writeMessage:16 value:self.userOperateRoomReq];
  }
  if (self.hasUserOperateRoomRes) {
    [output writeMessage:17 value:self.userOperateRoomRes];
  }
  if (self.hasBroadcastUserOperatorRoom) {
    [output writeMessage:18 value:self.broadcastUserOperatorRoom];
  }
  if (self.hasNewRoundStart) {
    [output writeMessage:19 value:self.newRoundStart];
  }
  if (self.hasNewRoundStartAck) {
    [output writeMessage:20 value:self.newRoundStartAck];
  }
  if (self.hasUserOutCard) {
    [output writeMessage:21 value:self.userOutCard];
  }
  if (self.hasUserOutCardRes) {
    [output writeMessage:22 value:self.userOutCardRes];
  }
  if (self.hasUserOutCardNotify) {
    [output writeMessage:23 value:self.userOutCardNotify];
  }
  if (self.hasUserOperateCard) {
    [output writeMessage:24 value:self.userOperateCard];
  }
  if (self.hasUserOperateCardRes) {
    [output writeMessage:25 value:self.userOperateCardRes];
  }
  if (self.hasUserOperateCardNotify) {
    [output writeMessage:26 value:self.userOperateCardNotify];
  }
  if (self.hasUserCanOperateCardNotify) {
    [output writeMessage:27 value:self.userCanOperateCardNotify];
  }
  if (self.hasUserGetCardInBuffer) {
    [output writeMessage:28 value:self.userGetCardInBuffer];
  }
  if (self.hasUserGetCardInBufferack) {
    [output writeMessage:29 value:self.userGetCardInBufferack];
  }
  if (self.hasUserGetCardBufferNotify) {
    [output writeMessage:30 value:self.userGetCardBufferNotify];
  }
  if (self.hasUserPing) {
    [output writeMessage:31 value:self.userPing];
  }
  if (self.hasUserPingRes) {
    [output writeMessage:32 value:self.userPingRes];
  }
  if (self.hasHupaiNotify) {
    [output writeMessage:33 value:self.hupaiNotify];
  }
  if (self.hasRoomGameOver) {
    [output writeMessage:34 value:self.roomGameOver];
  }
  if (self.hasWhoIsCurExcutor) {
    [output writeMessage:35 value:self.whoIsCurExcutor];
  }
  if (self.hasSendRoomMsgReq) {
    [output writeMessage:36 value:self.sendRoomMsgReq];
  }
  if (self.hasSendRoomMsgRes) {
    [output writeMessage:37 value:self.sendRoomMsgRes];
  }
  if (self.hasBreadcastRoomMsg) {
    [output writeMessage:38 value:self.breadcastRoomMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUri) {
    size_ += computeEnumSize(1, self.uri);
  }
  if (self.hasLoginGameServerReq) {
    size_ += computeMessageSize(2, self.loginGameServerReq);
  }
  if (self.hasLoginGameServerRes) {
    size_ += computeMessageSize(3, self.loginGameServerRes);
  }
  if (self.hasLoginoutGameServerReq) {
    size_ += computeMessageSize(4, self.loginoutGameServerReq);
  }
  if (self.hasLoginoutGameServerRes) {
    size_ += computeMessageSize(5, self.loginoutGameServerRes);
  }
  if (self.hasExchangekeyReq) {
    size_ += computeMessageSize(6, self.exchangekeyReq);
  }
  if (self.hasExchangekeyRes) {
    size_ += computeMessageSize(7, self.exchangekeyRes);
  }
  if (self.hasCreateRoomReq) {
    size_ += computeMessageSize(8, self.createRoomReq);
  }
  if (self.hasCreateRoomRes) {
    size_ += computeMessageSize(9, self.createRoomRes);
  }
  if (self.hasJoinRoomReq) {
    size_ += computeMessageSize(10, self.joinRoomReq);
  }
  if (self.hasJoinRoomRes) {
    size_ += computeMessageSize(11, self.joinRoomRes);
  }
  if (self.hasUserLeaveRoomNotify) {
    size_ += computeMessageSize(12, self.userLeaveRoomNotify);
  }
  if (self.hasUserJoinRoomNotify) {
    size_ += computeMessageSize(13, self.userJoinRoomNotify);
  }
  if (self.hasUserPreparedOk) {
    size_ += computeMessageSize(14, self.userPreparedOk);
  }
  if (self.hasUserPreparedOkRes) {
    size_ += computeMessageSize(15, self.userPreparedOkRes);
  }
  if (self.hasUserOperateRoomReq) {
    size_ += computeMessageSize(16, self.userOperateRoomReq);
  }
  if (self.hasUserOperateRoomRes) {
    size_ += computeMessageSize(17, self.userOperateRoomRes);
  }
  if (self.hasBroadcastUserOperatorRoom) {
    size_ += computeMessageSize(18, self.broadcastUserOperatorRoom);
  }
  if (self.hasNewRoundStart) {
    size_ += computeMessageSize(19, self.newRoundStart);
  }
  if (self.hasNewRoundStartAck) {
    size_ += computeMessageSize(20, self.newRoundStartAck);
  }
  if (self.hasUserOutCard) {
    size_ += computeMessageSize(21, self.userOutCard);
  }
  if (self.hasUserOutCardRes) {
    size_ += computeMessageSize(22, self.userOutCardRes);
  }
  if (self.hasUserOutCardNotify) {
    size_ += computeMessageSize(23, self.userOutCardNotify);
  }
  if (self.hasUserOperateCard) {
    size_ += computeMessageSize(24, self.userOperateCard);
  }
  if (self.hasUserOperateCardRes) {
    size_ += computeMessageSize(25, self.userOperateCardRes);
  }
  if (self.hasUserOperateCardNotify) {
    size_ += computeMessageSize(26, self.userOperateCardNotify);
  }
  if (self.hasUserCanOperateCardNotify) {
    size_ += computeMessageSize(27, self.userCanOperateCardNotify);
  }
  if (self.hasUserGetCardInBuffer) {
    size_ += computeMessageSize(28, self.userGetCardInBuffer);
  }
  if (self.hasUserGetCardInBufferack) {
    size_ += computeMessageSize(29, self.userGetCardInBufferack);
  }
  if (self.hasUserGetCardBufferNotify) {
    size_ += computeMessageSize(30, self.userGetCardBufferNotify);
  }
  if (self.hasUserPing) {
    size_ += computeMessageSize(31, self.userPing);
  }
  if (self.hasUserPingRes) {
    size_ += computeMessageSize(32, self.userPingRes);
  }
  if (self.hasHupaiNotify) {
    size_ += computeMessageSize(33, self.hupaiNotify);
  }
  if (self.hasRoomGameOver) {
    size_ += computeMessageSize(34, self.roomGameOver);
  }
  if (self.hasWhoIsCurExcutor) {
    size_ += computeMessageSize(35, self.whoIsCurExcutor);
  }
  if (self.hasSendRoomMsgReq) {
    size_ += computeMessageSize(36, self.sendRoomMsgReq);
  }
  if (self.hasSendRoomMsgRes) {
    size_ += computeMessageSize(37, self.sendRoomMsgRes);
  }
  if (self.hasBreadcastRoomMsg) {
    size_ += computeMessageSize(38, self.breadcastRoomMsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PenHuProtocol*) parseFromData:(NSData*) data {
  return (PenHuProtocol*)[[[PenHuProtocol builder] mergeFromData:data] build];
}
+ (PenHuProtocol*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PenHuProtocol*)[[[PenHuProtocol builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PenHuProtocol*) parseFromInputStream:(NSInputStream*) input {
  return (PenHuProtocol*)[[[PenHuProtocol builder] mergeFromInputStream:input] build];
}
+ (PenHuProtocol*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PenHuProtocol*)[[[PenHuProtocol builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PenHuProtocol*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PenHuProtocol*)[[[PenHuProtocol builder] mergeFromCodedInputStream:input] build];
}
+ (PenHuProtocol*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PenHuProtocol*)[[[PenHuProtocol builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PenHuProtocolBuilder*) builder {
  return [[PenHuProtocolBuilder alloc] init];
}
+ (PenHuProtocolBuilder*) builderWithPrototype:(PenHuProtocol*) prototype {
  return [[PenHuProtocol builder] mergeFrom:prototype];
}
- (PenHuProtocolBuilder*) builder {
  return [PenHuProtocol builder];
}
- (PenHuProtocolBuilder*) toBuilder {
  return [PenHuProtocol builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUri) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uri", NSStringFromPenHuProtocolMsgType(self.uri)];
  }
  if (self.hasLoginGameServerReq) {
    [output appendFormat:@"%@%@ {\n", indent, @"loginGameServerReq"];
    [self.loginGameServerReq writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLoginGameServerRes) {
    [output appendFormat:@"%@%@ {\n", indent, @"loginGameServerRes"];
    [self.loginGameServerRes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLoginoutGameServerReq) {
    [output appendFormat:@"%@%@ {\n", indent, @"loginoutGameServerReq"];
    [self.loginoutGameServerReq writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLoginoutGameServerRes) {
    [output appendFormat:@"%@%@ {\n", indent, @"loginoutGameServerRes"];
    [self.loginoutGameServerRes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasExchangekeyReq) {
    [output appendFormat:@"%@%@ {\n", indent, @"exchangekeyReq"];
    [self.exchangekeyReq writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasExchangekeyRes) {
    [output appendFormat:@"%@%@ {\n", indent, @"exchangekeyRes"];
    [self.exchangekeyRes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCreateRoomReq) {
    [output appendFormat:@"%@%@ {\n", indent, @"createRoomReq"];
    [self.createRoomReq writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCreateRoomRes) {
    [output appendFormat:@"%@%@ {\n", indent, @"createRoomRes"];
    [self.createRoomRes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasJoinRoomReq) {
    [output appendFormat:@"%@%@ {\n", indent, @"joinRoomReq"];
    [self.joinRoomReq writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasJoinRoomRes) {
    [output appendFormat:@"%@%@ {\n", indent, @"joinRoomRes"];
    [self.joinRoomRes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserLeaveRoomNotify) {
    [output appendFormat:@"%@%@ {\n", indent, @"userLeaveRoomNotify"];
    [self.userLeaveRoomNotify writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserJoinRoomNotify) {
    [output appendFormat:@"%@%@ {\n", indent, @"userJoinRoomNotify"];
    [self.userJoinRoomNotify writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserPreparedOk) {
    [output appendFormat:@"%@%@ {\n", indent, @"userPreparedOk"];
    [self.userPreparedOk writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserPreparedOkRes) {
    [output appendFormat:@"%@%@ {\n", indent, @"userPreparedOkRes"];
    [self.userPreparedOkRes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserOperateRoomReq) {
    [output appendFormat:@"%@%@ {\n", indent, @"userOperateRoomReq"];
    [self.userOperateRoomReq writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserOperateRoomRes) {
    [output appendFormat:@"%@%@ {\n", indent, @"userOperateRoomRes"];
    [self.userOperateRoomRes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBroadcastUserOperatorRoom) {
    [output appendFormat:@"%@%@ {\n", indent, @"broadcastUserOperatorRoom"];
    [self.broadcastUserOperatorRoom writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasNewRoundStart) {
    [output appendFormat:@"%@%@ {\n", indent, @"newRoundStart"];
    [self.newRoundStart writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasNewRoundStartAck) {
    [output appendFormat:@"%@%@ {\n", indent, @"newRoundStartAck"];
    [self.newRoundStartAck writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserOutCard) {
    [output appendFormat:@"%@%@ {\n", indent, @"userOutCard"];
    [self.userOutCard writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserOutCardRes) {
    [output appendFormat:@"%@%@ {\n", indent, @"userOutCardRes"];
    [self.userOutCardRes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserOutCardNotify) {
    [output appendFormat:@"%@%@ {\n", indent, @"userOutCardNotify"];
    [self.userOutCardNotify writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserOperateCard) {
    [output appendFormat:@"%@%@ {\n", indent, @"userOperateCard"];
    [self.userOperateCard writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserOperateCardRes) {
    [output appendFormat:@"%@%@ {\n", indent, @"userOperateCardRes"];
    [self.userOperateCardRes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserOperateCardNotify) {
    [output appendFormat:@"%@%@ {\n", indent, @"userOperateCardNotify"];
    [self.userOperateCardNotify writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserCanOperateCardNotify) {
    [output appendFormat:@"%@%@ {\n", indent, @"userCanOperateCardNotify"];
    [self.userCanOperateCardNotify writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserGetCardInBuffer) {
    [output appendFormat:@"%@%@ {\n", indent, @"userGetCardInBuffer"];
    [self.userGetCardInBuffer writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserGetCardInBufferack) {
    [output appendFormat:@"%@%@ {\n", indent, @"userGetCardInBufferack"];
    [self.userGetCardInBufferack writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserGetCardBufferNotify) {
    [output appendFormat:@"%@%@ {\n", indent, @"userGetCardBufferNotify"];
    [self.userGetCardBufferNotify writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserPing) {
    [output appendFormat:@"%@%@ {\n", indent, @"userPing"];
    [self.userPing writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUserPingRes) {
    [output appendFormat:@"%@%@ {\n", indent, @"userPingRes"];
    [self.userPingRes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasHupaiNotify) {
    [output appendFormat:@"%@%@ {\n", indent, @"hupaiNotify"];
    [self.hupaiNotify writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRoomGameOver) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomGameOver"];
    [self.roomGameOver writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasWhoIsCurExcutor) {
    [output appendFormat:@"%@%@ {\n", indent, @"whoIsCurExcutor"];
    [self.whoIsCurExcutor writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSendRoomMsgReq) {
    [output appendFormat:@"%@%@ {\n", indent, @"sendRoomMsgReq"];
    [self.sendRoomMsgReq writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSendRoomMsgRes) {
    [output appendFormat:@"%@%@ {\n", indent, @"sendRoomMsgRes"];
    [self.sendRoomMsgRes writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBreadcastRoomMsg) {
    [output appendFormat:@"%@%@ {\n", indent, @"breadcastRoomMsg"];
    [self.breadcastRoomMsg writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUri) {
    [dictionary setObject: @(self.uri) forKey: @"uri"];
  }
  if (self.hasLoginGameServerReq) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.loginGameServerReq storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"loginGameServerReq"];
  }
  if (self.hasLoginGameServerRes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.loginGameServerRes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"loginGameServerRes"];
  }
  if (self.hasLoginoutGameServerReq) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.loginoutGameServerReq storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"loginoutGameServerReq"];
  }
  if (self.hasLoginoutGameServerRes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.loginoutGameServerRes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"loginoutGameServerRes"];
  }
  if (self.hasExchangekeyReq) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.exchangekeyReq storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"exchangekeyReq"];
  }
  if (self.hasExchangekeyRes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.exchangekeyRes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"exchangekeyRes"];
  }
  if (self.hasCreateRoomReq) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.createRoomReq storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"createRoomReq"];
  }
  if (self.hasCreateRoomRes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.createRoomRes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"createRoomRes"];
  }
  if (self.hasJoinRoomReq) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.joinRoomReq storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"joinRoomReq"];
  }
  if (self.hasJoinRoomRes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.joinRoomRes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"joinRoomRes"];
  }
  if (self.hasUserLeaveRoomNotify) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userLeaveRoomNotify storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userLeaveRoomNotify"];
  }
  if (self.hasUserJoinRoomNotify) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userJoinRoomNotify storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userJoinRoomNotify"];
  }
  if (self.hasUserPreparedOk) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userPreparedOk storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userPreparedOk"];
  }
  if (self.hasUserPreparedOkRes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userPreparedOkRes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userPreparedOkRes"];
  }
  if (self.hasUserOperateRoomReq) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userOperateRoomReq storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userOperateRoomReq"];
  }
  if (self.hasUserOperateRoomRes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userOperateRoomRes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userOperateRoomRes"];
  }
  if (self.hasBroadcastUserOperatorRoom) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.broadcastUserOperatorRoom storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"broadcastUserOperatorRoom"];
  }
  if (self.hasNewRoundStart) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.newRoundStart storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"newRoundStart"];
  }
  if (self.hasNewRoundStartAck) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.newRoundStartAck storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"newRoundStartAck"];
  }
  if (self.hasUserOutCard) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userOutCard storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userOutCard"];
  }
  if (self.hasUserOutCardRes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userOutCardRes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userOutCardRes"];
  }
  if (self.hasUserOutCardNotify) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userOutCardNotify storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userOutCardNotify"];
  }
  if (self.hasUserOperateCard) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userOperateCard storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userOperateCard"];
  }
  if (self.hasUserOperateCardRes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userOperateCardRes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userOperateCardRes"];
  }
  if (self.hasUserOperateCardNotify) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userOperateCardNotify storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userOperateCardNotify"];
  }
  if (self.hasUserCanOperateCardNotify) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userCanOperateCardNotify storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userCanOperateCardNotify"];
  }
  if (self.hasUserGetCardInBuffer) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userGetCardInBuffer storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userGetCardInBuffer"];
  }
  if (self.hasUserGetCardInBufferack) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userGetCardInBufferack storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userGetCardInBufferack"];
  }
  if (self.hasUserGetCardBufferNotify) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userGetCardBufferNotify storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userGetCardBufferNotify"];
  }
  if (self.hasUserPing) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userPing storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userPing"];
  }
  if (self.hasUserPingRes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userPingRes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userPingRes"];
  }
  if (self.hasHupaiNotify) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.hupaiNotify storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"hupaiNotify"];
  }
  if (self.hasRoomGameOver) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.roomGameOver storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"roomGameOver"];
  }
  if (self.hasWhoIsCurExcutor) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.whoIsCurExcutor storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"whoIsCurExcutor"];
  }
  if (self.hasSendRoomMsgReq) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.sendRoomMsgReq storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"sendRoomMsgReq"];
  }
  if (self.hasSendRoomMsgRes) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.sendRoomMsgRes storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"sendRoomMsgRes"];
  }
  if (self.hasBreadcastRoomMsg) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.breadcastRoomMsg storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"breadcastRoomMsg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PenHuProtocol class]]) {
    return NO;
  }
  PenHuProtocol *otherMessage = other;
  return
      self.hasUri == otherMessage.hasUri &&
      (!self.hasUri || self.uri == otherMessage.uri) &&
      self.hasLoginGameServerReq == otherMessage.hasLoginGameServerReq &&
      (!self.hasLoginGameServerReq || [self.loginGameServerReq isEqual:otherMessage.loginGameServerReq]) &&
      self.hasLoginGameServerRes == otherMessage.hasLoginGameServerRes &&
      (!self.hasLoginGameServerRes || [self.loginGameServerRes isEqual:otherMessage.loginGameServerRes]) &&
      self.hasLoginoutGameServerReq == otherMessage.hasLoginoutGameServerReq &&
      (!self.hasLoginoutGameServerReq || [self.loginoutGameServerReq isEqual:otherMessage.loginoutGameServerReq]) &&
      self.hasLoginoutGameServerRes == otherMessage.hasLoginoutGameServerRes &&
      (!self.hasLoginoutGameServerRes || [self.loginoutGameServerRes isEqual:otherMessage.loginoutGameServerRes]) &&
      self.hasExchangekeyReq == otherMessage.hasExchangekeyReq &&
      (!self.hasExchangekeyReq || [self.exchangekeyReq isEqual:otherMessage.exchangekeyReq]) &&
      self.hasExchangekeyRes == otherMessage.hasExchangekeyRes &&
      (!self.hasExchangekeyRes || [self.exchangekeyRes isEqual:otherMessage.exchangekeyRes]) &&
      self.hasCreateRoomReq == otherMessage.hasCreateRoomReq &&
      (!self.hasCreateRoomReq || [self.createRoomReq isEqual:otherMessage.createRoomReq]) &&
      self.hasCreateRoomRes == otherMessage.hasCreateRoomRes &&
      (!self.hasCreateRoomRes || [self.createRoomRes isEqual:otherMessage.createRoomRes]) &&
      self.hasJoinRoomReq == otherMessage.hasJoinRoomReq &&
      (!self.hasJoinRoomReq || [self.joinRoomReq isEqual:otherMessage.joinRoomReq]) &&
      self.hasJoinRoomRes == otherMessage.hasJoinRoomRes &&
      (!self.hasJoinRoomRes || [self.joinRoomRes isEqual:otherMessage.joinRoomRes]) &&
      self.hasUserLeaveRoomNotify == otherMessage.hasUserLeaveRoomNotify &&
      (!self.hasUserLeaveRoomNotify || [self.userLeaveRoomNotify isEqual:otherMessage.userLeaveRoomNotify]) &&
      self.hasUserJoinRoomNotify == otherMessage.hasUserJoinRoomNotify &&
      (!self.hasUserJoinRoomNotify || [self.userJoinRoomNotify isEqual:otherMessage.userJoinRoomNotify]) &&
      self.hasUserPreparedOk == otherMessage.hasUserPreparedOk &&
      (!self.hasUserPreparedOk || [self.userPreparedOk isEqual:otherMessage.userPreparedOk]) &&
      self.hasUserPreparedOkRes == otherMessage.hasUserPreparedOkRes &&
      (!self.hasUserPreparedOkRes || [self.userPreparedOkRes isEqual:otherMessage.userPreparedOkRes]) &&
      self.hasUserOperateRoomReq == otherMessage.hasUserOperateRoomReq &&
      (!self.hasUserOperateRoomReq || [self.userOperateRoomReq isEqual:otherMessage.userOperateRoomReq]) &&
      self.hasUserOperateRoomRes == otherMessage.hasUserOperateRoomRes &&
      (!self.hasUserOperateRoomRes || [self.userOperateRoomRes isEqual:otherMessage.userOperateRoomRes]) &&
      self.hasBroadcastUserOperatorRoom == otherMessage.hasBroadcastUserOperatorRoom &&
      (!self.hasBroadcastUserOperatorRoom || [self.broadcastUserOperatorRoom isEqual:otherMessage.broadcastUserOperatorRoom]) &&
      self.hasNewRoundStart == otherMessage.hasNewRoundStart &&
      (!self.hasNewRoundStart || [self.newRoundStart isEqual:otherMessage.newRoundStart]) &&
      self.hasNewRoundStartAck == otherMessage.hasNewRoundStartAck &&
      (!self.hasNewRoundStartAck || [self.newRoundStartAck isEqual:otherMessage.newRoundStartAck]) &&
      self.hasUserOutCard == otherMessage.hasUserOutCard &&
      (!self.hasUserOutCard || [self.userOutCard isEqual:otherMessage.userOutCard]) &&
      self.hasUserOutCardRes == otherMessage.hasUserOutCardRes &&
      (!self.hasUserOutCardRes || [self.userOutCardRes isEqual:otherMessage.userOutCardRes]) &&
      self.hasUserOutCardNotify == otherMessage.hasUserOutCardNotify &&
      (!self.hasUserOutCardNotify || [self.userOutCardNotify isEqual:otherMessage.userOutCardNotify]) &&
      self.hasUserOperateCard == otherMessage.hasUserOperateCard &&
      (!self.hasUserOperateCard || [self.userOperateCard isEqual:otherMessage.userOperateCard]) &&
      self.hasUserOperateCardRes == otherMessage.hasUserOperateCardRes &&
      (!self.hasUserOperateCardRes || [self.userOperateCardRes isEqual:otherMessage.userOperateCardRes]) &&
      self.hasUserOperateCardNotify == otherMessage.hasUserOperateCardNotify &&
      (!self.hasUserOperateCardNotify || [self.userOperateCardNotify isEqual:otherMessage.userOperateCardNotify]) &&
      self.hasUserCanOperateCardNotify == otherMessage.hasUserCanOperateCardNotify &&
      (!self.hasUserCanOperateCardNotify || [self.userCanOperateCardNotify isEqual:otherMessage.userCanOperateCardNotify]) &&
      self.hasUserGetCardInBuffer == otherMessage.hasUserGetCardInBuffer &&
      (!self.hasUserGetCardInBuffer || [self.userGetCardInBuffer isEqual:otherMessage.userGetCardInBuffer]) &&
      self.hasUserGetCardInBufferack == otherMessage.hasUserGetCardInBufferack &&
      (!self.hasUserGetCardInBufferack || [self.userGetCardInBufferack isEqual:otherMessage.userGetCardInBufferack]) &&
      self.hasUserGetCardBufferNotify == otherMessage.hasUserGetCardBufferNotify &&
      (!self.hasUserGetCardBufferNotify || [self.userGetCardBufferNotify isEqual:otherMessage.userGetCardBufferNotify]) &&
      self.hasUserPing == otherMessage.hasUserPing &&
      (!self.hasUserPing || [self.userPing isEqual:otherMessage.userPing]) &&
      self.hasUserPingRes == otherMessage.hasUserPingRes &&
      (!self.hasUserPingRes || [self.userPingRes isEqual:otherMessage.userPingRes]) &&
      self.hasHupaiNotify == otherMessage.hasHupaiNotify &&
      (!self.hasHupaiNotify || [self.hupaiNotify isEqual:otherMessage.hupaiNotify]) &&
      self.hasRoomGameOver == otherMessage.hasRoomGameOver &&
      (!self.hasRoomGameOver || [self.roomGameOver isEqual:otherMessage.roomGameOver]) &&
      self.hasWhoIsCurExcutor == otherMessage.hasWhoIsCurExcutor &&
      (!self.hasWhoIsCurExcutor || [self.whoIsCurExcutor isEqual:otherMessage.whoIsCurExcutor]) &&
      self.hasSendRoomMsgReq == otherMessage.hasSendRoomMsgReq &&
      (!self.hasSendRoomMsgReq || [self.sendRoomMsgReq isEqual:otherMessage.sendRoomMsgReq]) &&
      self.hasSendRoomMsgRes == otherMessage.hasSendRoomMsgRes &&
      (!self.hasSendRoomMsgRes || [self.sendRoomMsgRes isEqual:otherMessage.sendRoomMsgRes]) &&
      self.hasBreadcastRoomMsg == otherMessage.hasBreadcastRoomMsg &&
      (!self.hasBreadcastRoomMsg || [self.breadcastRoomMsg isEqual:otherMessage.breadcastRoomMsg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUri) {
    hashCode = hashCode * 31 + self.uri;
  }
  if (self.hasLoginGameServerReq) {
    hashCode = hashCode * 31 + [self.loginGameServerReq hash];
  }
  if (self.hasLoginGameServerRes) {
    hashCode = hashCode * 31 + [self.loginGameServerRes hash];
  }
  if (self.hasLoginoutGameServerReq) {
    hashCode = hashCode * 31 + [self.loginoutGameServerReq hash];
  }
  if (self.hasLoginoutGameServerRes) {
    hashCode = hashCode * 31 + [self.loginoutGameServerRes hash];
  }
  if (self.hasExchangekeyReq) {
    hashCode = hashCode * 31 + [self.exchangekeyReq hash];
  }
  if (self.hasExchangekeyRes) {
    hashCode = hashCode * 31 + [self.exchangekeyRes hash];
  }
  if (self.hasCreateRoomReq) {
    hashCode = hashCode * 31 + [self.createRoomReq hash];
  }
  if (self.hasCreateRoomRes) {
    hashCode = hashCode * 31 + [self.createRoomRes hash];
  }
  if (self.hasJoinRoomReq) {
    hashCode = hashCode * 31 + [self.joinRoomReq hash];
  }
  if (self.hasJoinRoomRes) {
    hashCode = hashCode * 31 + [self.joinRoomRes hash];
  }
  if (self.hasUserLeaveRoomNotify) {
    hashCode = hashCode * 31 + [self.userLeaveRoomNotify hash];
  }
  if (self.hasUserJoinRoomNotify) {
    hashCode = hashCode * 31 + [self.userJoinRoomNotify hash];
  }
  if (self.hasUserPreparedOk) {
    hashCode = hashCode * 31 + [self.userPreparedOk hash];
  }
  if (self.hasUserPreparedOkRes) {
    hashCode = hashCode * 31 + [self.userPreparedOkRes hash];
  }
  if (self.hasUserOperateRoomReq) {
    hashCode = hashCode * 31 + [self.userOperateRoomReq hash];
  }
  if (self.hasUserOperateRoomRes) {
    hashCode = hashCode * 31 + [self.userOperateRoomRes hash];
  }
  if (self.hasBroadcastUserOperatorRoom) {
    hashCode = hashCode * 31 + [self.broadcastUserOperatorRoom hash];
  }
  if (self.hasNewRoundStart) {
    hashCode = hashCode * 31 + [self.newRoundStart hash];
  }
  if (self.hasNewRoundStartAck) {
    hashCode = hashCode * 31 + [self.newRoundStartAck hash];
  }
  if (self.hasUserOutCard) {
    hashCode = hashCode * 31 + [self.userOutCard hash];
  }
  if (self.hasUserOutCardRes) {
    hashCode = hashCode * 31 + [self.userOutCardRes hash];
  }
  if (self.hasUserOutCardNotify) {
    hashCode = hashCode * 31 + [self.userOutCardNotify hash];
  }
  if (self.hasUserOperateCard) {
    hashCode = hashCode * 31 + [self.userOperateCard hash];
  }
  if (self.hasUserOperateCardRes) {
    hashCode = hashCode * 31 + [self.userOperateCardRes hash];
  }
  if (self.hasUserOperateCardNotify) {
    hashCode = hashCode * 31 + [self.userOperateCardNotify hash];
  }
  if (self.hasUserCanOperateCardNotify) {
    hashCode = hashCode * 31 + [self.userCanOperateCardNotify hash];
  }
  if (self.hasUserGetCardInBuffer) {
    hashCode = hashCode * 31 + [self.userGetCardInBuffer hash];
  }
  if (self.hasUserGetCardInBufferack) {
    hashCode = hashCode * 31 + [self.userGetCardInBufferack hash];
  }
  if (self.hasUserGetCardBufferNotify) {
    hashCode = hashCode * 31 + [self.userGetCardBufferNotify hash];
  }
  if (self.hasUserPing) {
    hashCode = hashCode * 31 + [self.userPing hash];
  }
  if (self.hasUserPingRes) {
    hashCode = hashCode * 31 + [self.userPingRes hash];
  }
  if (self.hasHupaiNotify) {
    hashCode = hashCode * 31 + [self.hupaiNotify hash];
  }
  if (self.hasRoomGameOver) {
    hashCode = hashCode * 31 + [self.roomGameOver hash];
  }
  if (self.hasWhoIsCurExcutor) {
    hashCode = hashCode * 31 + [self.whoIsCurExcutor hash];
  }
  if (self.hasSendRoomMsgReq) {
    hashCode = hashCode * 31 + [self.sendRoomMsgReq hash];
  }
  if (self.hasSendRoomMsgRes) {
    hashCode = hashCode * 31 + [self.sendRoomMsgRes hash];
  }
  if (self.hasBreadcastRoomMsg) {
    hashCode = hashCode * 31 + [self.breadcastRoomMsg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PenHuProtocolMsgTypeIsValidValue(PenHuProtocolMsgType value) {
  switch (value) {
    case PenHuProtocolMsgTypeInvalidProtocol:
    case PenHuProtocolMsgTypeUirLoginGameServerReq:
    case PenHuProtocolMsgTypeUirLoginGameServerRes:
    case PenHuProtocolMsgTypeUirLoginoutGameServerReq:
    case PenHuProtocolMsgTypeUirLoginoutGameServerRes:
    case PenHuProtocolMsgTypeUirExchangeKey:
    case PenHuProtocolMsgTypeUirExchangeKeyRes:
    case PenHuProtocolMsgTypeUirCreateRoomReq:
    case PenHuProtocolMsgTypeUirCreateRoomRes:
    case PenHuProtocolMsgTypeUriJoinRoom:
    case PenHuProtocolMsgTypeUriJoniRoomRes:
    case PenHuProtocolMsgTypeUriUserLeaveRoomNotify:
    case PenHuProtocolMsgTypeUriUserJoinRoomNotify:
    case PenHuProtocolMsgTypeUriUserPreparedOk:
    case PenHuProtocolMsgTypeUriUserPreparedOkRes:
    case PenHuProtocolMsgTypeUriUserOperateRoomReq:
    case PenHuProtocolMsgTypeUriUserOperateRoomRes:
    case PenHuProtocolMsgTypeUriBroadcastUserOperatorRoom:
    case PenHuProtocolMsgTypeUirNewRound:
    case PenHuProtocolMsgTypeUirNewRoundUserAck:
    case PenHuProtocolMsgTypeUirUserOutCard:
    case PenHuProtocolMsgTypeUirUserOutCardRes:
    case PenHuProtocolMsgTypeUirUserOutCardNotify:
    case PenHuProtocolMsgTypeUirUserOperateCard:
    case PenHuProtocolMsgTypeUirUserOperateCardRes:
    case PenHuProtocolMsgTypeUirUserOperateCardNotify:
    case PenHuProtocolMsgTypeUirUserCanOperateCardNotify:
    case PenHuProtocolMsgTypeUirUserGetCardInBuffer:
    case PenHuProtocolMsgTypeUirUserGetCardInBufferAck:
    case PenHuProtocolMsgTypeUirUserGetCardInBufferNotify:
    case PenHuProtocolMsgTypeUriPingRoom:
    case PenHuProtocolMsgTypeUriPingRoomRes:
    case PenHuProtocolMsgTypeUriHupaiNoitfy:
    case PenHuProtocolMsgTypeUriGameoverNoitfy:
    case PenHuProtocolMsgTypeUriBroadcastWhoisExcutor:
    case PenHuProtocolMsgTypeUriSendRoomMsgReq:
    case PenHuProtocolMsgTypeUriSendRoomMsgRes:
    case PenHuProtocolMsgTypeUriBroadcastRoomMsg:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromPenHuProtocolMsgType(PenHuProtocolMsgType value) {
  switch (value) {
    case PenHuProtocolMsgTypeInvalidProtocol:
      return @"PenHuProtocolMsgTypeInvalidProtocol";
    case PenHuProtocolMsgTypeUirLoginGameServerReq:
      return @"PenHuProtocolMsgTypeUirLoginGameServerReq";
    case PenHuProtocolMsgTypeUirLoginGameServerRes:
      return @"PenHuProtocolMsgTypeUirLoginGameServerRes";
    case PenHuProtocolMsgTypeUirLoginoutGameServerReq:
      return @"PenHuProtocolMsgTypeUirLoginoutGameServerReq";
    case PenHuProtocolMsgTypeUirLoginoutGameServerRes:
      return @"PenHuProtocolMsgTypeUirLoginoutGameServerRes";
    case PenHuProtocolMsgTypeUirExchangeKey:
      return @"PenHuProtocolMsgTypeUirExchangeKey";
    case PenHuProtocolMsgTypeUirExchangeKeyRes:
      return @"PenHuProtocolMsgTypeUirExchangeKeyRes";
    case PenHuProtocolMsgTypeUirCreateRoomReq:
      return @"PenHuProtocolMsgTypeUirCreateRoomReq";
    case PenHuProtocolMsgTypeUirCreateRoomRes:
      return @"PenHuProtocolMsgTypeUirCreateRoomRes";
    case PenHuProtocolMsgTypeUriJoinRoom:
      return @"PenHuProtocolMsgTypeUriJoinRoom";
    case PenHuProtocolMsgTypeUriJoniRoomRes:
      return @"PenHuProtocolMsgTypeUriJoniRoomRes";
    case PenHuProtocolMsgTypeUriUserLeaveRoomNotify:
      return @"PenHuProtocolMsgTypeUriUserLeaveRoomNotify";
    case PenHuProtocolMsgTypeUriUserJoinRoomNotify:
      return @"PenHuProtocolMsgTypeUriUserJoinRoomNotify";
    case PenHuProtocolMsgTypeUriUserPreparedOk:
      return @"PenHuProtocolMsgTypeUriUserPreparedOk";
    case PenHuProtocolMsgTypeUriUserPreparedOkRes:
      return @"PenHuProtocolMsgTypeUriUserPreparedOkRes";
    case PenHuProtocolMsgTypeUriUserOperateRoomReq:
      return @"PenHuProtocolMsgTypeUriUserOperateRoomReq";
    case PenHuProtocolMsgTypeUriUserOperateRoomRes:
      return @"PenHuProtocolMsgTypeUriUserOperateRoomRes";
    case PenHuProtocolMsgTypeUriBroadcastUserOperatorRoom:
      return @"PenHuProtocolMsgTypeUriBroadcastUserOperatorRoom";
    case PenHuProtocolMsgTypeUirNewRound:
      return @"PenHuProtocolMsgTypeUirNewRound";
    case PenHuProtocolMsgTypeUirNewRoundUserAck:
      return @"PenHuProtocolMsgTypeUirNewRoundUserAck";
    case PenHuProtocolMsgTypeUirUserOutCard:
      return @"PenHuProtocolMsgTypeUirUserOutCard";
    case PenHuProtocolMsgTypeUirUserOutCardRes:
      return @"PenHuProtocolMsgTypeUirUserOutCardRes";
    case PenHuProtocolMsgTypeUirUserOutCardNotify:
      return @"PenHuProtocolMsgTypeUirUserOutCardNotify";
    case PenHuProtocolMsgTypeUirUserOperateCard:
      return @"PenHuProtocolMsgTypeUirUserOperateCard";
    case PenHuProtocolMsgTypeUirUserOperateCardRes:
      return @"PenHuProtocolMsgTypeUirUserOperateCardRes";
    case PenHuProtocolMsgTypeUirUserOperateCardNotify:
      return @"PenHuProtocolMsgTypeUirUserOperateCardNotify";
    case PenHuProtocolMsgTypeUirUserCanOperateCardNotify:
      return @"PenHuProtocolMsgTypeUirUserCanOperateCardNotify";
    case PenHuProtocolMsgTypeUirUserGetCardInBuffer:
      return @"PenHuProtocolMsgTypeUirUserGetCardInBuffer";
    case PenHuProtocolMsgTypeUirUserGetCardInBufferAck:
      return @"PenHuProtocolMsgTypeUirUserGetCardInBufferAck";
    case PenHuProtocolMsgTypeUirUserGetCardInBufferNotify:
      return @"PenHuProtocolMsgTypeUirUserGetCardInBufferNotify";
    case PenHuProtocolMsgTypeUriPingRoom:
      return @"PenHuProtocolMsgTypeUriPingRoom";
    case PenHuProtocolMsgTypeUriPingRoomRes:
      return @"PenHuProtocolMsgTypeUriPingRoomRes";
    case PenHuProtocolMsgTypeUriHupaiNoitfy:
      return @"PenHuProtocolMsgTypeUriHupaiNoitfy";
    case PenHuProtocolMsgTypeUriGameoverNoitfy:
      return @"PenHuProtocolMsgTypeUriGameoverNoitfy";
    case PenHuProtocolMsgTypeUriBroadcastWhoisExcutor:
      return @"PenHuProtocolMsgTypeUriBroadcastWhoisExcutor";
    case PenHuProtocolMsgTypeUriSendRoomMsgReq:
      return @"PenHuProtocolMsgTypeUriSendRoomMsgReq";
    case PenHuProtocolMsgTypeUriSendRoomMsgRes:
      return @"PenHuProtocolMsgTypeUriSendRoomMsgRes";
    case PenHuProtocolMsgTypeUriBroadcastRoomMsg:
      return @"PenHuProtocolMsgTypeUriBroadcastRoomMsg";
    default:
      return nil;
  }
}

@interface PenHuProtocolBuilder()
@property (strong) PenHuProtocol* resultPenHuProtocol;
@end

@implementation PenHuProtocolBuilder
@synthesize resultPenHuProtocol;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPenHuProtocol = [[PenHuProtocol alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPenHuProtocol;
}
- (PenHuProtocolBuilder*) clear {
  self.resultPenHuProtocol = [[PenHuProtocol alloc] init];
  return self;
}
- (PenHuProtocolBuilder*) clone {
  return [PenHuProtocol builderWithPrototype:resultPenHuProtocol];
}
- (PenHuProtocol*) defaultInstance {
  return [PenHuProtocol defaultInstance];
}
- (PenHuProtocol*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PenHuProtocol*) buildPartial {
  PenHuProtocol* returnMe = resultPenHuProtocol;
  self.resultPenHuProtocol = nil;
  return returnMe;
}
- (PenHuProtocolBuilder*) mergeFrom:(PenHuProtocol*) other {
  if (other == [PenHuProtocol defaultInstance]) {
    return self;
  }
  if (other.hasUri) {
    [self setUri:other.uri];
  }
  if (other.hasLoginGameServerReq) {
    [self mergeLoginGameServerReq:other.loginGameServerReq];
  }
  if (other.hasLoginGameServerRes) {
    [self mergeLoginGameServerRes:other.loginGameServerRes];
  }
  if (other.hasLoginoutGameServerReq) {
    [self mergeLoginoutGameServerReq:other.loginoutGameServerReq];
  }
  if (other.hasLoginoutGameServerRes) {
    [self mergeLoginoutGameServerRes:other.loginoutGameServerRes];
  }
  if (other.hasExchangekeyReq) {
    [self mergeExchangekeyReq:other.exchangekeyReq];
  }
  if (other.hasExchangekeyRes) {
    [self mergeExchangekeyRes:other.exchangekeyRes];
  }
  if (other.hasCreateRoomReq) {
    [self mergeCreateRoomReq:other.createRoomReq];
  }
  if (other.hasCreateRoomRes) {
    [self mergeCreateRoomRes:other.createRoomRes];
  }
  if (other.hasJoinRoomReq) {
    [self mergeJoinRoomReq:other.joinRoomReq];
  }
  if (other.hasJoinRoomRes) {
    [self mergeJoinRoomRes:other.joinRoomRes];
  }
  if (other.hasUserLeaveRoomNotify) {
    [self mergeUserLeaveRoomNotify:other.userLeaveRoomNotify];
  }
  if (other.hasUserJoinRoomNotify) {
    [self mergeUserJoinRoomNotify:other.userJoinRoomNotify];
  }
  if (other.hasUserPreparedOk) {
    [self mergeUserPreparedOk:other.userPreparedOk];
  }
  if (other.hasUserPreparedOkRes) {
    [self mergeUserPreparedOkRes:other.userPreparedOkRes];
  }
  if (other.hasUserOperateRoomReq) {
    [self mergeUserOperateRoomReq:other.userOperateRoomReq];
  }
  if (other.hasUserOperateRoomRes) {
    [self mergeUserOperateRoomRes:other.userOperateRoomRes];
  }
  if (other.hasBroadcastUserOperatorRoom) {
    [self mergeBroadcastUserOperatorRoom:other.broadcastUserOperatorRoom];
  }
  if (other.hasNewRoundStart) {
    [self mergeNewRoundStart:other.newRoundStart];
  }
  if (other.hasNewRoundStartAck) {
    [self mergeNewRoundStartAck:other.newRoundStartAck];
  }
  if (other.hasUserOutCard) {
    [self mergeUserOutCard:other.userOutCard];
  }
  if (other.hasUserOutCardRes) {
    [self mergeUserOutCardRes:other.userOutCardRes];
  }
  if (other.hasUserOutCardNotify) {
    [self mergeUserOutCardNotify:other.userOutCardNotify];
  }
  if (other.hasUserOperateCard) {
    [self mergeUserOperateCard:other.userOperateCard];
  }
  if (other.hasUserOperateCardRes) {
    [self mergeUserOperateCardRes:other.userOperateCardRes];
  }
  if (other.hasUserOperateCardNotify) {
    [self mergeUserOperateCardNotify:other.userOperateCardNotify];
  }
  if (other.hasUserCanOperateCardNotify) {
    [self mergeUserCanOperateCardNotify:other.userCanOperateCardNotify];
  }
  if (other.hasUserGetCardInBuffer) {
    [self mergeUserGetCardInBuffer:other.userGetCardInBuffer];
  }
  if (other.hasUserGetCardInBufferack) {
    [self mergeUserGetCardInBufferack:other.userGetCardInBufferack];
  }
  if (other.hasUserGetCardBufferNotify) {
    [self mergeUserGetCardBufferNotify:other.userGetCardBufferNotify];
  }
  if (other.hasUserPing) {
    [self mergeUserPing:other.userPing];
  }
  if (other.hasUserPingRes) {
    [self mergeUserPingRes:other.userPingRes];
  }
  if (other.hasHupaiNotify) {
    [self mergeHupaiNotify:other.hupaiNotify];
  }
  if (other.hasRoomGameOver) {
    [self mergeRoomGameOver:other.roomGameOver];
  }
  if (other.hasWhoIsCurExcutor) {
    [self mergeWhoIsCurExcutor:other.whoIsCurExcutor];
  }
  if (other.hasSendRoomMsgReq) {
    [self mergeSendRoomMsgReq:other.sendRoomMsgReq];
  }
  if (other.hasSendRoomMsgRes) {
    [self mergeSendRoomMsgRes:other.sendRoomMsgRes];
  }
  if (other.hasBreadcastRoomMsg) {
    [self mergeBreadcastRoomMsg:other.breadcastRoomMsg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PenHuProtocolBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PenHuProtocolBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        PenHuProtocolMsgType value = (PenHuProtocolMsgType)[input readEnum];
        if (PenHuProtocolMsgTypeIsValidValue(value)) {
          [self setUri:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        PBCS_LoginGameServerReqBuilder* subBuilder = [PBCS_LoginGameServerReq builder];
        if (self.hasLoginGameServerReq) {
          [subBuilder mergeFrom:self.loginGameServerReq];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLoginGameServerReq:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        PBCS_LoginGameServerResBuilder* subBuilder = [PBCS_LoginGameServerRes builder];
        if (self.hasLoginGameServerRes) {
          [subBuilder mergeFrom:self.loginGameServerRes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLoginGameServerRes:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        PBCS_LoginOutGameServerReqBuilder* subBuilder = [PBCS_LoginOutGameServerReq builder];
        if (self.hasLoginoutGameServerReq) {
          [subBuilder mergeFrom:self.loginoutGameServerReq];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLoginoutGameServerReq:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        PBCS_LoginOutGameServerResBuilder* subBuilder = [PBCS_LoginOutGameServerRes builder];
        if (self.hasLoginoutGameServerRes) {
          [subBuilder mergeFrom:self.loginoutGameServerRes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLoginoutGameServerRes:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        PBCS_ExchangeKeyReqBuilder* subBuilder = [PBCS_ExchangeKeyReq builder];
        if (self.hasExchangekeyReq) {
          [subBuilder mergeFrom:self.exchangekeyReq];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setExchangekeyReq:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        PBSC_ExchangeKeyResBuilder* subBuilder = [PBSC_ExchangeKeyRes builder];
        if (self.hasExchangekeyRes) {
          [subBuilder mergeFrom:self.exchangekeyRes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setExchangekeyRes:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        PBCS_CreateRoomReqBuilder* subBuilder = [PBCS_CreateRoomReq builder];
        if (self.hasCreateRoomReq) {
          [subBuilder mergeFrom:self.createRoomReq];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreateRoomReq:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        PBSC_CreateRoomResBuilder* subBuilder = [PBSC_CreateRoomRes builder];
        if (self.hasCreateRoomRes) {
          [subBuilder mergeFrom:self.createRoomRes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCreateRoomRes:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        PBCS_JoinRoomReqBuilder* subBuilder = [PBCS_JoinRoomReq builder];
        if (self.hasJoinRoomReq) {
          [subBuilder mergeFrom:self.joinRoomReq];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setJoinRoomReq:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        PBSC_JoinRoomResBuilder* subBuilder = [PBSC_JoinRoomRes builder];
        if (self.hasJoinRoomRes) {
          [subBuilder mergeFrom:self.joinRoomRes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setJoinRoomRes:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        PBSC_UserLeaveRoomNotifyBuilder* subBuilder = [PBSC_UserLeaveRoomNotify builder];
        if (self.hasUserLeaveRoomNotify) {
          [subBuilder mergeFrom:self.userLeaveRoomNotify];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserLeaveRoomNotify:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        PBSC_UserJoinRoomNotifyBuilder* subBuilder = [PBSC_UserJoinRoomNotify builder];
        if (self.hasUserJoinRoomNotify) {
          [subBuilder mergeFrom:self.userJoinRoomNotify];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserJoinRoomNotify:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        PBCS_userRoomGamePreparedOkBuilder* subBuilder = [PBCS_userRoomGamePreparedOk builder];
        if (self.hasUserPreparedOk) {
          [subBuilder mergeFrom:self.userPreparedOk];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserPreparedOk:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        PBSC_userRoomGamePreparedOkResBuilder* subBuilder = [PBSC_userRoomGamePreparedOkRes builder];
        if (self.hasUserPreparedOkRes) {
          [subBuilder mergeFrom:self.userPreparedOkRes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserPreparedOkRes:[subBuilder buildPartial]];
        break;
      }
      case 130: {
        PBCS_userOperateRoomReqBuilder* subBuilder = [PBCS_userOperateRoomReq builder];
        if (self.hasUserOperateRoomReq) {
          [subBuilder mergeFrom:self.userOperateRoomReq];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserOperateRoomReq:[subBuilder buildPartial]];
        break;
      }
      case 138: {
        PBSC_userOperateRoomResBuilder* subBuilder = [PBSC_userOperateRoomRes builder];
        if (self.hasUserOperateRoomRes) {
          [subBuilder mergeFrom:self.userOperateRoomRes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserOperateRoomRes:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        PBSC_BroadCastUserOperateRoomBuilder* subBuilder = [PBSC_BroadCastUserOperateRoom builder];
        if (self.hasBroadcastUserOperatorRoom) {
          [subBuilder mergeFrom:self.broadcastUserOperatorRoom];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBroadcastUserOperatorRoom:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        PBSC_NewRoundStartBuilder* subBuilder = [PBSC_NewRoundStart builder];
        if (self.hasNewRoundStart) {
          [subBuilder mergeFrom:self.newRoundStart];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNewRoundStart:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        PBCS_NewRoundStartUserAckBuilder* subBuilder = [PBCS_NewRoundStartUserAck builder];
        if (self.hasNewRoundStartAck) {
          [subBuilder mergeFrom:self.newRoundStartAck];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setNewRoundStartAck:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        PBCS_UserOutCardBuilder* subBuilder = [PBCS_UserOutCard builder];
        if (self.hasUserOutCard) {
          [subBuilder mergeFrom:self.userOutCard];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserOutCard:[subBuilder buildPartial]];
        break;
      }
      case 178: {
        PBSC_UserOutCardResBuilder* subBuilder = [PBSC_UserOutCardRes builder];
        if (self.hasUserOutCardRes) {
          [subBuilder mergeFrom:self.userOutCardRes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserOutCardRes:[subBuilder buildPartial]];
        break;
      }
      case 186: {
        PBSC_UserOutCardNotifyBuilder* subBuilder = [PBSC_UserOutCardNotify builder];
        if (self.hasUserOutCardNotify) {
          [subBuilder mergeFrom:self.userOutCardNotify];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserOutCardNotify:[subBuilder buildPartial]];
        break;
      }
      case 194: {
        PBCS_UserOperateCardBuilder* subBuilder = [PBCS_UserOperateCard builder];
        if (self.hasUserOperateCard) {
          [subBuilder mergeFrom:self.userOperateCard];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserOperateCard:[subBuilder buildPartial]];
        break;
      }
      case 202: {
        PBSC_UserOperateCardResBuilder* subBuilder = [PBSC_UserOperateCardRes builder];
        if (self.hasUserOperateCardRes) {
          [subBuilder mergeFrom:self.userOperateCardRes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserOperateCardRes:[subBuilder buildPartial]];
        break;
      }
      case 210: {
        PBSC_UserOperateCardNotifyBuilder* subBuilder = [PBSC_UserOperateCardNotify builder];
        if (self.hasUserOperateCardNotify) {
          [subBuilder mergeFrom:self.userOperateCardNotify];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserOperateCardNotify:[subBuilder buildPartial]];
        break;
      }
      case 218: {
        PBSC_UserCanOperateCardsNotifyBuilder* subBuilder = [PBSC_UserCanOperateCardsNotify builder];
        if (self.hasUserCanOperateCardNotify) {
          [subBuilder mergeFrom:self.userCanOperateCardNotify];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserCanOperateCardNotify:[subBuilder buildPartial]];
        break;
      }
      case 226: {
        PBSC_UserGetCardInBufferBuilder* subBuilder = [PBSC_UserGetCardInBuffer builder];
        if (self.hasUserGetCardInBuffer) {
          [subBuilder mergeFrom:self.userGetCardInBuffer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserGetCardInBuffer:[subBuilder buildPartial]];
        break;
      }
      case 234: {
        PBCS_UserGetCardInBufferAckBuilder* subBuilder = [PBCS_UserGetCardInBufferAck builder];
        if (self.hasUserGetCardInBufferack) {
          [subBuilder mergeFrom:self.userGetCardInBufferack];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserGetCardInBufferack:[subBuilder buildPartial]];
        break;
      }
      case 242: {
        PBSC_UserGetCardInBuffer_NotifyBuilder* subBuilder = [PBSC_UserGetCardInBuffer_Notify builder];
        if (self.hasUserGetCardBufferNotify) {
          [subBuilder mergeFrom:self.userGetCardBufferNotify];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserGetCardBufferNotify:[subBuilder buildPartial]];
        break;
      }
      case 250: {
        PBCS_PingRoomBuilder* subBuilder = [PBCS_PingRoom builder];
        if (self.hasUserPing) {
          [subBuilder mergeFrom:self.userPing];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserPing:[subBuilder buildPartial]];
        break;
      }
      case 258: {
        PBSC_PingRoomResBuilder* subBuilder = [PBSC_PingRoomRes builder];
        if (self.hasUserPingRes) {
          [subBuilder mergeFrom:self.userPingRes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserPingRes:[subBuilder buildPartial]];
        break;
      }
      case 266: {
        PBSC_HuPaiBuilder* subBuilder = [PBSC_HuPai builder];
        if (self.hasHupaiNotify) {
          [subBuilder mergeFrom:self.hupaiNotify];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHupaiNotify:[subBuilder buildPartial]];
        break;
      }
      case 274: {
        PBSC_RoomGameOverBuilder* subBuilder = [PBSC_RoomGameOver builder];
        if (self.hasRoomGameOver) {
          [subBuilder mergeFrom:self.roomGameOver];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoomGameOver:[subBuilder buildPartial]];
        break;
      }
      case 282: {
        PBSC_BroadCastWhoIsExcutorUserBuilder* subBuilder = [PBSC_BroadCastWhoIsExcutorUser builder];
        if (self.hasWhoIsCurExcutor) {
          [subBuilder mergeFrom:self.whoIsCurExcutor];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWhoIsCurExcutor:[subBuilder buildPartial]];
        break;
      }
      case 290: {
        PBCS_SendRoomMsgReqBuilder* subBuilder = [PBCS_SendRoomMsgReq builder];
        if (self.hasSendRoomMsgReq) {
          [subBuilder mergeFrom:self.sendRoomMsgReq];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSendRoomMsgReq:[subBuilder buildPartial]];
        break;
      }
      case 298: {
        PBSC_SendRoomMsgResBuilder* subBuilder = [PBSC_SendRoomMsgRes builder];
        if (self.hasSendRoomMsgRes) {
          [subBuilder mergeFrom:self.sendRoomMsgRes];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSendRoomMsgRes:[subBuilder buildPartial]];
        break;
      }
      case 306: {
        PBSC_BroadCastRoomMsgBuilder* subBuilder = [PBSC_BroadCastRoomMsg builder];
        if (self.hasBreadcastRoomMsg) {
          [subBuilder mergeFrom:self.breadcastRoomMsg];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBreadcastRoomMsg:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUri {
  return resultPenHuProtocol.hasUri;
}
- (PenHuProtocolMsgType) uri {
  return resultPenHuProtocol.uri;
}
- (PenHuProtocolBuilder*) setUri:(PenHuProtocolMsgType) value {
  resultPenHuProtocol.hasUri = YES;
  resultPenHuProtocol.uri = value;
  return self;
}
- (PenHuProtocolBuilder*) clearUri {
  resultPenHuProtocol.hasUri = NO;
  resultPenHuProtocol.uri = PenHuProtocolMsgTypeInvalidProtocol;
  return self;
}
- (BOOL) hasLoginGameServerReq {
  return resultPenHuProtocol.hasLoginGameServerReq;
}
- (PBCS_LoginGameServerReq*) loginGameServerReq {
  return resultPenHuProtocol.loginGameServerReq;
}
- (PenHuProtocolBuilder*) setLoginGameServerReq:(PBCS_LoginGameServerReq*) value {
  resultPenHuProtocol.hasLoginGameServerReq = YES;
  resultPenHuProtocol.loginGameServerReq = value;
  return self;
}
- (PenHuProtocolBuilder*) setLoginGameServerReqBuilder:(PBCS_LoginGameServerReqBuilder*) builderForValue {
  return [self setLoginGameServerReq:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeLoginGameServerReq:(PBCS_LoginGameServerReq*) value {
  if (resultPenHuProtocol.hasLoginGameServerReq &&
      resultPenHuProtocol.loginGameServerReq != [PBCS_LoginGameServerReq defaultInstance]) {
    resultPenHuProtocol.loginGameServerReq =
      [[[PBCS_LoginGameServerReq builderWithPrototype:resultPenHuProtocol.loginGameServerReq] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.loginGameServerReq = value;
  }
  resultPenHuProtocol.hasLoginGameServerReq = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearLoginGameServerReq {
  resultPenHuProtocol.hasLoginGameServerReq = NO;
  resultPenHuProtocol.loginGameServerReq = [PBCS_LoginGameServerReq defaultInstance];
  return self;
}
- (BOOL) hasLoginGameServerRes {
  return resultPenHuProtocol.hasLoginGameServerRes;
}
- (PBCS_LoginGameServerRes*) loginGameServerRes {
  return resultPenHuProtocol.loginGameServerRes;
}
- (PenHuProtocolBuilder*) setLoginGameServerRes:(PBCS_LoginGameServerRes*) value {
  resultPenHuProtocol.hasLoginGameServerRes = YES;
  resultPenHuProtocol.loginGameServerRes = value;
  return self;
}
- (PenHuProtocolBuilder*) setLoginGameServerResBuilder:(PBCS_LoginGameServerResBuilder*) builderForValue {
  return [self setLoginGameServerRes:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeLoginGameServerRes:(PBCS_LoginGameServerRes*) value {
  if (resultPenHuProtocol.hasLoginGameServerRes &&
      resultPenHuProtocol.loginGameServerRes != [PBCS_LoginGameServerRes defaultInstance]) {
    resultPenHuProtocol.loginGameServerRes =
      [[[PBCS_LoginGameServerRes builderWithPrototype:resultPenHuProtocol.loginGameServerRes] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.loginGameServerRes = value;
  }
  resultPenHuProtocol.hasLoginGameServerRes = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearLoginGameServerRes {
  resultPenHuProtocol.hasLoginGameServerRes = NO;
  resultPenHuProtocol.loginGameServerRes = [PBCS_LoginGameServerRes defaultInstance];
  return self;
}
- (BOOL) hasLoginoutGameServerReq {
  return resultPenHuProtocol.hasLoginoutGameServerReq;
}
- (PBCS_LoginOutGameServerReq*) loginoutGameServerReq {
  return resultPenHuProtocol.loginoutGameServerReq;
}
- (PenHuProtocolBuilder*) setLoginoutGameServerReq:(PBCS_LoginOutGameServerReq*) value {
  resultPenHuProtocol.hasLoginoutGameServerReq = YES;
  resultPenHuProtocol.loginoutGameServerReq = value;
  return self;
}
- (PenHuProtocolBuilder*) setLoginoutGameServerReqBuilder:(PBCS_LoginOutGameServerReqBuilder*) builderForValue {
  return [self setLoginoutGameServerReq:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeLoginoutGameServerReq:(PBCS_LoginOutGameServerReq*) value {
  if (resultPenHuProtocol.hasLoginoutGameServerReq &&
      resultPenHuProtocol.loginoutGameServerReq != [PBCS_LoginOutGameServerReq defaultInstance]) {
    resultPenHuProtocol.loginoutGameServerReq =
      [[[PBCS_LoginOutGameServerReq builderWithPrototype:resultPenHuProtocol.loginoutGameServerReq] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.loginoutGameServerReq = value;
  }
  resultPenHuProtocol.hasLoginoutGameServerReq = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearLoginoutGameServerReq {
  resultPenHuProtocol.hasLoginoutGameServerReq = NO;
  resultPenHuProtocol.loginoutGameServerReq = [PBCS_LoginOutGameServerReq defaultInstance];
  return self;
}
- (BOOL) hasLoginoutGameServerRes {
  return resultPenHuProtocol.hasLoginoutGameServerRes;
}
- (PBCS_LoginOutGameServerRes*) loginoutGameServerRes {
  return resultPenHuProtocol.loginoutGameServerRes;
}
- (PenHuProtocolBuilder*) setLoginoutGameServerRes:(PBCS_LoginOutGameServerRes*) value {
  resultPenHuProtocol.hasLoginoutGameServerRes = YES;
  resultPenHuProtocol.loginoutGameServerRes = value;
  return self;
}
- (PenHuProtocolBuilder*) setLoginoutGameServerResBuilder:(PBCS_LoginOutGameServerResBuilder*) builderForValue {
  return [self setLoginoutGameServerRes:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeLoginoutGameServerRes:(PBCS_LoginOutGameServerRes*) value {
  if (resultPenHuProtocol.hasLoginoutGameServerRes &&
      resultPenHuProtocol.loginoutGameServerRes != [PBCS_LoginOutGameServerRes defaultInstance]) {
    resultPenHuProtocol.loginoutGameServerRes =
      [[[PBCS_LoginOutGameServerRes builderWithPrototype:resultPenHuProtocol.loginoutGameServerRes] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.loginoutGameServerRes = value;
  }
  resultPenHuProtocol.hasLoginoutGameServerRes = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearLoginoutGameServerRes {
  resultPenHuProtocol.hasLoginoutGameServerRes = NO;
  resultPenHuProtocol.loginoutGameServerRes = [PBCS_LoginOutGameServerRes defaultInstance];
  return self;
}
- (BOOL) hasExchangekeyReq {
  return resultPenHuProtocol.hasExchangekeyReq;
}
- (PBCS_ExchangeKeyReq*) exchangekeyReq {
  return resultPenHuProtocol.exchangekeyReq;
}
- (PenHuProtocolBuilder*) setExchangekeyReq:(PBCS_ExchangeKeyReq*) value {
  resultPenHuProtocol.hasExchangekeyReq = YES;
  resultPenHuProtocol.exchangekeyReq = value;
  return self;
}
- (PenHuProtocolBuilder*) setExchangekeyReqBuilder:(PBCS_ExchangeKeyReqBuilder*) builderForValue {
  return [self setExchangekeyReq:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeExchangekeyReq:(PBCS_ExchangeKeyReq*) value {
  if (resultPenHuProtocol.hasExchangekeyReq &&
      resultPenHuProtocol.exchangekeyReq != [PBCS_ExchangeKeyReq defaultInstance]) {
    resultPenHuProtocol.exchangekeyReq =
      [[[PBCS_ExchangeKeyReq builderWithPrototype:resultPenHuProtocol.exchangekeyReq] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.exchangekeyReq = value;
  }
  resultPenHuProtocol.hasExchangekeyReq = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearExchangekeyReq {
  resultPenHuProtocol.hasExchangekeyReq = NO;
  resultPenHuProtocol.exchangekeyReq = [PBCS_ExchangeKeyReq defaultInstance];
  return self;
}
- (BOOL) hasExchangekeyRes {
  return resultPenHuProtocol.hasExchangekeyRes;
}
- (PBSC_ExchangeKeyRes*) exchangekeyRes {
  return resultPenHuProtocol.exchangekeyRes;
}
- (PenHuProtocolBuilder*) setExchangekeyRes:(PBSC_ExchangeKeyRes*) value {
  resultPenHuProtocol.hasExchangekeyRes = YES;
  resultPenHuProtocol.exchangekeyRes = value;
  return self;
}
- (PenHuProtocolBuilder*) setExchangekeyResBuilder:(PBSC_ExchangeKeyResBuilder*) builderForValue {
  return [self setExchangekeyRes:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeExchangekeyRes:(PBSC_ExchangeKeyRes*) value {
  if (resultPenHuProtocol.hasExchangekeyRes &&
      resultPenHuProtocol.exchangekeyRes != [PBSC_ExchangeKeyRes defaultInstance]) {
    resultPenHuProtocol.exchangekeyRes =
      [[[PBSC_ExchangeKeyRes builderWithPrototype:resultPenHuProtocol.exchangekeyRes] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.exchangekeyRes = value;
  }
  resultPenHuProtocol.hasExchangekeyRes = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearExchangekeyRes {
  resultPenHuProtocol.hasExchangekeyRes = NO;
  resultPenHuProtocol.exchangekeyRes = [PBSC_ExchangeKeyRes defaultInstance];
  return self;
}
- (BOOL) hasCreateRoomReq {
  return resultPenHuProtocol.hasCreateRoomReq;
}
- (PBCS_CreateRoomReq*) createRoomReq {
  return resultPenHuProtocol.createRoomReq;
}
- (PenHuProtocolBuilder*) setCreateRoomReq:(PBCS_CreateRoomReq*) value {
  resultPenHuProtocol.hasCreateRoomReq = YES;
  resultPenHuProtocol.createRoomReq = value;
  return self;
}
- (PenHuProtocolBuilder*) setCreateRoomReqBuilder:(PBCS_CreateRoomReqBuilder*) builderForValue {
  return [self setCreateRoomReq:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeCreateRoomReq:(PBCS_CreateRoomReq*) value {
  if (resultPenHuProtocol.hasCreateRoomReq &&
      resultPenHuProtocol.createRoomReq != [PBCS_CreateRoomReq defaultInstance]) {
    resultPenHuProtocol.createRoomReq =
      [[[PBCS_CreateRoomReq builderWithPrototype:resultPenHuProtocol.createRoomReq] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.createRoomReq = value;
  }
  resultPenHuProtocol.hasCreateRoomReq = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearCreateRoomReq {
  resultPenHuProtocol.hasCreateRoomReq = NO;
  resultPenHuProtocol.createRoomReq = [PBCS_CreateRoomReq defaultInstance];
  return self;
}
- (BOOL) hasCreateRoomRes {
  return resultPenHuProtocol.hasCreateRoomRes;
}
- (PBSC_CreateRoomRes*) createRoomRes {
  return resultPenHuProtocol.createRoomRes;
}
- (PenHuProtocolBuilder*) setCreateRoomRes:(PBSC_CreateRoomRes*) value {
  resultPenHuProtocol.hasCreateRoomRes = YES;
  resultPenHuProtocol.createRoomRes = value;
  return self;
}
- (PenHuProtocolBuilder*) setCreateRoomResBuilder:(PBSC_CreateRoomResBuilder*) builderForValue {
  return [self setCreateRoomRes:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeCreateRoomRes:(PBSC_CreateRoomRes*) value {
  if (resultPenHuProtocol.hasCreateRoomRes &&
      resultPenHuProtocol.createRoomRes != [PBSC_CreateRoomRes defaultInstance]) {
    resultPenHuProtocol.createRoomRes =
      [[[PBSC_CreateRoomRes builderWithPrototype:resultPenHuProtocol.createRoomRes] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.createRoomRes = value;
  }
  resultPenHuProtocol.hasCreateRoomRes = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearCreateRoomRes {
  resultPenHuProtocol.hasCreateRoomRes = NO;
  resultPenHuProtocol.createRoomRes = [PBSC_CreateRoomRes defaultInstance];
  return self;
}
- (BOOL) hasJoinRoomReq {
  return resultPenHuProtocol.hasJoinRoomReq;
}
- (PBCS_JoinRoomReq*) joinRoomReq {
  return resultPenHuProtocol.joinRoomReq;
}
- (PenHuProtocolBuilder*) setJoinRoomReq:(PBCS_JoinRoomReq*) value {
  resultPenHuProtocol.hasJoinRoomReq = YES;
  resultPenHuProtocol.joinRoomReq = value;
  return self;
}
- (PenHuProtocolBuilder*) setJoinRoomReqBuilder:(PBCS_JoinRoomReqBuilder*) builderForValue {
  return [self setJoinRoomReq:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeJoinRoomReq:(PBCS_JoinRoomReq*) value {
  if (resultPenHuProtocol.hasJoinRoomReq &&
      resultPenHuProtocol.joinRoomReq != [PBCS_JoinRoomReq defaultInstance]) {
    resultPenHuProtocol.joinRoomReq =
      [[[PBCS_JoinRoomReq builderWithPrototype:resultPenHuProtocol.joinRoomReq] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.joinRoomReq = value;
  }
  resultPenHuProtocol.hasJoinRoomReq = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearJoinRoomReq {
  resultPenHuProtocol.hasJoinRoomReq = NO;
  resultPenHuProtocol.joinRoomReq = [PBCS_JoinRoomReq defaultInstance];
  return self;
}
- (BOOL) hasJoinRoomRes {
  return resultPenHuProtocol.hasJoinRoomRes;
}
- (PBSC_JoinRoomRes*) joinRoomRes {
  return resultPenHuProtocol.joinRoomRes;
}
- (PenHuProtocolBuilder*) setJoinRoomRes:(PBSC_JoinRoomRes*) value {
  resultPenHuProtocol.hasJoinRoomRes = YES;
  resultPenHuProtocol.joinRoomRes = value;
  return self;
}
- (PenHuProtocolBuilder*) setJoinRoomResBuilder:(PBSC_JoinRoomResBuilder*) builderForValue {
  return [self setJoinRoomRes:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeJoinRoomRes:(PBSC_JoinRoomRes*) value {
  if (resultPenHuProtocol.hasJoinRoomRes &&
      resultPenHuProtocol.joinRoomRes != [PBSC_JoinRoomRes defaultInstance]) {
    resultPenHuProtocol.joinRoomRes =
      [[[PBSC_JoinRoomRes builderWithPrototype:resultPenHuProtocol.joinRoomRes] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.joinRoomRes = value;
  }
  resultPenHuProtocol.hasJoinRoomRes = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearJoinRoomRes {
  resultPenHuProtocol.hasJoinRoomRes = NO;
  resultPenHuProtocol.joinRoomRes = [PBSC_JoinRoomRes defaultInstance];
  return self;
}
- (BOOL) hasUserLeaveRoomNotify {
  return resultPenHuProtocol.hasUserLeaveRoomNotify;
}
- (PBSC_UserLeaveRoomNotify*) userLeaveRoomNotify {
  return resultPenHuProtocol.userLeaveRoomNotify;
}
- (PenHuProtocolBuilder*) setUserLeaveRoomNotify:(PBSC_UserLeaveRoomNotify*) value {
  resultPenHuProtocol.hasUserLeaveRoomNotify = YES;
  resultPenHuProtocol.userLeaveRoomNotify = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserLeaveRoomNotifyBuilder:(PBSC_UserLeaveRoomNotifyBuilder*) builderForValue {
  return [self setUserLeaveRoomNotify:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserLeaveRoomNotify:(PBSC_UserLeaveRoomNotify*) value {
  if (resultPenHuProtocol.hasUserLeaveRoomNotify &&
      resultPenHuProtocol.userLeaveRoomNotify != [PBSC_UserLeaveRoomNotify defaultInstance]) {
    resultPenHuProtocol.userLeaveRoomNotify =
      [[[PBSC_UserLeaveRoomNotify builderWithPrototype:resultPenHuProtocol.userLeaveRoomNotify] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userLeaveRoomNotify = value;
  }
  resultPenHuProtocol.hasUserLeaveRoomNotify = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserLeaveRoomNotify {
  resultPenHuProtocol.hasUserLeaveRoomNotify = NO;
  resultPenHuProtocol.userLeaveRoomNotify = [PBSC_UserLeaveRoomNotify defaultInstance];
  return self;
}
- (BOOL) hasUserJoinRoomNotify {
  return resultPenHuProtocol.hasUserJoinRoomNotify;
}
- (PBSC_UserJoinRoomNotify*) userJoinRoomNotify {
  return resultPenHuProtocol.userJoinRoomNotify;
}
- (PenHuProtocolBuilder*) setUserJoinRoomNotify:(PBSC_UserJoinRoomNotify*) value {
  resultPenHuProtocol.hasUserJoinRoomNotify = YES;
  resultPenHuProtocol.userJoinRoomNotify = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserJoinRoomNotifyBuilder:(PBSC_UserJoinRoomNotifyBuilder*) builderForValue {
  return [self setUserJoinRoomNotify:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserJoinRoomNotify:(PBSC_UserJoinRoomNotify*) value {
  if (resultPenHuProtocol.hasUserJoinRoomNotify &&
      resultPenHuProtocol.userJoinRoomNotify != [PBSC_UserJoinRoomNotify defaultInstance]) {
    resultPenHuProtocol.userJoinRoomNotify =
      [[[PBSC_UserJoinRoomNotify builderWithPrototype:resultPenHuProtocol.userJoinRoomNotify] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userJoinRoomNotify = value;
  }
  resultPenHuProtocol.hasUserJoinRoomNotify = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserJoinRoomNotify {
  resultPenHuProtocol.hasUserJoinRoomNotify = NO;
  resultPenHuProtocol.userJoinRoomNotify = [PBSC_UserJoinRoomNotify defaultInstance];
  return self;
}
- (BOOL) hasUserPreparedOk {
  return resultPenHuProtocol.hasUserPreparedOk;
}
- (PBCS_userRoomGamePreparedOk*) userPreparedOk {
  return resultPenHuProtocol.userPreparedOk;
}
- (PenHuProtocolBuilder*) setUserPreparedOk:(PBCS_userRoomGamePreparedOk*) value {
  resultPenHuProtocol.hasUserPreparedOk = YES;
  resultPenHuProtocol.userPreparedOk = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserPreparedOkBuilder:(PBCS_userRoomGamePreparedOkBuilder*) builderForValue {
  return [self setUserPreparedOk:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserPreparedOk:(PBCS_userRoomGamePreparedOk*) value {
  if (resultPenHuProtocol.hasUserPreparedOk &&
      resultPenHuProtocol.userPreparedOk != [PBCS_userRoomGamePreparedOk defaultInstance]) {
    resultPenHuProtocol.userPreparedOk =
      [[[PBCS_userRoomGamePreparedOk builderWithPrototype:resultPenHuProtocol.userPreparedOk] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userPreparedOk = value;
  }
  resultPenHuProtocol.hasUserPreparedOk = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserPreparedOk {
  resultPenHuProtocol.hasUserPreparedOk = NO;
  resultPenHuProtocol.userPreparedOk = [PBCS_userRoomGamePreparedOk defaultInstance];
  return self;
}
- (BOOL) hasUserPreparedOkRes {
  return resultPenHuProtocol.hasUserPreparedOkRes;
}
- (PBSC_userRoomGamePreparedOkRes*) userPreparedOkRes {
  return resultPenHuProtocol.userPreparedOkRes;
}
- (PenHuProtocolBuilder*) setUserPreparedOkRes:(PBSC_userRoomGamePreparedOkRes*) value {
  resultPenHuProtocol.hasUserPreparedOkRes = YES;
  resultPenHuProtocol.userPreparedOkRes = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserPreparedOkResBuilder:(PBSC_userRoomGamePreparedOkResBuilder*) builderForValue {
  return [self setUserPreparedOkRes:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserPreparedOkRes:(PBSC_userRoomGamePreparedOkRes*) value {
  if (resultPenHuProtocol.hasUserPreparedOkRes &&
      resultPenHuProtocol.userPreparedOkRes != [PBSC_userRoomGamePreparedOkRes defaultInstance]) {
    resultPenHuProtocol.userPreparedOkRes =
      [[[PBSC_userRoomGamePreparedOkRes builderWithPrototype:resultPenHuProtocol.userPreparedOkRes] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userPreparedOkRes = value;
  }
  resultPenHuProtocol.hasUserPreparedOkRes = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserPreparedOkRes {
  resultPenHuProtocol.hasUserPreparedOkRes = NO;
  resultPenHuProtocol.userPreparedOkRes = [PBSC_userRoomGamePreparedOkRes defaultInstance];
  return self;
}
- (BOOL) hasUserOperateRoomReq {
  return resultPenHuProtocol.hasUserOperateRoomReq;
}
- (PBCS_userOperateRoomReq*) userOperateRoomReq {
  return resultPenHuProtocol.userOperateRoomReq;
}
- (PenHuProtocolBuilder*) setUserOperateRoomReq:(PBCS_userOperateRoomReq*) value {
  resultPenHuProtocol.hasUserOperateRoomReq = YES;
  resultPenHuProtocol.userOperateRoomReq = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserOperateRoomReqBuilder:(PBCS_userOperateRoomReqBuilder*) builderForValue {
  return [self setUserOperateRoomReq:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserOperateRoomReq:(PBCS_userOperateRoomReq*) value {
  if (resultPenHuProtocol.hasUserOperateRoomReq &&
      resultPenHuProtocol.userOperateRoomReq != [PBCS_userOperateRoomReq defaultInstance]) {
    resultPenHuProtocol.userOperateRoomReq =
      [[[PBCS_userOperateRoomReq builderWithPrototype:resultPenHuProtocol.userOperateRoomReq] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userOperateRoomReq = value;
  }
  resultPenHuProtocol.hasUserOperateRoomReq = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserOperateRoomReq {
  resultPenHuProtocol.hasUserOperateRoomReq = NO;
  resultPenHuProtocol.userOperateRoomReq = [PBCS_userOperateRoomReq defaultInstance];
  return self;
}
- (BOOL) hasUserOperateRoomRes {
  return resultPenHuProtocol.hasUserOperateRoomRes;
}
- (PBSC_userOperateRoomRes*) userOperateRoomRes {
  return resultPenHuProtocol.userOperateRoomRes;
}
- (PenHuProtocolBuilder*) setUserOperateRoomRes:(PBSC_userOperateRoomRes*) value {
  resultPenHuProtocol.hasUserOperateRoomRes = YES;
  resultPenHuProtocol.userOperateRoomRes = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserOperateRoomResBuilder:(PBSC_userOperateRoomResBuilder*) builderForValue {
  return [self setUserOperateRoomRes:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserOperateRoomRes:(PBSC_userOperateRoomRes*) value {
  if (resultPenHuProtocol.hasUserOperateRoomRes &&
      resultPenHuProtocol.userOperateRoomRes != [PBSC_userOperateRoomRes defaultInstance]) {
    resultPenHuProtocol.userOperateRoomRes =
      [[[PBSC_userOperateRoomRes builderWithPrototype:resultPenHuProtocol.userOperateRoomRes] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userOperateRoomRes = value;
  }
  resultPenHuProtocol.hasUserOperateRoomRes = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserOperateRoomRes {
  resultPenHuProtocol.hasUserOperateRoomRes = NO;
  resultPenHuProtocol.userOperateRoomRes = [PBSC_userOperateRoomRes defaultInstance];
  return self;
}
- (BOOL) hasBroadcastUserOperatorRoom {
  return resultPenHuProtocol.hasBroadcastUserOperatorRoom;
}
- (PBSC_BroadCastUserOperateRoom*) broadcastUserOperatorRoom {
  return resultPenHuProtocol.broadcastUserOperatorRoom;
}
- (PenHuProtocolBuilder*) setBroadcastUserOperatorRoom:(PBSC_BroadCastUserOperateRoom*) value {
  resultPenHuProtocol.hasBroadcastUserOperatorRoom = YES;
  resultPenHuProtocol.broadcastUserOperatorRoom = value;
  return self;
}
- (PenHuProtocolBuilder*) setBroadcastUserOperatorRoomBuilder:(PBSC_BroadCastUserOperateRoomBuilder*) builderForValue {
  return [self setBroadcastUserOperatorRoom:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeBroadcastUserOperatorRoom:(PBSC_BroadCastUserOperateRoom*) value {
  if (resultPenHuProtocol.hasBroadcastUserOperatorRoom &&
      resultPenHuProtocol.broadcastUserOperatorRoom != [PBSC_BroadCastUserOperateRoom defaultInstance]) {
    resultPenHuProtocol.broadcastUserOperatorRoom =
      [[[PBSC_BroadCastUserOperateRoom builderWithPrototype:resultPenHuProtocol.broadcastUserOperatorRoom] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.broadcastUserOperatorRoom = value;
  }
  resultPenHuProtocol.hasBroadcastUserOperatorRoom = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearBroadcastUserOperatorRoom {
  resultPenHuProtocol.hasBroadcastUserOperatorRoom = NO;
  resultPenHuProtocol.broadcastUserOperatorRoom = [PBSC_BroadCastUserOperateRoom defaultInstance];
  return self;
}
- (BOOL) hasNewRoundStart {
  return resultPenHuProtocol.hasNewRoundStart;
}
- (PBSC_NewRoundStart*) newRoundStart {
  return resultPenHuProtocol.newRoundStart;
}
- (PenHuProtocolBuilder*) setNewRoundStart:(PBSC_NewRoundStart*) value {
  resultPenHuProtocol.hasNewRoundStart = YES;
  resultPenHuProtocol.newRoundStart = value;
  return self;
}
- (PenHuProtocolBuilder*) setNewRoundStartBuilder:(PBSC_NewRoundStartBuilder*) builderForValue {
  return [self setNewRoundStart:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeNewRoundStart:(PBSC_NewRoundStart*) value {
  if (resultPenHuProtocol.hasNewRoundStart &&
      resultPenHuProtocol.newRoundStart != [PBSC_NewRoundStart defaultInstance]) {
    resultPenHuProtocol.newRoundStart =
      [[[PBSC_NewRoundStart builderWithPrototype:resultPenHuProtocol.newRoundStart] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.newRoundStart = value;
  }
  resultPenHuProtocol.hasNewRoundStart = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearNewRoundStart {
  resultPenHuProtocol.hasNewRoundStart = NO;
  resultPenHuProtocol.newRoundStart = [PBSC_NewRoundStart defaultInstance];
  return self;
}
- (BOOL) hasNewRoundStartAck {
  return resultPenHuProtocol.hasNewRoundStartAck;
}
- (PBCS_NewRoundStartUserAck*) newRoundStartAck {
  return resultPenHuProtocol.newRoundStartAck;
}
- (PenHuProtocolBuilder*) setNewRoundStartAck:(PBCS_NewRoundStartUserAck*) value {
  resultPenHuProtocol.hasNewRoundStartAck = YES;
  resultPenHuProtocol.newRoundStartAck = value;
  return self;
}
- (PenHuProtocolBuilder*) setNewRoundStartAckBuilder:(PBCS_NewRoundStartUserAckBuilder*) builderForValue {
  return [self setNewRoundStartAck:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeNewRoundStartAck:(PBCS_NewRoundStartUserAck*) value {
  if (resultPenHuProtocol.hasNewRoundStartAck &&
      resultPenHuProtocol.newRoundStartAck != [PBCS_NewRoundStartUserAck defaultInstance]) {
    resultPenHuProtocol.newRoundStartAck =
      [[[PBCS_NewRoundStartUserAck builderWithPrototype:resultPenHuProtocol.newRoundStartAck] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.newRoundStartAck = value;
  }
  resultPenHuProtocol.hasNewRoundStartAck = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearNewRoundStartAck {
  resultPenHuProtocol.hasNewRoundStartAck = NO;
  resultPenHuProtocol.newRoundStartAck = [PBCS_NewRoundStartUserAck defaultInstance];
  return self;
}
- (BOOL) hasUserOutCard {
  return resultPenHuProtocol.hasUserOutCard;
}
- (PBCS_UserOutCard*) userOutCard {
  return resultPenHuProtocol.userOutCard;
}
- (PenHuProtocolBuilder*) setUserOutCard:(PBCS_UserOutCard*) value {
  resultPenHuProtocol.hasUserOutCard = YES;
  resultPenHuProtocol.userOutCard = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserOutCardBuilder:(PBCS_UserOutCardBuilder*) builderForValue {
  return [self setUserOutCard:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserOutCard:(PBCS_UserOutCard*) value {
  if (resultPenHuProtocol.hasUserOutCard &&
      resultPenHuProtocol.userOutCard != [PBCS_UserOutCard defaultInstance]) {
    resultPenHuProtocol.userOutCard =
      [[[PBCS_UserOutCard builderWithPrototype:resultPenHuProtocol.userOutCard] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userOutCard = value;
  }
  resultPenHuProtocol.hasUserOutCard = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserOutCard {
  resultPenHuProtocol.hasUserOutCard = NO;
  resultPenHuProtocol.userOutCard = [PBCS_UserOutCard defaultInstance];
  return self;
}
- (BOOL) hasUserOutCardRes {
  return resultPenHuProtocol.hasUserOutCardRes;
}
- (PBSC_UserOutCardRes*) userOutCardRes {
  return resultPenHuProtocol.userOutCardRes;
}
- (PenHuProtocolBuilder*) setUserOutCardRes:(PBSC_UserOutCardRes*) value {
  resultPenHuProtocol.hasUserOutCardRes = YES;
  resultPenHuProtocol.userOutCardRes = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserOutCardResBuilder:(PBSC_UserOutCardResBuilder*) builderForValue {
  return [self setUserOutCardRes:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserOutCardRes:(PBSC_UserOutCardRes*) value {
  if (resultPenHuProtocol.hasUserOutCardRes &&
      resultPenHuProtocol.userOutCardRes != [PBSC_UserOutCardRes defaultInstance]) {
    resultPenHuProtocol.userOutCardRes =
      [[[PBSC_UserOutCardRes builderWithPrototype:resultPenHuProtocol.userOutCardRes] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userOutCardRes = value;
  }
  resultPenHuProtocol.hasUserOutCardRes = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserOutCardRes {
  resultPenHuProtocol.hasUserOutCardRes = NO;
  resultPenHuProtocol.userOutCardRes = [PBSC_UserOutCardRes defaultInstance];
  return self;
}
- (BOOL) hasUserOutCardNotify {
  return resultPenHuProtocol.hasUserOutCardNotify;
}
- (PBSC_UserOutCardNotify*) userOutCardNotify {
  return resultPenHuProtocol.userOutCardNotify;
}
- (PenHuProtocolBuilder*) setUserOutCardNotify:(PBSC_UserOutCardNotify*) value {
  resultPenHuProtocol.hasUserOutCardNotify = YES;
  resultPenHuProtocol.userOutCardNotify = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserOutCardNotifyBuilder:(PBSC_UserOutCardNotifyBuilder*) builderForValue {
  return [self setUserOutCardNotify:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserOutCardNotify:(PBSC_UserOutCardNotify*) value {
  if (resultPenHuProtocol.hasUserOutCardNotify &&
      resultPenHuProtocol.userOutCardNotify != [PBSC_UserOutCardNotify defaultInstance]) {
    resultPenHuProtocol.userOutCardNotify =
      [[[PBSC_UserOutCardNotify builderWithPrototype:resultPenHuProtocol.userOutCardNotify] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userOutCardNotify = value;
  }
  resultPenHuProtocol.hasUserOutCardNotify = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserOutCardNotify {
  resultPenHuProtocol.hasUserOutCardNotify = NO;
  resultPenHuProtocol.userOutCardNotify = [PBSC_UserOutCardNotify defaultInstance];
  return self;
}
- (BOOL) hasUserOperateCard {
  return resultPenHuProtocol.hasUserOperateCard;
}
- (PBCS_UserOperateCard*) userOperateCard {
  return resultPenHuProtocol.userOperateCard;
}
- (PenHuProtocolBuilder*) setUserOperateCard:(PBCS_UserOperateCard*) value {
  resultPenHuProtocol.hasUserOperateCard = YES;
  resultPenHuProtocol.userOperateCard = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserOperateCardBuilder:(PBCS_UserOperateCardBuilder*) builderForValue {
  return [self setUserOperateCard:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserOperateCard:(PBCS_UserOperateCard*) value {
  if (resultPenHuProtocol.hasUserOperateCard &&
      resultPenHuProtocol.userOperateCard != [PBCS_UserOperateCard defaultInstance]) {
    resultPenHuProtocol.userOperateCard =
      [[[PBCS_UserOperateCard builderWithPrototype:resultPenHuProtocol.userOperateCard] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userOperateCard = value;
  }
  resultPenHuProtocol.hasUserOperateCard = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserOperateCard {
  resultPenHuProtocol.hasUserOperateCard = NO;
  resultPenHuProtocol.userOperateCard = [PBCS_UserOperateCard defaultInstance];
  return self;
}
- (BOOL) hasUserOperateCardRes {
  return resultPenHuProtocol.hasUserOperateCardRes;
}
- (PBSC_UserOperateCardRes*) userOperateCardRes {
  return resultPenHuProtocol.userOperateCardRes;
}
- (PenHuProtocolBuilder*) setUserOperateCardRes:(PBSC_UserOperateCardRes*) value {
  resultPenHuProtocol.hasUserOperateCardRes = YES;
  resultPenHuProtocol.userOperateCardRes = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserOperateCardResBuilder:(PBSC_UserOperateCardResBuilder*) builderForValue {
  return [self setUserOperateCardRes:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserOperateCardRes:(PBSC_UserOperateCardRes*) value {
  if (resultPenHuProtocol.hasUserOperateCardRes &&
      resultPenHuProtocol.userOperateCardRes != [PBSC_UserOperateCardRes defaultInstance]) {
    resultPenHuProtocol.userOperateCardRes =
      [[[PBSC_UserOperateCardRes builderWithPrototype:resultPenHuProtocol.userOperateCardRes] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userOperateCardRes = value;
  }
  resultPenHuProtocol.hasUserOperateCardRes = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserOperateCardRes {
  resultPenHuProtocol.hasUserOperateCardRes = NO;
  resultPenHuProtocol.userOperateCardRes = [PBSC_UserOperateCardRes defaultInstance];
  return self;
}
- (BOOL) hasUserOperateCardNotify {
  return resultPenHuProtocol.hasUserOperateCardNotify;
}
- (PBSC_UserOperateCardNotify*) userOperateCardNotify {
  return resultPenHuProtocol.userOperateCardNotify;
}
- (PenHuProtocolBuilder*) setUserOperateCardNotify:(PBSC_UserOperateCardNotify*) value {
  resultPenHuProtocol.hasUserOperateCardNotify = YES;
  resultPenHuProtocol.userOperateCardNotify = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserOperateCardNotifyBuilder:(PBSC_UserOperateCardNotifyBuilder*) builderForValue {
  return [self setUserOperateCardNotify:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserOperateCardNotify:(PBSC_UserOperateCardNotify*) value {
  if (resultPenHuProtocol.hasUserOperateCardNotify &&
      resultPenHuProtocol.userOperateCardNotify != [PBSC_UserOperateCardNotify defaultInstance]) {
    resultPenHuProtocol.userOperateCardNotify =
      [[[PBSC_UserOperateCardNotify builderWithPrototype:resultPenHuProtocol.userOperateCardNotify] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userOperateCardNotify = value;
  }
  resultPenHuProtocol.hasUserOperateCardNotify = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserOperateCardNotify {
  resultPenHuProtocol.hasUserOperateCardNotify = NO;
  resultPenHuProtocol.userOperateCardNotify = [PBSC_UserOperateCardNotify defaultInstance];
  return self;
}
- (BOOL) hasUserCanOperateCardNotify {
  return resultPenHuProtocol.hasUserCanOperateCardNotify;
}
- (PBSC_UserCanOperateCardsNotify*) userCanOperateCardNotify {
  return resultPenHuProtocol.userCanOperateCardNotify;
}
- (PenHuProtocolBuilder*) setUserCanOperateCardNotify:(PBSC_UserCanOperateCardsNotify*) value {
  resultPenHuProtocol.hasUserCanOperateCardNotify = YES;
  resultPenHuProtocol.userCanOperateCardNotify = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserCanOperateCardNotifyBuilder:(PBSC_UserCanOperateCardsNotifyBuilder*) builderForValue {
  return [self setUserCanOperateCardNotify:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserCanOperateCardNotify:(PBSC_UserCanOperateCardsNotify*) value {
  if (resultPenHuProtocol.hasUserCanOperateCardNotify &&
      resultPenHuProtocol.userCanOperateCardNotify != [PBSC_UserCanOperateCardsNotify defaultInstance]) {
    resultPenHuProtocol.userCanOperateCardNotify =
      [[[PBSC_UserCanOperateCardsNotify builderWithPrototype:resultPenHuProtocol.userCanOperateCardNotify] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userCanOperateCardNotify = value;
  }
  resultPenHuProtocol.hasUserCanOperateCardNotify = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserCanOperateCardNotify {
  resultPenHuProtocol.hasUserCanOperateCardNotify = NO;
  resultPenHuProtocol.userCanOperateCardNotify = [PBSC_UserCanOperateCardsNotify defaultInstance];
  return self;
}
- (BOOL) hasUserGetCardInBuffer {
  return resultPenHuProtocol.hasUserGetCardInBuffer;
}
- (PBSC_UserGetCardInBuffer*) userGetCardInBuffer {
  return resultPenHuProtocol.userGetCardInBuffer;
}
- (PenHuProtocolBuilder*) setUserGetCardInBuffer:(PBSC_UserGetCardInBuffer*) value {
  resultPenHuProtocol.hasUserGetCardInBuffer = YES;
  resultPenHuProtocol.userGetCardInBuffer = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserGetCardInBufferBuilder:(PBSC_UserGetCardInBufferBuilder*) builderForValue {
  return [self setUserGetCardInBuffer:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserGetCardInBuffer:(PBSC_UserGetCardInBuffer*) value {
  if (resultPenHuProtocol.hasUserGetCardInBuffer &&
      resultPenHuProtocol.userGetCardInBuffer != [PBSC_UserGetCardInBuffer defaultInstance]) {
    resultPenHuProtocol.userGetCardInBuffer =
      [[[PBSC_UserGetCardInBuffer builderWithPrototype:resultPenHuProtocol.userGetCardInBuffer] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userGetCardInBuffer = value;
  }
  resultPenHuProtocol.hasUserGetCardInBuffer = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserGetCardInBuffer {
  resultPenHuProtocol.hasUserGetCardInBuffer = NO;
  resultPenHuProtocol.userGetCardInBuffer = [PBSC_UserGetCardInBuffer defaultInstance];
  return self;
}
- (BOOL) hasUserGetCardInBufferack {
  return resultPenHuProtocol.hasUserGetCardInBufferack;
}
- (PBCS_UserGetCardInBufferAck*) userGetCardInBufferack {
  return resultPenHuProtocol.userGetCardInBufferack;
}
- (PenHuProtocolBuilder*) setUserGetCardInBufferack:(PBCS_UserGetCardInBufferAck*) value {
  resultPenHuProtocol.hasUserGetCardInBufferack = YES;
  resultPenHuProtocol.userGetCardInBufferack = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserGetCardInBufferackBuilder:(PBCS_UserGetCardInBufferAckBuilder*) builderForValue {
  return [self setUserGetCardInBufferack:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserGetCardInBufferack:(PBCS_UserGetCardInBufferAck*) value {
  if (resultPenHuProtocol.hasUserGetCardInBufferack &&
      resultPenHuProtocol.userGetCardInBufferack != [PBCS_UserGetCardInBufferAck defaultInstance]) {
    resultPenHuProtocol.userGetCardInBufferack =
      [[[PBCS_UserGetCardInBufferAck builderWithPrototype:resultPenHuProtocol.userGetCardInBufferack] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userGetCardInBufferack = value;
  }
  resultPenHuProtocol.hasUserGetCardInBufferack = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserGetCardInBufferack {
  resultPenHuProtocol.hasUserGetCardInBufferack = NO;
  resultPenHuProtocol.userGetCardInBufferack = [PBCS_UserGetCardInBufferAck defaultInstance];
  return self;
}
- (BOOL) hasUserGetCardBufferNotify {
  return resultPenHuProtocol.hasUserGetCardBufferNotify;
}
- (PBSC_UserGetCardInBuffer_Notify*) userGetCardBufferNotify {
  return resultPenHuProtocol.userGetCardBufferNotify;
}
- (PenHuProtocolBuilder*) setUserGetCardBufferNotify:(PBSC_UserGetCardInBuffer_Notify*) value {
  resultPenHuProtocol.hasUserGetCardBufferNotify = YES;
  resultPenHuProtocol.userGetCardBufferNotify = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserGetCardBufferNotifyBuilder:(PBSC_UserGetCardInBuffer_NotifyBuilder*) builderForValue {
  return [self setUserGetCardBufferNotify:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserGetCardBufferNotify:(PBSC_UserGetCardInBuffer_Notify*) value {
  if (resultPenHuProtocol.hasUserGetCardBufferNotify &&
      resultPenHuProtocol.userGetCardBufferNotify != [PBSC_UserGetCardInBuffer_Notify defaultInstance]) {
    resultPenHuProtocol.userGetCardBufferNotify =
      [[[PBSC_UserGetCardInBuffer_Notify builderWithPrototype:resultPenHuProtocol.userGetCardBufferNotify] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userGetCardBufferNotify = value;
  }
  resultPenHuProtocol.hasUserGetCardBufferNotify = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserGetCardBufferNotify {
  resultPenHuProtocol.hasUserGetCardBufferNotify = NO;
  resultPenHuProtocol.userGetCardBufferNotify = [PBSC_UserGetCardInBuffer_Notify defaultInstance];
  return self;
}
- (BOOL) hasUserPing {
  return resultPenHuProtocol.hasUserPing;
}
- (PBCS_PingRoom*) userPing {
  return resultPenHuProtocol.userPing;
}
- (PenHuProtocolBuilder*) setUserPing:(PBCS_PingRoom*) value {
  resultPenHuProtocol.hasUserPing = YES;
  resultPenHuProtocol.userPing = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserPingBuilder:(PBCS_PingRoomBuilder*) builderForValue {
  return [self setUserPing:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserPing:(PBCS_PingRoom*) value {
  if (resultPenHuProtocol.hasUserPing &&
      resultPenHuProtocol.userPing != [PBCS_PingRoom defaultInstance]) {
    resultPenHuProtocol.userPing =
      [[[PBCS_PingRoom builderWithPrototype:resultPenHuProtocol.userPing] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userPing = value;
  }
  resultPenHuProtocol.hasUserPing = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserPing {
  resultPenHuProtocol.hasUserPing = NO;
  resultPenHuProtocol.userPing = [PBCS_PingRoom defaultInstance];
  return self;
}
- (BOOL) hasUserPingRes {
  return resultPenHuProtocol.hasUserPingRes;
}
- (PBSC_PingRoomRes*) userPingRes {
  return resultPenHuProtocol.userPingRes;
}
- (PenHuProtocolBuilder*) setUserPingRes:(PBSC_PingRoomRes*) value {
  resultPenHuProtocol.hasUserPingRes = YES;
  resultPenHuProtocol.userPingRes = value;
  return self;
}
- (PenHuProtocolBuilder*) setUserPingResBuilder:(PBSC_PingRoomResBuilder*) builderForValue {
  return [self setUserPingRes:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeUserPingRes:(PBSC_PingRoomRes*) value {
  if (resultPenHuProtocol.hasUserPingRes &&
      resultPenHuProtocol.userPingRes != [PBSC_PingRoomRes defaultInstance]) {
    resultPenHuProtocol.userPingRes =
      [[[PBSC_PingRoomRes builderWithPrototype:resultPenHuProtocol.userPingRes] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.userPingRes = value;
  }
  resultPenHuProtocol.hasUserPingRes = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearUserPingRes {
  resultPenHuProtocol.hasUserPingRes = NO;
  resultPenHuProtocol.userPingRes = [PBSC_PingRoomRes defaultInstance];
  return self;
}
- (BOOL) hasHupaiNotify {
  return resultPenHuProtocol.hasHupaiNotify;
}
- (PBSC_HuPai*) hupaiNotify {
  return resultPenHuProtocol.hupaiNotify;
}
- (PenHuProtocolBuilder*) setHupaiNotify:(PBSC_HuPai*) value {
  resultPenHuProtocol.hasHupaiNotify = YES;
  resultPenHuProtocol.hupaiNotify = value;
  return self;
}
- (PenHuProtocolBuilder*) setHupaiNotifyBuilder:(PBSC_HuPaiBuilder*) builderForValue {
  return [self setHupaiNotify:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeHupaiNotify:(PBSC_HuPai*) value {
  if (resultPenHuProtocol.hasHupaiNotify &&
      resultPenHuProtocol.hupaiNotify != [PBSC_HuPai defaultInstance]) {
    resultPenHuProtocol.hupaiNotify =
      [[[PBSC_HuPai builderWithPrototype:resultPenHuProtocol.hupaiNotify] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.hupaiNotify = value;
  }
  resultPenHuProtocol.hasHupaiNotify = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearHupaiNotify {
  resultPenHuProtocol.hasHupaiNotify = NO;
  resultPenHuProtocol.hupaiNotify = [PBSC_HuPai defaultInstance];
  return self;
}
- (BOOL) hasRoomGameOver {
  return resultPenHuProtocol.hasRoomGameOver;
}
- (PBSC_RoomGameOver*) roomGameOver {
  return resultPenHuProtocol.roomGameOver;
}
- (PenHuProtocolBuilder*) setRoomGameOver:(PBSC_RoomGameOver*) value {
  resultPenHuProtocol.hasRoomGameOver = YES;
  resultPenHuProtocol.roomGameOver = value;
  return self;
}
- (PenHuProtocolBuilder*) setRoomGameOverBuilder:(PBSC_RoomGameOverBuilder*) builderForValue {
  return [self setRoomGameOver:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeRoomGameOver:(PBSC_RoomGameOver*) value {
  if (resultPenHuProtocol.hasRoomGameOver &&
      resultPenHuProtocol.roomGameOver != [PBSC_RoomGameOver defaultInstance]) {
    resultPenHuProtocol.roomGameOver =
      [[[PBSC_RoomGameOver builderWithPrototype:resultPenHuProtocol.roomGameOver] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.roomGameOver = value;
  }
  resultPenHuProtocol.hasRoomGameOver = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearRoomGameOver {
  resultPenHuProtocol.hasRoomGameOver = NO;
  resultPenHuProtocol.roomGameOver = [PBSC_RoomGameOver defaultInstance];
  return self;
}
- (BOOL) hasWhoIsCurExcutor {
  return resultPenHuProtocol.hasWhoIsCurExcutor;
}
- (PBSC_BroadCastWhoIsExcutorUser*) whoIsCurExcutor {
  return resultPenHuProtocol.whoIsCurExcutor;
}
- (PenHuProtocolBuilder*) setWhoIsCurExcutor:(PBSC_BroadCastWhoIsExcutorUser*) value {
  resultPenHuProtocol.hasWhoIsCurExcutor = YES;
  resultPenHuProtocol.whoIsCurExcutor = value;
  return self;
}
- (PenHuProtocolBuilder*) setWhoIsCurExcutorBuilder:(PBSC_BroadCastWhoIsExcutorUserBuilder*) builderForValue {
  return [self setWhoIsCurExcutor:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeWhoIsCurExcutor:(PBSC_BroadCastWhoIsExcutorUser*) value {
  if (resultPenHuProtocol.hasWhoIsCurExcutor &&
      resultPenHuProtocol.whoIsCurExcutor != [PBSC_BroadCastWhoIsExcutorUser defaultInstance]) {
    resultPenHuProtocol.whoIsCurExcutor =
      [[[PBSC_BroadCastWhoIsExcutorUser builderWithPrototype:resultPenHuProtocol.whoIsCurExcutor] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.whoIsCurExcutor = value;
  }
  resultPenHuProtocol.hasWhoIsCurExcutor = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearWhoIsCurExcutor {
  resultPenHuProtocol.hasWhoIsCurExcutor = NO;
  resultPenHuProtocol.whoIsCurExcutor = [PBSC_BroadCastWhoIsExcutorUser defaultInstance];
  return self;
}
- (BOOL) hasSendRoomMsgReq {
  return resultPenHuProtocol.hasSendRoomMsgReq;
}
- (PBCS_SendRoomMsgReq*) sendRoomMsgReq {
  return resultPenHuProtocol.sendRoomMsgReq;
}
- (PenHuProtocolBuilder*) setSendRoomMsgReq:(PBCS_SendRoomMsgReq*) value {
  resultPenHuProtocol.hasSendRoomMsgReq = YES;
  resultPenHuProtocol.sendRoomMsgReq = value;
  return self;
}
- (PenHuProtocolBuilder*) setSendRoomMsgReqBuilder:(PBCS_SendRoomMsgReqBuilder*) builderForValue {
  return [self setSendRoomMsgReq:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeSendRoomMsgReq:(PBCS_SendRoomMsgReq*) value {
  if (resultPenHuProtocol.hasSendRoomMsgReq &&
      resultPenHuProtocol.sendRoomMsgReq != [PBCS_SendRoomMsgReq defaultInstance]) {
    resultPenHuProtocol.sendRoomMsgReq =
      [[[PBCS_SendRoomMsgReq builderWithPrototype:resultPenHuProtocol.sendRoomMsgReq] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.sendRoomMsgReq = value;
  }
  resultPenHuProtocol.hasSendRoomMsgReq = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearSendRoomMsgReq {
  resultPenHuProtocol.hasSendRoomMsgReq = NO;
  resultPenHuProtocol.sendRoomMsgReq = [PBCS_SendRoomMsgReq defaultInstance];
  return self;
}
- (BOOL) hasSendRoomMsgRes {
  return resultPenHuProtocol.hasSendRoomMsgRes;
}
- (PBSC_SendRoomMsgRes*) sendRoomMsgRes {
  return resultPenHuProtocol.sendRoomMsgRes;
}
- (PenHuProtocolBuilder*) setSendRoomMsgRes:(PBSC_SendRoomMsgRes*) value {
  resultPenHuProtocol.hasSendRoomMsgRes = YES;
  resultPenHuProtocol.sendRoomMsgRes = value;
  return self;
}
- (PenHuProtocolBuilder*) setSendRoomMsgResBuilder:(PBSC_SendRoomMsgResBuilder*) builderForValue {
  return [self setSendRoomMsgRes:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeSendRoomMsgRes:(PBSC_SendRoomMsgRes*) value {
  if (resultPenHuProtocol.hasSendRoomMsgRes &&
      resultPenHuProtocol.sendRoomMsgRes != [PBSC_SendRoomMsgRes defaultInstance]) {
    resultPenHuProtocol.sendRoomMsgRes =
      [[[PBSC_SendRoomMsgRes builderWithPrototype:resultPenHuProtocol.sendRoomMsgRes] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.sendRoomMsgRes = value;
  }
  resultPenHuProtocol.hasSendRoomMsgRes = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearSendRoomMsgRes {
  resultPenHuProtocol.hasSendRoomMsgRes = NO;
  resultPenHuProtocol.sendRoomMsgRes = [PBSC_SendRoomMsgRes defaultInstance];
  return self;
}
- (BOOL) hasBreadcastRoomMsg {
  return resultPenHuProtocol.hasBreadcastRoomMsg;
}
- (PBSC_BroadCastRoomMsg*) breadcastRoomMsg {
  return resultPenHuProtocol.breadcastRoomMsg;
}
- (PenHuProtocolBuilder*) setBreadcastRoomMsg:(PBSC_BroadCastRoomMsg*) value {
  resultPenHuProtocol.hasBreadcastRoomMsg = YES;
  resultPenHuProtocol.breadcastRoomMsg = value;
  return self;
}
- (PenHuProtocolBuilder*) setBreadcastRoomMsgBuilder:(PBSC_BroadCastRoomMsgBuilder*) builderForValue {
  return [self setBreadcastRoomMsg:[builderForValue build]];
}
- (PenHuProtocolBuilder*) mergeBreadcastRoomMsg:(PBSC_BroadCastRoomMsg*) value {
  if (resultPenHuProtocol.hasBreadcastRoomMsg &&
      resultPenHuProtocol.breadcastRoomMsg != [PBSC_BroadCastRoomMsg defaultInstance]) {
    resultPenHuProtocol.breadcastRoomMsg =
      [[[PBSC_BroadCastRoomMsg builderWithPrototype:resultPenHuProtocol.breadcastRoomMsg] mergeFrom:value] buildPartial];
  } else {
    resultPenHuProtocol.breadcastRoomMsg = value;
  }
  resultPenHuProtocol.hasBreadcastRoomMsg = YES;
  return self;
}
- (PenHuProtocolBuilder*) clearBreadcastRoomMsg {
  resultPenHuProtocol.hasBreadcastRoomMsg = NO;
  resultPenHuProtocol.breadcastRoomMsg = [PBSC_BroadCastRoomMsg defaultInstance];
  return self;
}
@end

@interface PBCS_ExchangeKeyReq ()
@property UInt32 seqId;
@property UInt32 uid;
@property (strong) NSString* publicKey;
@property (strong) NSString* e;
@end

@implementation PBCS_ExchangeKeyReq

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasPublicKey {
  return !!hasPublicKey_;
}
- (void) setHasPublicKey:(BOOL) _value_ {
  hasPublicKey_ = !!_value_;
}
@synthesize publicKey;
- (BOOL) hasE {
  return !!hasE_;
}
- (void) setHasE:(BOOL) _value_ {
  hasE_ = !!_value_;
}
@synthesize e;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.uid = 0;
    self.publicKey = @"";
    self.e = @"";
  }
  return self;
}
static PBCS_ExchangeKeyReq* defaultPBCS_ExchangeKeyReqInstance = nil;
+ (void) initialize {
  if (self == [PBCS_ExchangeKeyReq class]) {
    defaultPBCS_ExchangeKeyReqInstance = [[PBCS_ExchangeKeyReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCS_ExchangeKeyReqInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCS_ExchangeKeyReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasPublicKey) {
    return NO;
  }
  if (!self.hasE) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasUid) {
    [output writeUInt32:2 value:self.uid];
  }
  if (self.hasPublicKey) {
    [output writeString:3 value:self.publicKey];
  }
  if (self.hasE) {
    [output writeString:4 value:self.e];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(2, self.uid);
  }
  if (self.hasPublicKey) {
    size_ += computeStringSize(3, self.publicKey);
  }
  if (self.hasE) {
    size_ += computeStringSize(4, self.e);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBCS_ExchangeKeyReq*) parseFromData:(NSData*) data {
  return (PBCS_ExchangeKeyReq*)[[[PBCS_ExchangeKeyReq builder] mergeFromData:data] build];
}
+ (PBCS_ExchangeKeyReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_ExchangeKeyReq*)[[[PBCS_ExchangeKeyReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCS_ExchangeKeyReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBCS_ExchangeKeyReq*)[[[PBCS_ExchangeKeyReq builder] mergeFromInputStream:input] build];
}
+ (PBCS_ExchangeKeyReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_ExchangeKeyReq*)[[[PBCS_ExchangeKeyReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_ExchangeKeyReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCS_ExchangeKeyReq*)[[[PBCS_ExchangeKeyReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBCS_ExchangeKeyReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_ExchangeKeyReq*)[[[PBCS_ExchangeKeyReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_ExchangeKeyReqBuilder*) builder {
  return [[PBCS_ExchangeKeyReqBuilder alloc] init];
}
+ (PBCS_ExchangeKeyReqBuilder*) builderWithPrototype:(PBCS_ExchangeKeyReq*) prototype {
  return [[PBCS_ExchangeKeyReq builder] mergeFrom:prototype];
}
- (PBCS_ExchangeKeyReqBuilder*) builder {
  return [PBCS_ExchangeKeyReq builder];
}
- (PBCS_ExchangeKeyReqBuilder*) toBuilder {
  return [PBCS_ExchangeKeyReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasPublicKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"publicKey", self.publicKey];
  }
  if (self.hasE) {
    [output appendFormat:@"%@%@: %@\n", indent, @"e", self.e];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasPublicKey) {
    [dictionary setObject: self.publicKey forKey: @"publicKey"];
  }
  if (self.hasE) {
    [dictionary setObject: self.e forKey: @"e"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBCS_ExchangeKeyReq class]]) {
    return NO;
  }
  PBCS_ExchangeKeyReq *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasPublicKey == otherMessage.hasPublicKey &&
      (!self.hasPublicKey || [self.publicKey isEqual:otherMessage.publicKey]) &&
      self.hasE == otherMessage.hasE &&
      (!self.hasE || [self.e isEqual:otherMessage.e]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasPublicKey) {
    hashCode = hashCode * 31 + [self.publicKey hash];
  }
  if (self.hasE) {
    hashCode = hashCode * 31 + [self.e hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCS_ExchangeKeyReqBuilder()
@property (strong) PBCS_ExchangeKeyReq* resultPbcsExchangeKeyReq;
@end

@implementation PBCS_ExchangeKeyReqBuilder
@synthesize resultPbcsExchangeKeyReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcsExchangeKeyReq = [[PBCS_ExchangeKeyReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcsExchangeKeyReq;
}
- (PBCS_ExchangeKeyReqBuilder*) clear {
  self.resultPbcsExchangeKeyReq = [[PBCS_ExchangeKeyReq alloc] init];
  return self;
}
- (PBCS_ExchangeKeyReqBuilder*) clone {
  return [PBCS_ExchangeKeyReq builderWithPrototype:resultPbcsExchangeKeyReq];
}
- (PBCS_ExchangeKeyReq*) defaultInstance {
  return [PBCS_ExchangeKeyReq defaultInstance];
}
- (PBCS_ExchangeKeyReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCS_ExchangeKeyReq*) buildPartial {
  PBCS_ExchangeKeyReq* returnMe = resultPbcsExchangeKeyReq;
  self.resultPbcsExchangeKeyReq = nil;
  return returnMe;
}
- (PBCS_ExchangeKeyReqBuilder*) mergeFrom:(PBCS_ExchangeKeyReq*) other {
  if (other == [PBCS_ExchangeKeyReq defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasPublicKey) {
    [self setPublicKey:other.publicKey];
  }
  if (other.hasE) {
    [self setE:other.e];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCS_ExchangeKeyReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCS_ExchangeKeyReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 26: {
        [self setPublicKey:[input readString]];
        break;
      }
      case 34: {
        [self setE:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbcsExchangeKeyReq.hasSeqId;
}
- (UInt32) seqId {
  return resultPbcsExchangeKeyReq.seqId;
}
- (PBCS_ExchangeKeyReqBuilder*) setSeqId:(UInt32) value {
  resultPbcsExchangeKeyReq.hasSeqId = YES;
  resultPbcsExchangeKeyReq.seqId = value;
  return self;
}
- (PBCS_ExchangeKeyReqBuilder*) clearSeqId {
  resultPbcsExchangeKeyReq.hasSeqId = NO;
  resultPbcsExchangeKeyReq.seqId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbcsExchangeKeyReq.hasUid;
}
- (UInt32) uid {
  return resultPbcsExchangeKeyReq.uid;
}
- (PBCS_ExchangeKeyReqBuilder*) setUid:(UInt32) value {
  resultPbcsExchangeKeyReq.hasUid = YES;
  resultPbcsExchangeKeyReq.uid = value;
  return self;
}
- (PBCS_ExchangeKeyReqBuilder*) clearUid {
  resultPbcsExchangeKeyReq.hasUid = NO;
  resultPbcsExchangeKeyReq.uid = 0;
  return self;
}
- (BOOL) hasPublicKey {
  return resultPbcsExchangeKeyReq.hasPublicKey;
}
- (NSString*) publicKey {
  return resultPbcsExchangeKeyReq.publicKey;
}
- (PBCS_ExchangeKeyReqBuilder*) setPublicKey:(NSString*) value {
  resultPbcsExchangeKeyReq.hasPublicKey = YES;
  resultPbcsExchangeKeyReq.publicKey = value;
  return self;
}
- (PBCS_ExchangeKeyReqBuilder*) clearPublicKey {
  resultPbcsExchangeKeyReq.hasPublicKey = NO;
  resultPbcsExchangeKeyReq.publicKey = @"";
  return self;
}
- (BOOL) hasE {
  return resultPbcsExchangeKeyReq.hasE;
}
- (NSString*) e {
  return resultPbcsExchangeKeyReq.e;
}
- (PBCS_ExchangeKeyReqBuilder*) setE:(NSString*) value {
  resultPbcsExchangeKeyReq.hasE = YES;
  resultPbcsExchangeKeyReq.e = value;
  return self;
}
- (PBCS_ExchangeKeyReqBuilder*) clearE {
  resultPbcsExchangeKeyReq.hasE = NO;
  resultPbcsExchangeKeyReq.e = @"";
  return self;
}
@end

@interface PBSC_ExchangeKeyRes ()
@property UInt32 seqId;
@property UInt32 uid;
@property (strong) NSString* encSessionKey;
@end

@implementation PBSC_ExchangeKeyRes

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasEncSessionKey {
  return !!hasEncSessionKey_;
}
- (void) setHasEncSessionKey:(BOOL) _value_ {
  hasEncSessionKey_ = !!_value_;
}
@synthesize encSessionKey;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.uid = 0;
    self.encSessionKey = @"";
  }
  return self;
}
static PBSC_ExchangeKeyRes* defaultPBSC_ExchangeKeyResInstance = nil;
+ (void) initialize {
  if (self == [PBSC_ExchangeKeyRes class]) {
    defaultPBSC_ExchangeKeyResInstance = [[PBSC_ExchangeKeyRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_ExchangeKeyResInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_ExchangeKeyResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasEncSessionKey) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasUid) {
    [output writeUInt32:2 value:self.uid];
  }
  if (self.hasEncSessionKey) {
    [output writeString:3 value:self.encSessionKey];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(2, self.uid);
  }
  if (self.hasEncSessionKey) {
    size_ += computeStringSize(3, self.encSessionKey);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_ExchangeKeyRes*) parseFromData:(NSData*) data {
  return (PBSC_ExchangeKeyRes*)[[[PBSC_ExchangeKeyRes builder] mergeFromData:data] build];
}
+ (PBSC_ExchangeKeyRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_ExchangeKeyRes*)[[[PBSC_ExchangeKeyRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_ExchangeKeyRes*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_ExchangeKeyRes*)[[[PBSC_ExchangeKeyRes builder] mergeFromInputStream:input] build];
}
+ (PBSC_ExchangeKeyRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_ExchangeKeyRes*)[[[PBSC_ExchangeKeyRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_ExchangeKeyRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_ExchangeKeyRes*)[[[PBSC_ExchangeKeyRes builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_ExchangeKeyRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_ExchangeKeyRes*)[[[PBSC_ExchangeKeyRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_ExchangeKeyResBuilder*) builder {
  return [[PBSC_ExchangeKeyResBuilder alloc] init];
}
+ (PBSC_ExchangeKeyResBuilder*) builderWithPrototype:(PBSC_ExchangeKeyRes*) prototype {
  return [[PBSC_ExchangeKeyRes builder] mergeFrom:prototype];
}
- (PBSC_ExchangeKeyResBuilder*) builder {
  return [PBSC_ExchangeKeyRes builder];
}
- (PBSC_ExchangeKeyResBuilder*) toBuilder {
  return [PBSC_ExchangeKeyRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasEncSessionKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"encSessionKey", self.encSessionKey];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasEncSessionKey) {
    [dictionary setObject: self.encSessionKey forKey: @"encSessionKey"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_ExchangeKeyRes class]]) {
    return NO;
  }
  PBSC_ExchangeKeyRes *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasEncSessionKey == otherMessage.hasEncSessionKey &&
      (!self.hasEncSessionKey || [self.encSessionKey isEqual:otherMessage.encSessionKey]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasEncSessionKey) {
    hashCode = hashCode * 31 + [self.encSessionKey hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_ExchangeKeyResBuilder()
@property (strong) PBSC_ExchangeKeyRes* resultPbscExchangeKeyRes;
@end

@implementation PBSC_ExchangeKeyResBuilder
@synthesize resultPbscExchangeKeyRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscExchangeKeyRes = [[PBSC_ExchangeKeyRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscExchangeKeyRes;
}
- (PBSC_ExchangeKeyResBuilder*) clear {
  self.resultPbscExchangeKeyRes = [[PBSC_ExchangeKeyRes alloc] init];
  return self;
}
- (PBSC_ExchangeKeyResBuilder*) clone {
  return [PBSC_ExchangeKeyRes builderWithPrototype:resultPbscExchangeKeyRes];
}
- (PBSC_ExchangeKeyRes*) defaultInstance {
  return [PBSC_ExchangeKeyRes defaultInstance];
}
- (PBSC_ExchangeKeyRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_ExchangeKeyRes*) buildPartial {
  PBSC_ExchangeKeyRes* returnMe = resultPbscExchangeKeyRes;
  self.resultPbscExchangeKeyRes = nil;
  return returnMe;
}
- (PBSC_ExchangeKeyResBuilder*) mergeFrom:(PBSC_ExchangeKeyRes*) other {
  if (other == [PBSC_ExchangeKeyRes defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasEncSessionKey) {
    [self setEncSessionKey:other.encSessionKey];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_ExchangeKeyResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_ExchangeKeyResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 26: {
        [self setEncSessionKey:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbscExchangeKeyRes.hasSeqId;
}
- (UInt32) seqId {
  return resultPbscExchangeKeyRes.seqId;
}
- (PBSC_ExchangeKeyResBuilder*) setSeqId:(UInt32) value {
  resultPbscExchangeKeyRes.hasSeqId = YES;
  resultPbscExchangeKeyRes.seqId = value;
  return self;
}
- (PBSC_ExchangeKeyResBuilder*) clearSeqId {
  resultPbscExchangeKeyRes.hasSeqId = NO;
  resultPbscExchangeKeyRes.seqId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbscExchangeKeyRes.hasUid;
}
- (UInt32) uid {
  return resultPbscExchangeKeyRes.uid;
}
- (PBSC_ExchangeKeyResBuilder*) setUid:(UInt32) value {
  resultPbscExchangeKeyRes.hasUid = YES;
  resultPbscExchangeKeyRes.uid = value;
  return self;
}
- (PBSC_ExchangeKeyResBuilder*) clearUid {
  resultPbscExchangeKeyRes.hasUid = NO;
  resultPbscExchangeKeyRes.uid = 0;
  return self;
}
- (BOOL) hasEncSessionKey {
  return resultPbscExchangeKeyRes.hasEncSessionKey;
}
- (NSString*) encSessionKey {
  return resultPbscExchangeKeyRes.encSessionKey;
}
- (PBSC_ExchangeKeyResBuilder*) setEncSessionKey:(NSString*) value {
  resultPbscExchangeKeyRes.hasEncSessionKey = YES;
  resultPbscExchangeKeyRes.encSessionKey = value;
  return self;
}
- (PBSC_ExchangeKeyResBuilder*) clearEncSessionKey {
  resultPbscExchangeKeyRes.hasEncSessionKey = NO;
  resultPbscExchangeKeyRes.encSessionKey = @"";
  return self;
}
@end

@interface PBCS_LoginGameServerReq ()
@property UInt32 seqId;
@property UInt32 uid;
@property UInt32 protocolVersion;
@property UInt32 netType;
@property UInt32 loginStamp;
@property (strong) NSString* token;
@end

@implementation PBCS_LoginGameServerReq

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasProtocolVersion {
  return !!hasProtocolVersion_;
}
- (void) setHasProtocolVersion:(BOOL) _value_ {
  hasProtocolVersion_ = !!_value_;
}
@synthesize protocolVersion;
- (BOOL) hasNetType {
  return !!hasNetType_;
}
- (void) setHasNetType:(BOOL) _value_ {
  hasNetType_ = !!_value_;
}
@synthesize netType;
- (BOOL) hasLoginStamp {
  return !!hasLoginStamp_;
}
- (void) setHasLoginStamp:(BOOL) _value_ {
  hasLoginStamp_ = !!_value_;
}
@synthesize loginStamp;
- (BOOL) hasToken {
  return !!hasToken_;
}
- (void) setHasToken:(BOOL) _value_ {
  hasToken_ = !!_value_;
}
@synthesize token;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.uid = 0;
    self.protocolVersion = 0;
    self.netType = 0;
    self.loginStamp = 0;
    self.token = @"";
  }
  return self;
}
static PBCS_LoginGameServerReq* defaultPBCS_LoginGameServerReqInstance = nil;
+ (void) initialize {
  if (self == [PBCS_LoginGameServerReq class]) {
    defaultPBCS_LoginGameServerReqInstance = [[PBCS_LoginGameServerReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCS_LoginGameServerReqInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCS_LoginGameServerReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasProtocolVersion) {
    return NO;
  }
  if (!self.hasNetType) {
    return NO;
  }
  if (!self.hasLoginStamp) {
    return NO;
  }
  if (!self.hasToken) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasUid) {
    [output writeUInt32:2 value:self.uid];
  }
  if (self.hasProtocolVersion) {
    [output writeUInt32:3 value:self.protocolVersion];
  }
  if (self.hasNetType) {
    [output writeUInt32:4 value:self.netType];
  }
  if (self.hasLoginStamp) {
    [output writeUInt32:5 value:self.loginStamp];
  }
  if (self.hasToken) {
    [output writeString:6 value:self.token];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(2, self.uid);
  }
  if (self.hasProtocolVersion) {
    size_ += computeUInt32Size(3, self.protocolVersion);
  }
  if (self.hasNetType) {
    size_ += computeUInt32Size(4, self.netType);
  }
  if (self.hasLoginStamp) {
    size_ += computeUInt32Size(5, self.loginStamp);
  }
  if (self.hasToken) {
    size_ += computeStringSize(6, self.token);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBCS_LoginGameServerReq*) parseFromData:(NSData*) data {
  return (PBCS_LoginGameServerReq*)[[[PBCS_LoginGameServerReq builder] mergeFromData:data] build];
}
+ (PBCS_LoginGameServerReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_LoginGameServerReq*)[[[PBCS_LoginGameServerReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCS_LoginGameServerReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBCS_LoginGameServerReq*)[[[PBCS_LoginGameServerReq builder] mergeFromInputStream:input] build];
}
+ (PBCS_LoginGameServerReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_LoginGameServerReq*)[[[PBCS_LoginGameServerReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_LoginGameServerReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCS_LoginGameServerReq*)[[[PBCS_LoginGameServerReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBCS_LoginGameServerReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_LoginGameServerReq*)[[[PBCS_LoginGameServerReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_LoginGameServerReqBuilder*) builder {
  return [[PBCS_LoginGameServerReqBuilder alloc] init];
}
+ (PBCS_LoginGameServerReqBuilder*) builderWithPrototype:(PBCS_LoginGameServerReq*) prototype {
  return [[PBCS_LoginGameServerReq builder] mergeFrom:prototype];
}
- (PBCS_LoginGameServerReqBuilder*) builder {
  return [PBCS_LoginGameServerReq builder];
}
- (PBCS_LoginGameServerReqBuilder*) toBuilder {
  return [PBCS_LoginGameServerReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasProtocolVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"protocolVersion", [NSNumber numberWithInteger:self.protocolVersion]];
  }
  if (self.hasNetType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"netType", [NSNumber numberWithInteger:self.netType]];
  }
  if (self.hasLoginStamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loginStamp", [NSNumber numberWithInteger:self.loginStamp]];
  }
  if (self.hasToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"token", self.token];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasProtocolVersion) {
    [dictionary setObject: [NSNumber numberWithInteger:self.protocolVersion] forKey: @"protocolVersion"];
  }
  if (self.hasNetType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.netType] forKey: @"netType"];
  }
  if (self.hasLoginStamp) {
    [dictionary setObject: [NSNumber numberWithInteger:self.loginStamp] forKey: @"loginStamp"];
  }
  if (self.hasToken) {
    [dictionary setObject: self.token forKey: @"token"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBCS_LoginGameServerReq class]]) {
    return NO;
  }
  PBCS_LoginGameServerReq *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasProtocolVersion == otherMessage.hasProtocolVersion &&
      (!self.hasProtocolVersion || self.protocolVersion == otherMessage.protocolVersion) &&
      self.hasNetType == otherMessage.hasNetType &&
      (!self.hasNetType || self.netType == otherMessage.netType) &&
      self.hasLoginStamp == otherMessage.hasLoginStamp &&
      (!self.hasLoginStamp || self.loginStamp == otherMessage.loginStamp) &&
      self.hasToken == otherMessage.hasToken &&
      (!self.hasToken || [self.token isEqual:otherMessage.token]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasProtocolVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.protocolVersion] hash];
  }
  if (self.hasNetType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.netType] hash];
  }
  if (self.hasLoginStamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.loginStamp] hash];
  }
  if (self.hasToken) {
    hashCode = hashCode * 31 + [self.token hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCS_LoginGameServerReqBuilder()
@property (strong) PBCS_LoginGameServerReq* resultPbcsLoginGameServerReq;
@end

@implementation PBCS_LoginGameServerReqBuilder
@synthesize resultPbcsLoginGameServerReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcsLoginGameServerReq = [[PBCS_LoginGameServerReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcsLoginGameServerReq;
}
- (PBCS_LoginGameServerReqBuilder*) clear {
  self.resultPbcsLoginGameServerReq = [[PBCS_LoginGameServerReq alloc] init];
  return self;
}
- (PBCS_LoginGameServerReqBuilder*) clone {
  return [PBCS_LoginGameServerReq builderWithPrototype:resultPbcsLoginGameServerReq];
}
- (PBCS_LoginGameServerReq*) defaultInstance {
  return [PBCS_LoginGameServerReq defaultInstance];
}
- (PBCS_LoginGameServerReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCS_LoginGameServerReq*) buildPartial {
  PBCS_LoginGameServerReq* returnMe = resultPbcsLoginGameServerReq;
  self.resultPbcsLoginGameServerReq = nil;
  return returnMe;
}
- (PBCS_LoginGameServerReqBuilder*) mergeFrom:(PBCS_LoginGameServerReq*) other {
  if (other == [PBCS_LoginGameServerReq defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasProtocolVersion) {
    [self setProtocolVersion:other.protocolVersion];
  }
  if (other.hasNetType) {
    [self setNetType:other.netType];
  }
  if (other.hasLoginStamp) {
    [self setLoginStamp:other.loginStamp];
  }
  if (other.hasToken) {
    [self setToken:other.token];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCS_LoginGameServerReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCS_LoginGameServerReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 24: {
        [self setProtocolVersion:[input readUInt32]];
        break;
      }
      case 32: {
        [self setNetType:[input readUInt32]];
        break;
      }
      case 40: {
        [self setLoginStamp:[input readUInt32]];
        break;
      }
      case 50: {
        [self setToken:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbcsLoginGameServerReq.hasSeqId;
}
- (UInt32) seqId {
  return resultPbcsLoginGameServerReq.seqId;
}
- (PBCS_LoginGameServerReqBuilder*) setSeqId:(UInt32) value {
  resultPbcsLoginGameServerReq.hasSeqId = YES;
  resultPbcsLoginGameServerReq.seqId = value;
  return self;
}
- (PBCS_LoginGameServerReqBuilder*) clearSeqId {
  resultPbcsLoginGameServerReq.hasSeqId = NO;
  resultPbcsLoginGameServerReq.seqId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbcsLoginGameServerReq.hasUid;
}
- (UInt32) uid {
  return resultPbcsLoginGameServerReq.uid;
}
- (PBCS_LoginGameServerReqBuilder*) setUid:(UInt32) value {
  resultPbcsLoginGameServerReq.hasUid = YES;
  resultPbcsLoginGameServerReq.uid = value;
  return self;
}
- (PBCS_LoginGameServerReqBuilder*) clearUid {
  resultPbcsLoginGameServerReq.hasUid = NO;
  resultPbcsLoginGameServerReq.uid = 0;
  return self;
}
- (BOOL) hasProtocolVersion {
  return resultPbcsLoginGameServerReq.hasProtocolVersion;
}
- (UInt32) protocolVersion {
  return resultPbcsLoginGameServerReq.protocolVersion;
}
- (PBCS_LoginGameServerReqBuilder*) setProtocolVersion:(UInt32) value {
  resultPbcsLoginGameServerReq.hasProtocolVersion = YES;
  resultPbcsLoginGameServerReq.protocolVersion = value;
  return self;
}
- (PBCS_LoginGameServerReqBuilder*) clearProtocolVersion {
  resultPbcsLoginGameServerReq.hasProtocolVersion = NO;
  resultPbcsLoginGameServerReq.protocolVersion = 0;
  return self;
}
- (BOOL) hasNetType {
  return resultPbcsLoginGameServerReq.hasNetType;
}
- (UInt32) netType {
  return resultPbcsLoginGameServerReq.netType;
}
- (PBCS_LoginGameServerReqBuilder*) setNetType:(UInt32) value {
  resultPbcsLoginGameServerReq.hasNetType = YES;
  resultPbcsLoginGameServerReq.netType = value;
  return self;
}
- (PBCS_LoginGameServerReqBuilder*) clearNetType {
  resultPbcsLoginGameServerReq.hasNetType = NO;
  resultPbcsLoginGameServerReq.netType = 0;
  return self;
}
- (BOOL) hasLoginStamp {
  return resultPbcsLoginGameServerReq.hasLoginStamp;
}
- (UInt32) loginStamp {
  return resultPbcsLoginGameServerReq.loginStamp;
}
- (PBCS_LoginGameServerReqBuilder*) setLoginStamp:(UInt32) value {
  resultPbcsLoginGameServerReq.hasLoginStamp = YES;
  resultPbcsLoginGameServerReq.loginStamp = value;
  return self;
}
- (PBCS_LoginGameServerReqBuilder*) clearLoginStamp {
  resultPbcsLoginGameServerReq.hasLoginStamp = NO;
  resultPbcsLoginGameServerReq.loginStamp = 0;
  return self;
}
- (BOOL) hasToken {
  return resultPbcsLoginGameServerReq.hasToken;
}
- (NSString*) token {
  return resultPbcsLoginGameServerReq.token;
}
- (PBCS_LoginGameServerReqBuilder*) setToken:(NSString*) value {
  resultPbcsLoginGameServerReq.hasToken = YES;
  resultPbcsLoginGameServerReq.token = value;
  return self;
}
- (PBCS_LoginGameServerReqBuilder*) clearToken {
  resultPbcsLoginGameServerReq.hasToken = NO;
  resultPbcsLoginGameServerReq.token = @"";
  return self;
}
@end

@interface PBCS_LoginGameServerRes ()
@property UInt32 seqId;
@property UInt32 uid;
@property (strong) NSString* rescode;
@end

@implementation PBCS_LoginGameServerRes

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasRescode {
  return !!hasRescode_;
}
- (void) setHasRescode:(BOOL) _value_ {
  hasRescode_ = !!_value_;
}
@synthesize rescode;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.uid = 0;
    self.rescode = @"";
  }
  return self;
}
static PBCS_LoginGameServerRes* defaultPBCS_LoginGameServerResInstance = nil;
+ (void) initialize {
  if (self == [PBCS_LoginGameServerRes class]) {
    defaultPBCS_LoginGameServerResInstance = [[PBCS_LoginGameServerRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCS_LoginGameServerResInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCS_LoginGameServerResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasRescode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasUid) {
    [output writeUInt32:2 value:self.uid];
  }
  if (self.hasRescode) {
    [output writeString:3 value:self.rescode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(2, self.uid);
  }
  if (self.hasRescode) {
    size_ += computeStringSize(3, self.rescode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBCS_LoginGameServerRes*) parseFromData:(NSData*) data {
  return (PBCS_LoginGameServerRes*)[[[PBCS_LoginGameServerRes builder] mergeFromData:data] build];
}
+ (PBCS_LoginGameServerRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_LoginGameServerRes*)[[[PBCS_LoginGameServerRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCS_LoginGameServerRes*) parseFromInputStream:(NSInputStream*) input {
  return (PBCS_LoginGameServerRes*)[[[PBCS_LoginGameServerRes builder] mergeFromInputStream:input] build];
}
+ (PBCS_LoginGameServerRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_LoginGameServerRes*)[[[PBCS_LoginGameServerRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_LoginGameServerRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCS_LoginGameServerRes*)[[[PBCS_LoginGameServerRes builder] mergeFromCodedInputStream:input] build];
}
+ (PBCS_LoginGameServerRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_LoginGameServerRes*)[[[PBCS_LoginGameServerRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_LoginGameServerResBuilder*) builder {
  return [[PBCS_LoginGameServerResBuilder alloc] init];
}
+ (PBCS_LoginGameServerResBuilder*) builderWithPrototype:(PBCS_LoginGameServerRes*) prototype {
  return [[PBCS_LoginGameServerRes builder] mergeFrom:prototype];
}
- (PBCS_LoginGameServerResBuilder*) builder {
  return [PBCS_LoginGameServerRes builder];
}
- (PBCS_LoginGameServerResBuilder*) toBuilder {
  return [PBCS_LoginGameServerRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasRescode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rescode", self.rescode];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasRescode) {
    [dictionary setObject: self.rescode forKey: @"rescode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBCS_LoginGameServerRes class]]) {
    return NO;
  }
  PBCS_LoginGameServerRes *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasRescode == otherMessage.hasRescode &&
      (!self.hasRescode || [self.rescode isEqual:otherMessage.rescode]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasRescode) {
    hashCode = hashCode * 31 + [self.rescode hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCS_LoginGameServerResBuilder()
@property (strong) PBCS_LoginGameServerRes* resultPbcsLoginGameServerRes;
@end

@implementation PBCS_LoginGameServerResBuilder
@synthesize resultPbcsLoginGameServerRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcsLoginGameServerRes = [[PBCS_LoginGameServerRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcsLoginGameServerRes;
}
- (PBCS_LoginGameServerResBuilder*) clear {
  self.resultPbcsLoginGameServerRes = [[PBCS_LoginGameServerRes alloc] init];
  return self;
}
- (PBCS_LoginGameServerResBuilder*) clone {
  return [PBCS_LoginGameServerRes builderWithPrototype:resultPbcsLoginGameServerRes];
}
- (PBCS_LoginGameServerRes*) defaultInstance {
  return [PBCS_LoginGameServerRes defaultInstance];
}
- (PBCS_LoginGameServerRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCS_LoginGameServerRes*) buildPartial {
  PBCS_LoginGameServerRes* returnMe = resultPbcsLoginGameServerRes;
  self.resultPbcsLoginGameServerRes = nil;
  return returnMe;
}
- (PBCS_LoginGameServerResBuilder*) mergeFrom:(PBCS_LoginGameServerRes*) other {
  if (other == [PBCS_LoginGameServerRes defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasRescode) {
    [self setRescode:other.rescode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCS_LoginGameServerResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCS_LoginGameServerResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 26: {
        [self setRescode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbcsLoginGameServerRes.hasSeqId;
}
- (UInt32) seqId {
  return resultPbcsLoginGameServerRes.seqId;
}
- (PBCS_LoginGameServerResBuilder*) setSeqId:(UInt32) value {
  resultPbcsLoginGameServerRes.hasSeqId = YES;
  resultPbcsLoginGameServerRes.seqId = value;
  return self;
}
- (PBCS_LoginGameServerResBuilder*) clearSeqId {
  resultPbcsLoginGameServerRes.hasSeqId = NO;
  resultPbcsLoginGameServerRes.seqId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbcsLoginGameServerRes.hasUid;
}
- (UInt32) uid {
  return resultPbcsLoginGameServerRes.uid;
}
- (PBCS_LoginGameServerResBuilder*) setUid:(UInt32) value {
  resultPbcsLoginGameServerRes.hasUid = YES;
  resultPbcsLoginGameServerRes.uid = value;
  return self;
}
- (PBCS_LoginGameServerResBuilder*) clearUid {
  resultPbcsLoginGameServerRes.hasUid = NO;
  resultPbcsLoginGameServerRes.uid = 0;
  return self;
}
- (BOOL) hasRescode {
  return resultPbcsLoginGameServerRes.hasRescode;
}
- (NSString*) rescode {
  return resultPbcsLoginGameServerRes.rescode;
}
- (PBCS_LoginGameServerResBuilder*) setRescode:(NSString*) value {
  resultPbcsLoginGameServerRes.hasRescode = YES;
  resultPbcsLoginGameServerRes.rescode = value;
  return self;
}
- (PBCS_LoginGameServerResBuilder*) clearRescode {
  resultPbcsLoginGameServerRes.hasRescode = NO;
  resultPbcsLoginGameServerRes.rescode = @"";
  return self;
}
@end

@interface PBCS_LoginOutGameServerReq ()
@property UInt32 seqId;
@property UInt32 uid;
@property UInt32 loginStamp;
@end

@implementation PBCS_LoginOutGameServerReq

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasLoginStamp {
  return !!hasLoginStamp_;
}
- (void) setHasLoginStamp:(BOOL) _value_ {
  hasLoginStamp_ = !!_value_;
}
@synthesize loginStamp;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.uid = 0;
    self.loginStamp = 0;
  }
  return self;
}
static PBCS_LoginOutGameServerReq* defaultPBCS_LoginOutGameServerReqInstance = nil;
+ (void) initialize {
  if (self == [PBCS_LoginOutGameServerReq class]) {
    defaultPBCS_LoginOutGameServerReqInstance = [[PBCS_LoginOutGameServerReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCS_LoginOutGameServerReqInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCS_LoginOutGameServerReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasLoginStamp) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasUid) {
    [output writeUInt32:2 value:self.uid];
  }
  if (self.hasLoginStamp) {
    [output writeUInt32:3 value:self.loginStamp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(2, self.uid);
  }
  if (self.hasLoginStamp) {
    size_ += computeUInt32Size(3, self.loginStamp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBCS_LoginOutGameServerReq*) parseFromData:(NSData*) data {
  return (PBCS_LoginOutGameServerReq*)[[[PBCS_LoginOutGameServerReq builder] mergeFromData:data] build];
}
+ (PBCS_LoginOutGameServerReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_LoginOutGameServerReq*)[[[PBCS_LoginOutGameServerReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCS_LoginOutGameServerReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBCS_LoginOutGameServerReq*)[[[PBCS_LoginOutGameServerReq builder] mergeFromInputStream:input] build];
}
+ (PBCS_LoginOutGameServerReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_LoginOutGameServerReq*)[[[PBCS_LoginOutGameServerReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_LoginOutGameServerReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCS_LoginOutGameServerReq*)[[[PBCS_LoginOutGameServerReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBCS_LoginOutGameServerReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_LoginOutGameServerReq*)[[[PBCS_LoginOutGameServerReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_LoginOutGameServerReqBuilder*) builder {
  return [[PBCS_LoginOutGameServerReqBuilder alloc] init];
}
+ (PBCS_LoginOutGameServerReqBuilder*) builderWithPrototype:(PBCS_LoginOutGameServerReq*) prototype {
  return [[PBCS_LoginOutGameServerReq builder] mergeFrom:prototype];
}
- (PBCS_LoginOutGameServerReqBuilder*) builder {
  return [PBCS_LoginOutGameServerReq builder];
}
- (PBCS_LoginOutGameServerReqBuilder*) toBuilder {
  return [PBCS_LoginOutGameServerReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasLoginStamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"loginStamp", [NSNumber numberWithInteger:self.loginStamp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasLoginStamp) {
    [dictionary setObject: [NSNumber numberWithInteger:self.loginStamp] forKey: @"loginStamp"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBCS_LoginOutGameServerReq class]]) {
    return NO;
  }
  PBCS_LoginOutGameServerReq *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasLoginStamp == otherMessage.hasLoginStamp &&
      (!self.hasLoginStamp || self.loginStamp == otherMessage.loginStamp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasLoginStamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.loginStamp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCS_LoginOutGameServerReqBuilder()
@property (strong) PBCS_LoginOutGameServerReq* resultPbcsLoginOutGameServerReq;
@end

@implementation PBCS_LoginOutGameServerReqBuilder
@synthesize resultPbcsLoginOutGameServerReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcsLoginOutGameServerReq = [[PBCS_LoginOutGameServerReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcsLoginOutGameServerReq;
}
- (PBCS_LoginOutGameServerReqBuilder*) clear {
  self.resultPbcsLoginOutGameServerReq = [[PBCS_LoginOutGameServerReq alloc] init];
  return self;
}
- (PBCS_LoginOutGameServerReqBuilder*) clone {
  return [PBCS_LoginOutGameServerReq builderWithPrototype:resultPbcsLoginOutGameServerReq];
}
- (PBCS_LoginOutGameServerReq*) defaultInstance {
  return [PBCS_LoginOutGameServerReq defaultInstance];
}
- (PBCS_LoginOutGameServerReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCS_LoginOutGameServerReq*) buildPartial {
  PBCS_LoginOutGameServerReq* returnMe = resultPbcsLoginOutGameServerReq;
  self.resultPbcsLoginOutGameServerReq = nil;
  return returnMe;
}
- (PBCS_LoginOutGameServerReqBuilder*) mergeFrom:(PBCS_LoginOutGameServerReq*) other {
  if (other == [PBCS_LoginOutGameServerReq defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasLoginStamp) {
    [self setLoginStamp:other.loginStamp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCS_LoginOutGameServerReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCS_LoginOutGameServerReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 24: {
        [self setLoginStamp:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbcsLoginOutGameServerReq.hasSeqId;
}
- (UInt32) seqId {
  return resultPbcsLoginOutGameServerReq.seqId;
}
- (PBCS_LoginOutGameServerReqBuilder*) setSeqId:(UInt32) value {
  resultPbcsLoginOutGameServerReq.hasSeqId = YES;
  resultPbcsLoginOutGameServerReq.seqId = value;
  return self;
}
- (PBCS_LoginOutGameServerReqBuilder*) clearSeqId {
  resultPbcsLoginOutGameServerReq.hasSeqId = NO;
  resultPbcsLoginOutGameServerReq.seqId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbcsLoginOutGameServerReq.hasUid;
}
- (UInt32) uid {
  return resultPbcsLoginOutGameServerReq.uid;
}
- (PBCS_LoginOutGameServerReqBuilder*) setUid:(UInt32) value {
  resultPbcsLoginOutGameServerReq.hasUid = YES;
  resultPbcsLoginOutGameServerReq.uid = value;
  return self;
}
- (PBCS_LoginOutGameServerReqBuilder*) clearUid {
  resultPbcsLoginOutGameServerReq.hasUid = NO;
  resultPbcsLoginOutGameServerReq.uid = 0;
  return self;
}
- (BOOL) hasLoginStamp {
  return resultPbcsLoginOutGameServerReq.hasLoginStamp;
}
- (UInt32) loginStamp {
  return resultPbcsLoginOutGameServerReq.loginStamp;
}
- (PBCS_LoginOutGameServerReqBuilder*) setLoginStamp:(UInt32) value {
  resultPbcsLoginOutGameServerReq.hasLoginStamp = YES;
  resultPbcsLoginOutGameServerReq.loginStamp = value;
  return self;
}
- (PBCS_LoginOutGameServerReqBuilder*) clearLoginStamp {
  resultPbcsLoginOutGameServerReq.hasLoginStamp = NO;
  resultPbcsLoginOutGameServerReq.loginStamp = 0;
  return self;
}
@end

@interface PBCS_LoginOutGameServerRes ()
@property UInt32 seqId;
@property UInt32 uid;
@property (strong) NSString* rescode;
@end

@implementation PBCS_LoginOutGameServerRes

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasRescode {
  return !!hasRescode_;
}
- (void) setHasRescode:(BOOL) _value_ {
  hasRescode_ = !!_value_;
}
@synthesize rescode;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.uid = 0;
    self.rescode = @"";
  }
  return self;
}
static PBCS_LoginOutGameServerRes* defaultPBCS_LoginOutGameServerResInstance = nil;
+ (void) initialize {
  if (self == [PBCS_LoginOutGameServerRes class]) {
    defaultPBCS_LoginOutGameServerResInstance = [[PBCS_LoginOutGameServerRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCS_LoginOutGameServerResInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCS_LoginOutGameServerResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasRescode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasUid) {
    [output writeUInt32:2 value:self.uid];
  }
  if (self.hasRescode) {
    [output writeString:3 value:self.rescode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(2, self.uid);
  }
  if (self.hasRescode) {
    size_ += computeStringSize(3, self.rescode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBCS_LoginOutGameServerRes*) parseFromData:(NSData*) data {
  return (PBCS_LoginOutGameServerRes*)[[[PBCS_LoginOutGameServerRes builder] mergeFromData:data] build];
}
+ (PBCS_LoginOutGameServerRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_LoginOutGameServerRes*)[[[PBCS_LoginOutGameServerRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCS_LoginOutGameServerRes*) parseFromInputStream:(NSInputStream*) input {
  return (PBCS_LoginOutGameServerRes*)[[[PBCS_LoginOutGameServerRes builder] mergeFromInputStream:input] build];
}
+ (PBCS_LoginOutGameServerRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_LoginOutGameServerRes*)[[[PBCS_LoginOutGameServerRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_LoginOutGameServerRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCS_LoginOutGameServerRes*)[[[PBCS_LoginOutGameServerRes builder] mergeFromCodedInputStream:input] build];
}
+ (PBCS_LoginOutGameServerRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_LoginOutGameServerRes*)[[[PBCS_LoginOutGameServerRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_LoginOutGameServerResBuilder*) builder {
  return [[PBCS_LoginOutGameServerResBuilder alloc] init];
}
+ (PBCS_LoginOutGameServerResBuilder*) builderWithPrototype:(PBCS_LoginOutGameServerRes*) prototype {
  return [[PBCS_LoginOutGameServerRes builder] mergeFrom:prototype];
}
- (PBCS_LoginOutGameServerResBuilder*) builder {
  return [PBCS_LoginOutGameServerRes builder];
}
- (PBCS_LoginOutGameServerResBuilder*) toBuilder {
  return [PBCS_LoginOutGameServerRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasRescode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rescode", self.rescode];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasRescode) {
    [dictionary setObject: self.rescode forKey: @"rescode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBCS_LoginOutGameServerRes class]]) {
    return NO;
  }
  PBCS_LoginOutGameServerRes *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasRescode == otherMessage.hasRescode &&
      (!self.hasRescode || [self.rescode isEqual:otherMessage.rescode]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasRescode) {
    hashCode = hashCode * 31 + [self.rescode hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCS_LoginOutGameServerResBuilder()
@property (strong) PBCS_LoginOutGameServerRes* resultPbcsLoginOutGameServerRes;
@end

@implementation PBCS_LoginOutGameServerResBuilder
@synthesize resultPbcsLoginOutGameServerRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcsLoginOutGameServerRes = [[PBCS_LoginOutGameServerRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcsLoginOutGameServerRes;
}
- (PBCS_LoginOutGameServerResBuilder*) clear {
  self.resultPbcsLoginOutGameServerRes = [[PBCS_LoginOutGameServerRes alloc] init];
  return self;
}
- (PBCS_LoginOutGameServerResBuilder*) clone {
  return [PBCS_LoginOutGameServerRes builderWithPrototype:resultPbcsLoginOutGameServerRes];
}
- (PBCS_LoginOutGameServerRes*) defaultInstance {
  return [PBCS_LoginOutGameServerRes defaultInstance];
}
- (PBCS_LoginOutGameServerRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCS_LoginOutGameServerRes*) buildPartial {
  PBCS_LoginOutGameServerRes* returnMe = resultPbcsLoginOutGameServerRes;
  self.resultPbcsLoginOutGameServerRes = nil;
  return returnMe;
}
- (PBCS_LoginOutGameServerResBuilder*) mergeFrom:(PBCS_LoginOutGameServerRes*) other {
  if (other == [PBCS_LoginOutGameServerRes defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasRescode) {
    [self setRescode:other.rescode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCS_LoginOutGameServerResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCS_LoginOutGameServerResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 26: {
        [self setRescode:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbcsLoginOutGameServerRes.hasSeqId;
}
- (UInt32) seqId {
  return resultPbcsLoginOutGameServerRes.seqId;
}
- (PBCS_LoginOutGameServerResBuilder*) setSeqId:(UInt32) value {
  resultPbcsLoginOutGameServerRes.hasSeqId = YES;
  resultPbcsLoginOutGameServerRes.seqId = value;
  return self;
}
- (PBCS_LoginOutGameServerResBuilder*) clearSeqId {
  resultPbcsLoginOutGameServerRes.hasSeqId = NO;
  resultPbcsLoginOutGameServerRes.seqId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbcsLoginOutGameServerRes.hasUid;
}
- (UInt32) uid {
  return resultPbcsLoginOutGameServerRes.uid;
}
- (PBCS_LoginOutGameServerResBuilder*) setUid:(UInt32) value {
  resultPbcsLoginOutGameServerRes.hasUid = YES;
  resultPbcsLoginOutGameServerRes.uid = value;
  return self;
}
- (PBCS_LoginOutGameServerResBuilder*) clearUid {
  resultPbcsLoginOutGameServerRes.hasUid = NO;
  resultPbcsLoginOutGameServerRes.uid = 0;
  return self;
}
- (BOOL) hasRescode {
  return resultPbcsLoginOutGameServerRes.hasRescode;
}
- (NSString*) rescode {
  return resultPbcsLoginOutGameServerRes.rescode;
}
- (PBCS_LoginOutGameServerResBuilder*) setRescode:(NSString*) value {
  resultPbcsLoginOutGameServerRes.hasRescode = YES;
  resultPbcsLoginOutGameServerRes.rescode = value;
  return self;
}
- (PBCS_LoginOutGameServerResBuilder*) clearRescode {
  resultPbcsLoginOutGameServerRes.hasRescode = NO;
  resultPbcsLoginOutGameServerRes.rescode = @"";
  return self;
}
@end

@interface PBCS_CreateRoomReq ()
@property UInt32 seqId;
@property UInt32 uid;
@property UInt32 roomType;
@property UInt32 rounds;
@property UInt32 playMask;
@property (strong) NSString* passwd;
@property (strong) NSString* extInfo;
@end

@implementation PBCS_CreateRoomReq

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasRoomType {
  return !!hasRoomType_;
}
- (void) setHasRoomType:(BOOL) _value_ {
  hasRoomType_ = !!_value_;
}
@synthesize roomType;
- (BOOL) hasRounds {
  return !!hasRounds_;
}
- (void) setHasRounds:(BOOL) _value_ {
  hasRounds_ = !!_value_;
}
@synthesize rounds;
- (BOOL) hasPlayMask {
  return !!hasPlayMask_;
}
- (void) setHasPlayMask:(BOOL) _value_ {
  hasPlayMask_ = !!_value_;
}
@synthesize playMask;
- (BOOL) hasPasswd {
  return !!hasPasswd_;
}
- (void) setHasPasswd:(BOOL) _value_ {
  hasPasswd_ = !!_value_;
}
@synthesize passwd;
- (BOOL) hasExtInfo {
  return !!hasExtInfo_;
}
- (void) setHasExtInfo:(BOOL) _value_ {
  hasExtInfo_ = !!_value_;
}
@synthesize extInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.uid = 0;
    self.roomType = 0;
    self.rounds = 0;
    self.playMask = 0;
    self.passwd = @"";
    self.extInfo = @"";
  }
  return self;
}
static PBCS_CreateRoomReq* defaultPBCS_CreateRoomReqInstance = nil;
+ (void) initialize {
  if (self == [PBCS_CreateRoomReq class]) {
    defaultPBCS_CreateRoomReqInstance = [[PBCS_CreateRoomReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCS_CreateRoomReqInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCS_CreateRoomReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasRoomType) {
    return NO;
  }
  if (!self.hasRounds) {
    return NO;
  }
  if (!self.hasPlayMask) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasUid) {
    [output writeUInt32:2 value:self.uid];
  }
  if (self.hasRoomType) {
    [output writeUInt32:3 value:self.roomType];
  }
  if (self.hasRounds) {
    [output writeUInt32:4 value:self.rounds];
  }
  if (self.hasPlayMask) {
    [output writeUInt32:5 value:self.playMask];
  }
  if (self.hasPasswd) {
    [output writeString:6 value:self.passwd];
  }
  if (self.hasExtInfo) {
    [output writeString:7 value:self.extInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(2, self.uid);
  }
  if (self.hasRoomType) {
    size_ += computeUInt32Size(3, self.roomType);
  }
  if (self.hasRounds) {
    size_ += computeUInt32Size(4, self.rounds);
  }
  if (self.hasPlayMask) {
    size_ += computeUInt32Size(5, self.playMask);
  }
  if (self.hasPasswd) {
    size_ += computeStringSize(6, self.passwd);
  }
  if (self.hasExtInfo) {
    size_ += computeStringSize(7, self.extInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBCS_CreateRoomReq*) parseFromData:(NSData*) data {
  return (PBCS_CreateRoomReq*)[[[PBCS_CreateRoomReq builder] mergeFromData:data] build];
}
+ (PBCS_CreateRoomReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_CreateRoomReq*)[[[PBCS_CreateRoomReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCS_CreateRoomReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBCS_CreateRoomReq*)[[[PBCS_CreateRoomReq builder] mergeFromInputStream:input] build];
}
+ (PBCS_CreateRoomReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_CreateRoomReq*)[[[PBCS_CreateRoomReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_CreateRoomReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCS_CreateRoomReq*)[[[PBCS_CreateRoomReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBCS_CreateRoomReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_CreateRoomReq*)[[[PBCS_CreateRoomReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_CreateRoomReqBuilder*) builder {
  return [[PBCS_CreateRoomReqBuilder alloc] init];
}
+ (PBCS_CreateRoomReqBuilder*) builderWithPrototype:(PBCS_CreateRoomReq*) prototype {
  return [[PBCS_CreateRoomReq builder] mergeFrom:prototype];
}
- (PBCS_CreateRoomReqBuilder*) builder {
  return [PBCS_CreateRoomReq builder];
}
- (PBCS_CreateRoomReqBuilder*) toBuilder {
  return [PBCS_CreateRoomReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasRoomType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomType", [NSNumber numberWithInteger:self.roomType]];
  }
  if (self.hasRounds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rounds", [NSNumber numberWithInteger:self.rounds]];
  }
  if (self.hasPlayMask) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playMask", [NSNumber numberWithInteger:self.playMask]];
  }
  if (self.hasPasswd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passwd", self.passwd];
  }
  if (self.hasExtInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"extInfo", self.extInfo];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasRoomType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomType] forKey: @"roomType"];
  }
  if (self.hasRounds) {
    [dictionary setObject: [NSNumber numberWithInteger:self.rounds] forKey: @"rounds"];
  }
  if (self.hasPlayMask) {
    [dictionary setObject: [NSNumber numberWithInteger:self.playMask] forKey: @"playMask"];
  }
  if (self.hasPasswd) {
    [dictionary setObject: self.passwd forKey: @"passwd"];
  }
  if (self.hasExtInfo) {
    [dictionary setObject: self.extInfo forKey: @"extInfo"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBCS_CreateRoomReq class]]) {
    return NO;
  }
  PBCS_CreateRoomReq *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasRoomType == otherMessage.hasRoomType &&
      (!self.hasRoomType || self.roomType == otherMessage.roomType) &&
      self.hasRounds == otherMessage.hasRounds &&
      (!self.hasRounds || self.rounds == otherMessage.rounds) &&
      self.hasPlayMask == otherMessage.hasPlayMask &&
      (!self.hasPlayMask || self.playMask == otherMessage.playMask) &&
      self.hasPasswd == otherMessage.hasPasswd &&
      (!self.hasPasswd || [self.passwd isEqual:otherMessage.passwd]) &&
      self.hasExtInfo == otherMessage.hasExtInfo &&
      (!self.hasExtInfo || [self.extInfo isEqual:otherMessage.extInfo]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasRoomType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomType] hash];
  }
  if (self.hasRounds) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rounds] hash];
  }
  if (self.hasPlayMask) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.playMask] hash];
  }
  if (self.hasPasswd) {
    hashCode = hashCode * 31 + [self.passwd hash];
  }
  if (self.hasExtInfo) {
    hashCode = hashCode * 31 + [self.extInfo hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCS_CreateRoomReqBuilder()
@property (strong) PBCS_CreateRoomReq* resultPbcsCreateRoomReq;
@end

@implementation PBCS_CreateRoomReqBuilder
@synthesize resultPbcsCreateRoomReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcsCreateRoomReq = [[PBCS_CreateRoomReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcsCreateRoomReq;
}
- (PBCS_CreateRoomReqBuilder*) clear {
  self.resultPbcsCreateRoomReq = [[PBCS_CreateRoomReq alloc] init];
  return self;
}
- (PBCS_CreateRoomReqBuilder*) clone {
  return [PBCS_CreateRoomReq builderWithPrototype:resultPbcsCreateRoomReq];
}
- (PBCS_CreateRoomReq*) defaultInstance {
  return [PBCS_CreateRoomReq defaultInstance];
}
- (PBCS_CreateRoomReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCS_CreateRoomReq*) buildPartial {
  PBCS_CreateRoomReq* returnMe = resultPbcsCreateRoomReq;
  self.resultPbcsCreateRoomReq = nil;
  return returnMe;
}
- (PBCS_CreateRoomReqBuilder*) mergeFrom:(PBCS_CreateRoomReq*) other {
  if (other == [PBCS_CreateRoomReq defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasRoomType) {
    [self setRoomType:other.roomType];
  }
  if (other.hasRounds) {
    [self setRounds:other.rounds];
  }
  if (other.hasPlayMask) {
    [self setPlayMask:other.playMask];
  }
  if (other.hasPasswd) {
    [self setPasswd:other.passwd];
  }
  if (other.hasExtInfo) {
    [self setExtInfo:other.extInfo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCS_CreateRoomReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCS_CreateRoomReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 24: {
        [self setRoomType:[input readUInt32]];
        break;
      }
      case 32: {
        [self setRounds:[input readUInt32]];
        break;
      }
      case 40: {
        [self setPlayMask:[input readUInt32]];
        break;
      }
      case 50: {
        [self setPasswd:[input readString]];
        break;
      }
      case 58: {
        [self setExtInfo:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbcsCreateRoomReq.hasSeqId;
}
- (UInt32) seqId {
  return resultPbcsCreateRoomReq.seqId;
}
- (PBCS_CreateRoomReqBuilder*) setSeqId:(UInt32) value {
  resultPbcsCreateRoomReq.hasSeqId = YES;
  resultPbcsCreateRoomReq.seqId = value;
  return self;
}
- (PBCS_CreateRoomReqBuilder*) clearSeqId {
  resultPbcsCreateRoomReq.hasSeqId = NO;
  resultPbcsCreateRoomReq.seqId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbcsCreateRoomReq.hasUid;
}
- (UInt32) uid {
  return resultPbcsCreateRoomReq.uid;
}
- (PBCS_CreateRoomReqBuilder*) setUid:(UInt32) value {
  resultPbcsCreateRoomReq.hasUid = YES;
  resultPbcsCreateRoomReq.uid = value;
  return self;
}
- (PBCS_CreateRoomReqBuilder*) clearUid {
  resultPbcsCreateRoomReq.hasUid = NO;
  resultPbcsCreateRoomReq.uid = 0;
  return self;
}
- (BOOL) hasRoomType {
  return resultPbcsCreateRoomReq.hasRoomType;
}
- (UInt32) roomType {
  return resultPbcsCreateRoomReq.roomType;
}
- (PBCS_CreateRoomReqBuilder*) setRoomType:(UInt32) value {
  resultPbcsCreateRoomReq.hasRoomType = YES;
  resultPbcsCreateRoomReq.roomType = value;
  return self;
}
- (PBCS_CreateRoomReqBuilder*) clearRoomType {
  resultPbcsCreateRoomReq.hasRoomType = NO;
  resultPbcsCreateRoomReq.roomType = 0;
  return self;
}
- (BOOL) hasRounds {
  return resultPbcsCreateRoomReq.hasRounds;
}
- (UInt32) rounds {
  return resultPbcsCreateRoomReq.rounds;
}
- (PBCS_CreateRoomReqBuilder*) setRounds:(UInt32) value {
  resultPbcsCreateRoomReq.hasRounds = YES;
  resultPbcsCreateRoomReq.rounds = value;
  return self;
}
- (PBCS_CreateRoomReqBuilder*) clearRounds {
  resultPbcsCreateRoomReq.hasRounds = NO;
  resultPbcsCreateRoomReq.rounds = 0;
  return self;
}
- (BOOL) hasPlayMask {
  return resultPbcsCreateRoomReq.hasPlayMask;
}
- (UInt32) playMask {
  return resultPbcsCreateRoomReq.playMask;
}
- (PBCS_CreateRoomReqBuilder*) setPlayMask:(UInt32) value {
  resultPbcsCreateRoomReq.hasPlayMask = YES;
  resultPbcsCreateRoomReq.playMask = value;
  return self;
}
- (PBCS_CreateRoomReqBuilder*) clearPlayMask {
  resultPbcsCreateRoomReq.hasPlayMask = NO;
  resultPbcsCreateRoomReq.playMask = 0;
  return self;
}
- (BOOL) hasPasswd {
  return resultPbcsCreateRoomReq.hasPasswd;
}
- (NSString*) passwd {
  return resultPbcsCreateRoomReq.passwd;
}
- (PBCS_CreateRoomReqBuilder*) setPasswd:(NSString*) value {
  resultPbcsCreateRoomReq.hasPasswd = YES;
  resultPbcsCreateRoomReq.passwd = value;
  return self;
}
- (PBCS_CreateRoomReqBuilder*) clearPasswd {
  resultPbcsCreateRoomReq.hasPasswd = NO;
  resultPbcsCreateRoomReq.passwd = @"";
  return self;
}
- (BOOL) hasExtInfo {
  return resultPbcsCreateRoomReq.hasExtInfo;
}
- (NSString*) extInfo {
  return resultPbcsCreateRoomReq.extInfo;
}
- (PBCS_CreateRoomReqBuilder*) setExtInfo:(NSString*) value {
  resultPbcsCreateRoomReq.hasExtInfo = YES;
  resultPbcsCreateRoomReq.extInfo = value;
  return self;
}
- (PBCS_CreateRoomReqBuilder*) clearExtInfo {
  resultPbcsCreateRoomReq.hasExtInfo = NO;
  resultPbcsCreateRoomReq.extInfo = @"";
  return self;
}
@end

@interface PBSC_CreateRoomRes ()
@property UInt32 seqId;
@property UInt32 uid;
@property UInt32 roomId;
@property UInt32 roomType;
@property UInt32 rounds;
@property UInt32 playMask;
@property UInt32 rescode;
@property (strong) NSString* extInfo;
@end

@implementation PBSC_CreateRoomRes

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasRoomType {
  return !!hasRoomType_;
}
- (void) setHasRoomType:(BOOL) _value_ {
  hasRoomType_ = !!_value_;
}
@synthesize roomType;
- (BOOL) hasRounds {
  return !!hasRounds_;
}
- (void) setHasRounds:(BOOL) _value_ {
  hasRounds_ = !!_value_;
}
@synthesize rounds;
- (BOOL) hasPlayMask {
  return !!hasPlayMask_;
}
- (void) setHasPlayMask:(BOOL) _value_ {
  hasPlayMask_ = !!_value_;
}
@synthesize playMask;
- (BOOL) hasRescode {
  return !!hasRescode_;
}
- (void) setHasRescode:(BOOL) _value_ {
  hasRescode_ = !!_value_;
}
@synthesize rescode;
- (BOOL) hasExtInfo {
  return !!hasExtInfo_;
}
- (void) setHasExtInfo:(BOOL) _value_ {
  hasExtInfo_ = !!_value_;
}
@synthesize extInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.uid = 0;
    self.roomId = 0;
    self.roomType = 0;
    self.rounds = 0;
    self.playMask = 0;
    self.rescode = 0;
    self.extInfo = @"";
  }
  return self;
}
static PBSC_CreateRoomRes* defaultPBSC_CreateRoomResInstance = nil;
+ (void) initialize {
  if (self == [PBSC_CreateRoomRes class]) {
    defaultPBSC_CreateRoomResInstance = [[PBSC_CreateRoomRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_CreateRoomResInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_CreateRoomResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasRoomType) {
    return NO;
  }
  if (!self.hasRounds) {
    return NO;
  }
  if (!self.hasPlayMask) {
    return NO;
  }
  if (!self.hasRescode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasUid) {
    [output writeUInt32:2 value:self.uid];
  }
  if (self.hasRoomId) {
    [output writeUInt32:3 value:self.roomId];
  }
  if (self.hasRoomType) {
    [output writeUInt32:4 value:self.roomType];
  }
  if (self.hasRounds) {
    [output writeUInt32:5 value:self.rounds];
  }
  if (self.hasPlayMask) {
    [output writeUInt32:6 value:self.playMask];
  }
  if (self.hasRescode) {
    [output writeUInt32:7 value:self.rescode];
  }
  if (self.hasExtInfo) {
    [output writeString:8 value:self.extInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(2, self.uid);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(3, self.roomId);
  }
  if (self.hasRoomType) {
    size_ += computeUInt32Size(4, self.roomType);
  }
  if (self.hasRounds) {
    size_ += computeUInt32Size(5, self.rounds);
  }
  if (self.hasPlayMask) {
    size_ += computeUInt32Size(6, self.playMask);
  }
  if (self.hasRescode) {
    size_ += computeUInt32Size(7, self.rescode);
  }
  if (self.hasExtInfo) {
    size_ += computeStringSize(8, self.extInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_CreateRoomRes*) parseFromData:(NSData*) data {
  return (PBSC_CreateRoomRes*)[[[PBSC_CreateRoomRes builder] mergeFromData:data] build];
}
+ (PBSC_CreateRoomRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_CreateRoomRes*)[[[PBSC_CreateRoomRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_CreateRoomRes*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_CreateRoomRes*)[[[PBSC_CreateRoomRes builder] mergeFromInputStream:input] build];
}
+ (PBSC_CreateRoomRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_CreateRoomRes*)[[[PBSC_CreateRoomRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_CreateRoomRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_CreateRoomRes*)[[[PBSC_CreateRoomRes builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_CreateRoomRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_CreateRoomRes*)[[[PBSC_CreateRoomRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_CreateRoomResBuilder*) builder {
  return [[PBSC_CreateRoomResBuilder alloc] init];
}
+ (PBSC_CreateRoomResBuilder*) builderWithPrototype:(PBSC_CreateRoomRes*) prototype {
  return [[PBSC_CreateRoomRes builder] mergeFrom:prototype];
}
- (PBSC_CreateRoomResBuilder*) builder {
  return [PBSC_CreateRoomRes builder];
}
- (PBSC_CreateRoomResBuilder*) toBuilder {
  return [PBSC_CreateRoomRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasRoomType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomType", [NSNumber numberWithInteger:self.roomType]];
  }
  if (self.hasRounds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rounds", [NSNumber numberWithInteger:self.rounds]];
  }
  if (self.hasPlayMask) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playMask", [NSNumber numberWithInteger:self.playMask]];
  }
  if (self.hasRescode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rescode", [NSNumber numberWithInteger:self.rescode]];
  }
  if (self.hasExtInfo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"extInfo", self.extInfo];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasRoomType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomType] forKey: @"roomType"];
  }
  if (self.hasRounds) {
    [dictionary setObject: [NSNumber numberWithInteger:self.rounds] forKey: @"rounds"];
  }
  if (self.hasPlayMask) {
    [dictionary setObject: [NSNumber numberWithInteger:self.playMask] forKey: @"playMask"];
  }
  if (self.hasRescode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.rescode] forKey: @"rescode"];
  }
  if (self.hasExtInfo) {
    [dictionary setObject: self.extInfo forKey: @"extInfo"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_CreateRoomRes class]]) {
    return NO;
  }
  PBSC_CreateRoomRes *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasRoomType == otherMessage.hasRoomType &&
      (!self.hasRoomType || self.roomType == otherMessage.roomType) &&
      self.hasRounds == otherMessage.hasRounds &&
      (!self.hasRounds || self.rounds == otherMessage.rounds) &&
      self.hasPlayMask == otherMessage.hasPlayMask &&
      (!self.hasPlayMask || self.playMask == otherMessage.playMask) &&
      self.hasRescode == otherMessage.hasRescode &&
      (!self.hasRescode || self.rescode == otherMessage.rescode) &&
      self.hasExtInfo == otherMessage.hasExtInfo &&
      (!self.hasExtInfo || [self.extInfo isEqual:otherMessage.extInfo]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasRoomType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomType] hash];
  }
  if (self.hasRounds) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rounds] hash];
  }
  if (self.hasPlayMask) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.playMask] hash];
  }
  if (self.hasRescode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rescode] hash];
  }
  if (self.hasExtInfo) {
    hashCode = hashCode * 31 + [self.extInfo hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_CreateRoomResBuilder()
@property (strong) PBSC_CreateRoomRes* resultPbscCreateRoomRes;
@end

@implementation PBSC_CreateRoomResBuilder
@synthesize resultPbscCreateRoomRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscCreateRoomRes = [[PBSC_CreateRoomRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscCreateRoomRes;
}
- (PBSC_CreateRoomResBuilder*) clear {
  self.resultPbscCreateRoomRes = [[PBSC_CreateRoomRes alloc] init];
  return self;
}
- (PBSC_CreateRoomResBuilder*) clone {
  return [PBSC_CreateRoomRes builderWithPrototype:resultPbscCreateRoomRes];
}
- (PBSC_CreateRoomRes*) defaultInstance {
  return [PBSC_CreateRoomRes defaultInstance];
}
- (PBSC_CreateRoomRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_CreateRoomRes*) buildPartial {
  PBSC_CreateRoomRes* returnMe = resultPbscCreateRoomRes;
  self.resultPbscCreateRoomRes = nil;
  return returnMe;
}
- (PBSC_CreateRoomResBuilder*) mergeFrom:(PBSC_CreateRoomRes*) other {
  if (other == [PBSC_CreateRoomRes defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasRoomType) {
    [self setRoomType:other.roomType];
  }
  if (other.hasRounds) {
    [self setRounds:other.rounds];
  }
  if (other.hasPlayMask) {
    [self setPlayMask:other.playMask];
  }
  if (other.hasRescode) {
    [self setRescode:other.rescode];
  }
  if (other.hasExtInfo) {
    [self setExtInfo:other.extInfo];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_CreateRoomResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_CreateRoomResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 24: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 32: {
        [self setRoomType:[input readUInt32]];
        break;
      }
      case 40: {
        [self setRounds:[input readUInt32]];
        break;
      }
      case 48: {
        [self setPlayMask:[input readUInt32]];
        break;
      }
      case 56: {
        [self setRescode:[input readUInt32]];
        break;
      }
      case 66: {
        [self setExtInfo:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbscCreateRoomRes.hasSeqId;
}
- (UInt32) seqId {
  return resultPbscCreateRoomRes.seqId;
}
- (PBSC_CreateRoomResBuilder*) setSeqId:(UInt32) value {
  resultPbscCreateRoomRes.hasSeqId = YES;
  resultPbscCreateRoomRes.seqId = value;
  return self;
}
- (PBSC_CreateRoomResBuilder*) clearSeqId {
  resultPbscCreateRoomRes.hasSeqId = NO;
  resultPbscCreateRoomRes.seqId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbscCreateRoomRes.hasUid;
}
- (UInt32) uid {
  return resultPbscCreateRoomRes.uid;
}
- (PBSC_CreateRoomResBuilder*) setUid:(UInt32) value {
  resultPbscCreateRoomRes.hasUid = YES;
  resultPbscCreateRoomRes.uid = value;
  return self;
}
- (PBSC_CreateRoomResBuilder*) clearUid {
  resultPbscCreateRoomRes.hasUid = NO;
  resultPbscCreateRoomRes.uid = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbscCreateRoomRes.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscCreateRoomRes.roomId;
}
- (PBSC_CreateRoomResBuilder*) setRoomId:(UInt32) value {
  resultPbscCreateRoomRes.hasRoomId = YES;
  resultPbscCreateRoomRes.roomId = value;
  return self;
}
- (PBSC_CreateRoomResBuilder*) clearRoomId {
  resultPbscCreateRoomRes.hasRoomId = NO;
  resultPbscCreateRoomRes.roomId = 0;
  return self;
}
- (BOOL) hasRoomType {
  return resultPbscCreateRoomRes.hasRoomType;
}
- (UInt32) roomType {
  return resultPbscCreateRoomRes.roomType;
}
- (PBSC_CreateRoomResBuilder*) setRoomType:(UInt32) value {
  resultPbscCreateRoomRes.hasRoomType = YES;
  resultPbscCreateRoomRes.roomType = value;
  return self;
}
- (PBSC_CreateRoomResBuilder*) clearRoomType {
  resultPbscCreateRoomRes.hasRoomType = NO;
  resultPbscCreateRoomRes.roomType = 0;
  return self;
}
- (BOOL) hasRounds {
  return resultPbscCreateRoomRes.hasRounds;
}
- (UInt32) rounds {
  return resultPbscCreateRoomRes.rounds;
}
- (PBSC_CreateRoomResBuilder*) setRounds:(UInt32) value {
  resultPbscCreateRoomRes.hasRounds = YES;
  resultPbscCreateRoomRes.rounds = value;
  return self;
}
- (PBSC_CreateRoomResBuilder*) clearRounds {
  resultPbscCreateRoomRes.hasRounds = NO;
  resultPbscCreateRoomRes.rounds = 0;
  return self;
}
- (BOOL) hasPlayMask {
  return resultPbscCreateRoomRes.hasPlayMask;
}
- (UInt32) playMask {
  return resultPbscCreateRoomRes.playMask;
}
- (PBSC_CreateRoomResBuilder*) setPlayMask:(UInt32) value {
  resultPbscCreateRoomRes.hasPlayMask = YES;
  resultPbscCreateRoomRes.playMask = value;
  return self;
}
- (PBSC_CreateRoomResBuilder*) clearPlayMask {
  resultPbscCreateRoomRes.hasPlayMask = NO;
  resultPbscCreateRoomRes.playMask = 0;
  return self;
}
- (BOOL) hasRescode {
  return resultPbscCreateRoomRes.hasRescode;
}
- (UInt32) rescode {
  return resultPbscCreateRoomRes.rescode;
}
- (PBSC_CreateRoomResBuilder*) setRescode:(UInt32) value {
  resultPbscCreateRoomRes.hasRescode = YES;
  resultPbscCreateRoomRes.rescode = value;
  return self;
}
- (PBSC_CreateRoomResBuilder*) clearRescode {
  resultPbscCreateRoomRes.hasRescode = NO;
  resultPbscCreateRoomRes.rescode = 0;
  return self;
}
- (BOOL) hasExtInfo {
  return resultPbscCreateRoomRes.hasExtInfo;
}
- (NSString*) extInfo {
  return resultPbscCreateRoomRes.extInfo;
}
- (PBSC_CreateRoomResBuilder*) setExtInfo:(NSString*) value {
  resultPbscCreateRoomRes.hasExtInfo = YES;
  resultPbscCreateRoomRes.extInfo = value;
  return self;
}
- (PBSC_CreateRoomResBuilder*) clearExtInfo {
  resultPbscCreateRoomRes.hasExtInfo = NO;
  resultPbscCreateRoomRes.extInfo = @"";
  return self;
}
@end

@interface PBCS_JoinRoomReq ()
@property UInt32 seqId;
@property UInt32 uid;
@property UInt32 roomId;
@property (strong) NSString* passwd;
@end

@implementation PBCS_JoinRoomReq

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasPasswd {
  return !!hasPasswd_;
}
- (void) setHasPasswd:(BOOL) _value_ {
  hasPasswd_ = !!_value_;
}
@synthesize passwd;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.uid = 0;
    self.roomId = 0;
    self.passwd = @"";
  }
  return self;
}
static PBCS_JoinRoomReq* defaultPBCS_JoinRoomReqInstance = nil;
+ (void) initialize {
  if (self == [PBCS_JoinRoomReq class]) {
    defaultPBCS_JoinRoomReqInstance = [[PBCS_JoinRoomReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCS_JoinRoomReqInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCS_JoinRoomReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasUid) {
    [output writeUInt32:2 value:self.uid];
  }
  if (self.hasRoomId) {
    [output writeUInt32:3 value:self.roomId];
  }
  if (self.hasPasswd) {
    [output writeString:4 value:self.passwd];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(2, self.uid);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(3, self.roomId);
  }
  if (self.hasPasswd) {
    size_ += computeStringSize(4, self.passwd);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBCS_JoinRoomReq*) parseFromData:(NSData*) data {
  return (PBCS_JoinRoomReq*)[[[PBCS_JoinRoomReq builder] mergeFromData:data] build];
}
+ (PBCS_JoinRoomReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_JoinRoomReq*)[[[PBCS_JoinRoomReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCS_JoinRoomReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBCS_JoinRoomReq*)[[[PBCS_JoinRoomReq builder] mergeFromInputStream:input] build];
}
+ (PBCS_JoinRoomReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_JoinRoomReq*)[[[PBCS_JoinRoomReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_JoinRoomReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCS_JoinRoomReq*)[[[PBCS_JoinRoomReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBCS_JoinRoomReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_JoinRoomReq*)[[[PBCS_JoinRoomReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_JoinRoomReqBuilder*) builder {
  return [[PBCS_JoinRoomReqBuilder alloc] init];
}
+ (PBCS_JoinRoomReqBuilder*) builderWithPrototype:(PBCS_JoinRoomReq*) prototype {
  return [[PBCS_JoinRoomReq builder] mergeFrom:prototype];
}
- (PBCS_JoinRoomReqBuilder*) builder {
  return [PBCS_JoinRoomReq builder];
}
- (PBCS_JoinRoomReqBuilder*) toBuilder {
  return [PBCS_JoinRoomReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasPasswd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"passwd", self.passwd];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasPasswd) {
    [dictionary setObject: self.passwd forKey: @"passwd"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBCS_JoinRoomReq class]]) {
    return NO;
  }
  PBCS_JoinRoomReq *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasPasswd == otherMessage.hasPasswd &&
      (!self.hasPasswd || [self.passwd isEqual:otherMessage.passwd]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasPasswd) {
    hashCode = hashCode * 31 + [self.passwd hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCS_JoinRoomReqBuilder()
@property (strong) PBCS_JoinRoomReq* resultPbcsJoinRoomReq;
@end

@implementation PBCS_JoinRoomReqBuilder
@synthesize resultPbcsJoinRoomReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcsJoinRoomReq = [[PBCS_JoinRoomReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcsJoinRoomReq;
}
- (PBCS_JoinRoomReqBuilder*) clear {
  self.resultPbcsJoinRoomReq = [[PBCS_JoinRoomReq alloc] init];
  return self;
}
- (PBCS_JoinRoomReqBuilder*) clone {
  return [PBCS_JoinRoomReq builderWithPrototype:resultPbcsJoinRoomReq];
}
- (PBCS_JoinRoomReq*) defaultInstance {
  return [PBCS_JoinRoomReq defaultInstance];
}
- (PBCS_JoinRoomReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCS_JoinRoomReq*) buildPartial {
  PBCS_JoinRoomReq* returnMe = resultPbcsJoinRoomReq;
  self.resultPbcsJoinRoomReq = nil;
  return returnMe;
}
- (PBCS_JoinRoomReqBuilder*) mergeFrom:(PBCS_JoinRoomReq*) other {
  if (other == [PBCS_JoinRoomReq defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasPasswd) {
    [self setPasswd:other.passwd];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCS_JoinRoomReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCS_JoinRoomReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 24: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 34: {
        [self setPasswd:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbcsJoinRoomReq.hasSeqId;
}
- (UInt32) seqId {
  return resultPbcsJoinRoomReq.seqId;
}
- (PBCS_JoinRoomReqBuilder*) setSeqId:(UInt32) value {
  resultPbcsJoinRoomReq.hasSeqId = YES;
  resultPbcsJoinRoomReq.seqId = value;
  return self;
}
- (PBCS_JoinRoomReqBuilder*) clearSeqId {
  resultPbcsJoinRoomReq.hasSeqId = NO;
  resultPbcsJoinRoomReq.seqId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbcsJoinRoomReq.hasUid;
}
- (UInt32) uid {
  return resultPbcsJoinRoomReq.uid;
}
- (PBCS_JoinRoomReqBuilder*) setUid:(UInt32) value {
  resultPbcsJoinRoomReq.hasUid = YES;
  resultPbcsJoinRoomReq.uid = value;
  return self;
}
- (PBCS_JoinRoomReqBuilder*) clearUid {
  resultPbcsJoinRoomReq.hasUid = NO;
  resultPbcsJoinRoomReq.uid = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbcsJoinRoomReq.hasRoomId;
}
- (UInt32) roomId {
  return resultPbcsJoinRoomReq.roomId;
}
- (PBCS_JoinRoomReqBuilder*) setRoomId:(UInt32) value {
  resultPbcsJoinRoomReq.hasRoomId = YES;
  resultPbcsJoinRoomReq.roomId = value;
  return self;
}
- (PBCS_JoinRoomReqBuilder*) clearRoomId {
  resultPbcsJoinRoomReq.hasRoomId = NO;
  resultPbcsJoinRoomReq.roomId = 0;
  return self;
}
- (BOOL) hasPasswd {
  return resultPbcsJoinRoomReq.hasPasswd;
}
- (NSString*) passwd {
  return resultPbcsJoinRoomReq.passwd;
}
- (PBCS_JoinRoomReqBuilder*) setPasswd:(NSString*) value {
  resultPbcsJoinRoomReq.hasPasswd = YES;
  resultPbcsJoinRoomReq.passwd = value;
  return self;
}
- (PBCS_JoinRoomReqBuilder*) clearPasswd {
  resultPbcsJoinRoomReq.hasPasswd = NO;
  resultPbcsJoinRoomReq.passwd = @"";
  return self;
}
@end

@interface PBSC_UserLeaveRoomNotify ()
@property UInt32 roomId;
@property UInt32 uid;
@property UInt32 reason;
@end

@implementation PBSC_UserLeaveRoomNotify

- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) _value_ {
  hasReason_ = !!_value_;
}
@synthesize reason;
- (instancetype) init {
  if ((self = [super init])) {
    self.roomId = 0;
    self.uid = 0;
    self.reason = 0;
  }
  return self;
}
static PBSC_UserLeaveRoomNotify* defaultPBSC_UserLeaveRoomNotifyInstance = nil;
+ (void) initialize {
  if (self == [PBSC_UserLeaveRoomNotify class]) {
    defaultPBSC_UserLeaveRoomNotifyInstance = [[PBSC_UserLeaveRoomNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_UserLeaveRoomNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_UserLeaveRoomNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasReason) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRoomId) {
    [output writeUInt32:1 value:self.roomId];
  }
  if (self.hasUid) {
    [output writeUInt32:2 value:self.uid];
  }
  if (self.hasReason) {
    [output writeUInt32:3 value:self.reason];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRoomId) {
    size_ += computeUInt32Size(1, self.roomId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(2, self.uid);
  }
  if (self.hasReason) {
    size_ += computeUInt32Size(3, self.reason);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_UserLeaveRoomNotify*) parseFromData:(NSData*) data {
  return (PBSC_UserLeaveRoomNotify*)[[[PBSC_UserLeaveRoomNotify builder] mergeFromData:data] build];
}
+ (PBSC_UserLeaveRoomNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserLeaveRoomNotify*)[[[PBSC_UserLeaveRoomNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserLeaveRoomNotify*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_UserLeaveRoomNotify*)[[[PBSC_UserLeaveRoomNotify builder] mergeFromInputStream:input] build];
}
+ (PBSC_UserLeaveRoomNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserLeaveRoomNotify*)[[[PBSC_UserLeaveRoomNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserLeaveRoomNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_UserLeaveRoomNotify*)[[[PBSC_UserLeaveRoomNotify builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_UserLeaveRoomNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserLeaveRoomNotify*)[[[PBSC_UserLeaveRoomNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserLeaveRoomNotifyBuilder*) builder {
  return [[PBSC_UserLeaveRoomNotifyBuilder alloc] init];
}
+ (PBSC_UserLeaveRoomNotifyBuilder*) builderWithPrototype:(PBSC_UserLeaveRoomNotify*) prototype {
  return [[PBSC_UserLeaveRoomNotify builder] mergeFrom:prototype];
}
- (PBSC_UserLeaveRoomNotifyBuilder*) builder {
  return [PBSC_UserLeaveRoomNotify builder];
}
- (PBSC_UserLeaveRoomNotifyBuilder*) toBuilder {
  return [PBSC_UserLeaveRoomNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", [NSNumber numberWithInteger:self.reason]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasReason) {
    [dictionary setObject: [NSNumber numberWithInteger:self.reason] forKey: @"reason"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_UserLeaveRoomNotify class]]) {
    return NO;
  }
  PBSC_UserLeaveRoomNotify *otherMessage = other;
  return
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || self.reason == otherMessage.reason) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.reason] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_UserLeaveRoomNotifyBuilder()
@property (strong) PBSC_UserLeaveRoomNotify* resultPbscUserLeaveRoomNotify;
@end

@implementation PBSC_UserLeaveRoomNotifyBuilder
@synthesize resultPbscUserLeaveRoomNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscUserLeaveRoomNotify = [[PBSC_UserLeaveRoomNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscUserLeaveRoomNotify;
}
- (PBSC_UserLeaveRoomNotifyBuilder*) clear {
  self.resultPbscUserLeaveRoomNotify = [[PBSC_UserLeaveRoomNotify alloc] init];
  return self;
}
- (PBSC_UserLeaveRoomNotifyBuilder*) clone {
  return [PBSC_UserLeaveRoomNotify builderWithPrototype:resultPbscUserLeaveRoomNotify];
}
- (PBSC_UserLeaveRoomNotify*) defaultInstance {
  return [PBSC_UserLeaveRoomNotify defaultInstance];
}
- (PBSC_UserLeaveRoomNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_UserLeaveRoomNotify*) buildPartial {
  PBSC_UserLeaveRoomNotify* returnMe = resultPbscUserLeaveRoomNotify;
  self.resultPbscUserLeaveRoomNotify = nil;
  return returnMe;
}
- (PBSC_UserLeaveRoomNotifyBuilder*) mergeFrom:(PBSC_UserLeaveRoomNotify*) other {
  if (other == [PBSC_UserLeaveRoomNotify defaultInstance]) {
    return self;
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_UserLeaveRoomNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_UserLeaveRoomNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 24: {
        [self setReason:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRoomId {
  return resultPbscUserLeaveRoomNotify.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscUserLeaveRoomNotify.roomId;
}
- (PBSC_UserLeaveRoomNotifyBuilder*) setRoomId:(UInt32) value {
  resultPbscUserLeaveRoomNotify.hasRoomId = YES;
  resultPbscUserLeaveRoomNotify.roomId = value;
  return self;
}
- (PBSC_UserLeaveRoomNotifyBuilder*) clearRoomId {
  resultPbscUserLeaveRoomNotify.hasRoomId = NO;
  resultPbscUserLeaveRoomNotify.roomId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbscUserLeaveRoomNotify.hasUid;
}
- (UInt32) uid {
  return resultPbscUserLeaveRoomNotify.uid;
}
- (PBSC_UserLeaveRoomNotifyBuilder*) setUid:(UInt32) value {
  resultPbscUserLeaveRoomNotify.hasUid = YES;
  resultPbscUserLeaveRoomNotify.uid = value;
  return self;
}
- (PBSC_UserLeaveRoomNotifyBuilder*) clearUid {
  resultPbscUserLeaveRoomNotify.hasUid = NO;
  resultPbscUserLeaveRoomNotify.uid = 0;
  return self;
}
- (BOOL) hasReason {
  return resultPbscUserLeaveRoomNotify.hasReason;
}
- (UInt32) reason {
  return resultPbscUserLeaveRoomNotify.reason;
}
- (PBSC_UserLeaveRoomNotifyBuilder*) setReason:(UInt32) value {
  resultPbscUserLeaveRoomNotify.hasReason = YES;
  resultPbscUserLeaveRoomNotify.reason = value;
  return self;
}
- (PBSC_UserLeaveRoomNotifyBuilder*) clearReason {
  resultPbscUserLeaveRoomNotify.hasReason = NO;
  resultPbscUserLeaveRoomNotify.reason = 0;
  return self;
}
@end

@interface PBSC_UserJoinRoomNotify ()
@property (strong) p_user_penhu_room* user;
@end

@implementation PBSC_UserJoinRoomNotify

- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (instancetype) init {
  if ((self = [super init])) {
    self.user = [p_user_penhu_room defaultInstance];
  }
  return self;
}
static PBSC_UserJoinRoomNotify* defaultPBSC_UserJoinRoomNotifyInstance = nil;
+ (void) initialize {
  if (self == [PBSC_UserJoinRoomNotify class]) {
    defaultPBSC_UserJoinRoomNotifyInstance = [[PBSC_UserJoinRoomNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_UserJoinRoomNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_UserJoinRoomNotifyInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUser) {
    return NO;
  }
  if (!self.user.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUser) {
    [output writeMessage:1 value:self.user];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUser) {
    size_ += computeMessageSize(1, self.user);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_UserJoinRoomNotify*) parseFromData:(NSData*) data {
  return (PBSC_UserJoinRoomNotify*)[[[PBSC_UserJoinRoomNotify builder] mergeFromData:data] build];
}
+ (PBSC_UserJoinRoomNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserJoinRoomNotify*)[[[PBSC_UserJoinRoomNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserJoinRoomNotify*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_UserJoinRoomNotify*)[[[PBSC_UserJoinRoomNotify builder] mergeFromInputStream:input] build];
}
+ (PBSC_UserJoinRoomNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserJoinRoomNotify*)[[[PBSC_UserJoinRoomNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserJoinRoomNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_UserJoinRoomNotify*)[[[PBSC_UserJoinRoomNotify builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_UserJoinRoomNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserJoinRoomNotify*)[[[PBSC_UserJoinRoomNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserJoinRoomNotifyBuilder*) builder {
  return [[PBSC_UserJoinRoomNotifyBuilder alloc] init];
}
+ (PBSC_UserJoinRoomNotifyBuilder*) builderWithPrototype:(PBSC_UserJoinRoomNotify*) prototype {
  return [[PBSC_UserJoinRoomNotify builder] mergeFrom:prototype];
}
- (PBSC_UserJoinRoomNotifyBuilder*) builder {
  return [PBSC_UserJoinRoomNotify builder];
}
- (PBSC_UserJoinRoomNotifyBuilder*) toBuilder {
  return [PBSC_UserJoinRoomNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUser) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.user storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"user"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_UserJoinRoomNotify class]]) {
    return NO;
  }
  PBSC_UserJoinRoomNotify *otherMessage = other;
  return
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_UserJoinRoomNotifyBuilder()
@property (strong) PBSC_UserJoinRoomNotify* resultPbscUserJoinRoomNotify;
@end

@implementation PBSC_UserJoinRoomNotifyBuilder
@synthesize resultPbscUserJoinRoomNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscUserJoinRoomNotify = [[PBSC_UserJoinRoomNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscUserJoinRoomNotify;
}
- (PBSC_UserJoinRoomNotifyBuilder*) clear {
  self.resultPbscUserJoinRoomNotify = [[PBSC_UserJoinRoomNotify alloc] init];
  return self;
}
- (PBSC_UserJoinRoomNotifyBuilder*) clone {
  return [PBSC_UserJoinRoomNotify builderWithPrototype:resultPbscUserJoinRoomNotify];
}
- (PBSC_UserJoinRoomNotify*) defaultInstance {
  return [PBSC_UserJoinRoomNotify defaultInstance];
}
- (PBSC_UserJoinRoomNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_UserJoinRoomNotify*) buildPartial {
  PBSC_UserJoinRoomNotify* returnMe = resultPbscUserJoinRoomNotify;
  self.resultPbscUserJoinRoomNotify = nil;
  return returnMe;
}
- (PBSC_UserJoinRoomNotifyBuilder*) mergeFrom:(PBSC_UserJoinRoomNotify*) other {
  if (other == [PBSC_UserJoinRoomNotify defaultInstance]) {
    return self;
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_UserJoinRoomNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_UserJoinRoomNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        p_user_penhu_roomBuilder* subBuilder = [p_user_penhu_room builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUser {
  return resultPbscUserJoinRoomNotify.hasUser;
}
- (p_user_penhu_room*) user {
  return resultPbscUserJoinRoomNotify.user;
}
- (PBSC_UserJoinRoomNotifyBuilder*) setUser:(p_user_penhu_room*) value {
  resultPbscUserJoinRoomNotify.hasUser = YES;
  resultPbscUserJoinRoomNotify.user = value;
  return self;
}
- (PBSC_UserJoinRoomNotifyBuilder*) setUserBuilder:(p_user_penhu_roomBuilder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (PBSC_UserJoinRoomNotifyBuilder*) mergeUser:(p_user_penhu_room*) value {
  if (resultPbscUserJoinRoomNotify.hasUser &&
      resultPbscUserJoinRoomNotify.user != [p_user_penhu_room defaultInstance]) {
    resultPbscUserJoinRoomNotify.user =
      [[[p_user_penhu_room builderWithPrototype:resultPbscUserJoinRoomNotify.user] mergeFrom:value] buildPartial];
  } else {
    resultPbscUserJoinRoomNotify.user = value;
  }
  resultPbscUserJoinRoomNotify.hasUser = YES;
  return self;
}
- (PBSC_UserJoinRoomNotifyBuilder*) clearUser {
  resultPbscUserJoinRoomNotify.hasUser = NO;
  resultPbscUserJoinRoomNotify.user = [p_user_penhu_room defaultInstance];
  return self;
}
@end

@interface PBCS_userRoomGamePreparedOk ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 uid;
@property UInt32 round;
@end

@implementation PBCS_userRoomGamePreparedOk

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasRound {
  return !!hasRound_;
}
- (void) setHasRound:(BOOL) _value_ {
  hasRound_ = !!_value_;
}
@synthesize round;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.uid = 0;
    self.round = 0;
  }
  return self;
}
static PBCS_userRoomGamePreparedOk* defaultPBCS_userRoomGamePreparedOkInstance = nil;
+ (void) initialize {
  if (self == [PBCS_userRoomGamePreparedOk class]) {
    defaultPBCS_userRoomGamePreparedOkInstance = [[PBCS_userRoomGamePreparedOk alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCS_userRoomGamePreparedOkInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCS_userRoomGamePreparedOkInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasRound) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasUid) {
    [output writeUInt32:3 value:self.uid];
  }
  if (self.hasRound) {
    [output writeUInt32:4 value:self.round];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(3, self.uid);
  }
  if (self.hasRound) {
    size_ += computeUInt32Size(4, self.round);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBCS_userRoomGamePreparedOk*) parseFromData:(NSData*) data {
  return (PBCS_userRoomGamePreparedOk*)[[[PBCS_userRoomGamePreparedOk builder] mergeFromData:data] build];
}
+ (PBCS_userRoomGamePreparedOk*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_userRoomGamePreparedOk*)[[[PBCS_userRoomGamePreparedOk builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCS_userRoomGamePreparedOk*) parseFromInputStream:(NSInputStream*) input {
  return (PBCS_userRoomGamePreparedOk*)[[[PBCS_userRoomGamePreparedOk builder] mergeFromInputStream:input] build];
}
+ (PBCS_userRoomGamePreparedOk*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_userRoomGamePreparedOk*)[[[PBCS_userRoomGamePreparedOk builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_userRoomGamePreparedOk*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCS_userRoomGamePreparedOk*)[[[PBCS_userRoomGamePreparedOk builder] mergeFromCodedInputStream:input] build];
}
+ (PBCS_userRoomGamePreparedOk*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_userRoomGamePreparedOk*)[[[PBCS_userRoomGamePreparedOk builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_userRoomGamePreparedOkBuilder*) builder {
  return [[PBCS_userRoomGamePreparedOkBuilder alloc] init];
}
+ (PBCS_userRoomGamePreparedOkBuilder*) builderWithPrototype:(PBCS_userRoomGamePreparedOk*) prototype {
  return [[PBCS_userRoomGamePreparedOk builder] mergeFrom:prototype];
}
- (PBCS_userRoomGamePreparedOkBuilder*) builder {
  return [PBCS_userRoomGamePreparedOk builder];
}
- (PBCS_userRoomGamePreparedOkBuilder*) toBuilder {
  return [PBCS_userRoomGamePreparedOk builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasRound) {
    [output appendFormat:@"%@%@: %@\n", indent, @"round", [NSNumber numberWithInteger:self.round]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasRound) {
    [dictionary setObject: [NSNumber numberWithInteger:self.round] forKey: @"round"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBCS_userRoomGamePreparedOk class]]) {
    return NO;
  }
  PBCS_userRoomGamePreparedOk *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasRound == otherMessage.hasRound &&
      (!self.hasRound || self.round == otherMessage.round) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasRound) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.round] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCS_userRoomGamePreparedOkBuilder()
@property (strong) PBCS_userRoomGamePreparedOk* resultPbcsUserRoomGamePreparedOk;
@end

@implementation PBCS_userRoomGamePreparedOkBuilder
@synthesize resultPbcsUserRoomGamePreparedOk;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcsUserRoomGamePreparedOk = [[PBCS_userRoomGamePreparedOk alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcsUserRoomGamePreparedOk;
}
- (PBCS_userRoomGamePreparedOkBuilder*) clear {
  self.resultPbcsUserRoomGamePreparedOk = [[PBCS_userRoomGamePreparedOk alloc] init];
  return self;
}
- (PBCS_userRoomGamePreparedOkBuilder*) clone {
  return [PBCS_userRoomGamePreparedOk builderWithPrototype:resultPbcsUserRoomGamePreparedOk];
}
- (PBCS_userRoomGamePreparedOk*) defaultInstance {
  return [PBCS_userRoomGamePreparedOk defaultInstance];
}
- (PBCS_userRoomGamePreparedOk*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCS_userRoomGamePreparedOk*) buildPartial {
  PBCS_userRoomGamePreparedOk* returnMe = resultPbcsUserRoomGamePreparedOk;
  self.resultPbcsUserRoomGamePreparedOk = nil;
  return returnMe;
}
- (PBCS_userRoomGamePreparedOkBuilder*) mergeFrom:(PBCS_userRoomGamePreparedOk*) other {
  if (other == [PBCS_userRoomGamePreparedOk defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasRound) {
    [self setRound:other.round];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCS_userRoomGamePreparedOkBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCS_userRoomGamePreparedOkBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setRound:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbcsUserRoomGamePreparedOk.hasSeqId;
}
- (UInt32) seqId {
  return resultPbcsUserRoomGamePreparedOk.seqId;
}
- (PBCS_userRoomGamePreparedOkBuilder*) setSeqId:(UInt32) value {
  resultPbcsUserRoomGamePreparedOk.hasSeqId = YES;
  resultPbcsUserRoomGamePreparedOk.seqId = value;
  return self;
}
- (PBCS_userRoomGamePreparedOkBuilder*) clearSeqId {
  resultPbcsUserRoomGamePreparedOk.hasSeqId = NO;
  resultPbcsUserRoomGamePreparedOk.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbcsUserRoomGamePreparedOk.hasRoomId;
}
- (UInt32) roomId {
  return resultPbcsUserRoomGamePreparedOk.roomId;
}
- (PBCS_userRoomGamePreparedOkBuilder*) setRoomId:(UInt32) value {
  resultPbcsUserRoomGamePreparedOk.hasRoomId = YES;
  resultPbcsUserRoomGamePreparedOk.roomId = value;
  return self;
}
- (PBCS_userRoomGamePreparedOkBuilder*) clearRoomId {
  resultPbcsUserRoomGamePreparedOk.hasRoomId = NO;
  resultPbcsUserRoomGamePreparedOk.roomId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbcsUserRoomGamePreparedOk.hasUid;
}
- (UInt32) uid {
  return resultPbcsUserRoomGamePreparedOk.uid;
}
- (PBCS_userRoomGamePreparedOkBuilder*) setUid:(UInt32) value {
  resultPbcsUserRoomGamePreparedOk.hasUid = YES;
  resultPbcsUserRoomGamePreparedOk.uid = value;
  return self;
}
- (PBCS_userRoomGamePreparedOkBuilder*) clearUid {
  resultPbcsUserRoomGamePreparedOk.hasUid = NO;
  resultPbcsUserRoomGamePreparedOk.uid = 0;
  return self;
}
- (BOOL) hasRound {
  return resultPbcsUserRoomGamePreparedOk.hasRound;
}
- (UInt32) round {
  return resultPbcsUserRoomGamePreparedOk.round;
}
- (PBCS_userRoomGamePreparedOkBuilder*) setRound:(UInt32) value {
  resultPbcsUserRoomGamePreparedOk.hasRound = YES;
  resultPbcsUserRoomGamePreparedOk.round = value;
  return self;
}
- (PBCS_userRoomGamePreparedOkBuilder*) clearRound {
  resultPbcsUserRoomGamePreparedOk.hasRound = NO;
  resultPbcsUserRoomGamePreparedOk.round = 0;
  return self;
}
@end

@interface PBSC_userRoomGamePreparedOkRes ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 uid;
@property UInt32 rescode;
@end

@implementation PBSC_userRoomGamePreparedOkRes

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasRescode {
  return !!hasRescode_;
}
- (void) setHasRescode:(BOOL) _value_ {
  hasRescode_ = !!_value_;
}
@synthesize rescode;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.uid = 0;
    self.rescode = 0;
  }
  return self;
}
static PBSC_userRoomGamePreparedOkRes* defaultPBSC_userRoomGamePreparedOkResInstance = nil;
+ (void) initialize {
  if (self == [PBSC_userRoomGamePreparedOkRes class]) {
    defaultPBSC_userRoomGamePreparedOkResInstance = [[PBSC_userRoomGamePreparedOkRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_userRoomGamePreparedOkResInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_userRoomGamePreparedOkResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasRescode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasUid) {
    [output writeUInt32:3 value:self.uid];
  }
  if (self.hasRescode) {
    [output writeUInt32:4 value:self.rescode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(3, self.uid);
  }
  if (self.hasRescode) {
    size_ += computeUInt32Size(4, self.rescode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_userRoomGamePreparedOkRes*) parseFromData:(NSData*) data {
  return (PBSC_userRoomGamePreparedOkRes*)[[[PBSC_userRoomGamePreparedOkRes builder] mergeFromData:data] build];
}
+ (PBSC_userRoomGamePreparedOkRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_userRoomGamePreparedOkRes*)[[[PBSC_userRoomGamePreparedOkRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_userRoomGamePreparedOkRes*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_userRoomGamePreparedOkRes*)[[[PBSC_userRoomGamePreparedOkRes builder] mergeFromInputStream:input] build];
}
+ (PBSC_userRoomGamePreparedOkRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_userRoomGamePreparedOkRes*)[[[PBSC_userRoomGamePreparedOkRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_userRoomGamePreparedOkRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_userRoomGamePreparedOkRes*)[[[PBSC_userRoomGamePreparedOkRes builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_userRoomGamePreparedOkRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_userRoomGamePreparedOkRes*)[[[PBSC_userRoomGamePreparedOkRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_userRoomGamePreparedOkResBuilder*) builder {
  return [[PBSC_userRoomGamePreparedOkResBuilder alloc] init];
}
+ (PBSC_userRoomGamePreparedOkResBuilder*) builderWithPrototype:(PBSC_userRoomGamePreparedOkRes*) prototype {
  return [[PBSC_userRoomGamePreparedOkRes builder] mergeFrom:prototype];
}
- (PBSC_userRoomGamePreparedOkResBuilder*) builder {
  return [PBSC_userRoomGamePreparedOkRes builder];
}
- (PBSC_userRoomGamePreparedOkResBuilder*) toBuilder {
  return [PBSC_userRoomGamePreparedOkRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasRescode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rescode", [NSNumber numberWithInteger:self.rescode]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasRescode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.rescode] forKey: @"rescode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_userRoomGamePreparedOkRes class]]) {
    return NO;
  }
  PBSC_userRoomGamePreparedOkRes *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasRescode == otherMessage.hasRescode &&
      (!self.hasRescode || self.rescode == otherMessage.rescode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasRescode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rescode] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_userRoomGamePreparedOkResBuilder()
@property (strong) PBSC_userRoomGamePreparedOkRes* resultPbscUserRoomGamePreparedOkRes;
@end

@implementation PBSC_userRoomGamePreparedOkResBuilder
@synthesize resultPbscUserRoomGamePreparedOkRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscUserRoomGamePreparedOkRes = [[PBSC_userRoomGamePreparedOkRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscUserRoomGamePreparedOkRes;
}
- (PBSC_userRoomGamePreparedOkResBuilder*) clear {
  self.resultPbscUserRoomGamePreparedOkRes = [[PBSC_userRoomGamePreparedOkRes alloc] init];
  return self;
}
- (PBSC_userRoomGamePreparedOkResBuilder*) clone {
  return [PBSC_userRoomGamePreparedOkRes builderWithPrototype:resultPbscUserRoomGamePreparedOkRes];
}
- (PBSC_userRoomGamePreparedOkRes*) defaultInstance {
  return [PBSC_userRoomGamePreparedOkRes defaultInstance];
}
- (PBSC_userRoomGamePreparedOkRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_userRoomGamePreparedOkRes*) buildPartial {
  PBSC_userRoomGamePreparedOkRes* returnMe = resultPbscUserRoomGamePreparedOkRes;
  self.resultPbscUserRoomGamePreparedOkRes = nil;
  return returnMe;
}
- (PBSC_userRoomGamePreparedOkResBuilder*) mergeFrom:(PBSC_userRoomGamePreparedOkRes*) other {
  if (other == [PBSC_userRoomGamePreparedOkRes defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasRescode) {
    [self setRescode:other.rescode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_userRoomGamePreparedOkResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_userRoomGamePreparedOkResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setRescode:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbscUserRoomGamePreparedOkRes.hasSeqId;
}
- (UInt32) seqId {
  return resultPbscUserRoomGamePreparedOkRes.seqId;
}
- (PBSC_userRoomGamePreparedOkResBuilder*) setSeqId:(UInt32) value {
  resultPbscUserRoomGamePreparedOkRes.hasSeqId = YES;
  resultPbscUserRoomGamePreparedOkRes.seqId = value;
  return self;
}
- (PBSC_userRoomGamePreparedOkResBuilder*) clearSeqId {
  resultPbscUserRoomGamePreparedOkRes.hasSeqId = NO;
  resultPbscUserRoomGamePreparedOkRes.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbscUserRoomGamePreparedOkRes.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscUserRoomGamePreparedOkRes.roomId;
}
- (PBSC_userRoomGamePreparedOkResBuilder*) setRoomId:(UInt32) value {
  resultPbscUserRoomGamePreparedOkRes.hasRoomId = YES;
  resultPbscUserRoomGamePreparedOkRes.roomId = value;
  return self;
}
- (PBSC_userRoomGamePreparedOkResBuilder*) clearRoomId {
  resultPbscUserRoomGamePreparedOkRes.hasRoomId = NO;
  resultPbscUserRoomGamePreparedOkRes.roomId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbscUserRoomGamePreparedOkRes.hasUid;
}
- (UInt32) uid {
  return resultPbscUserRoomGamePreparedOkRes.uid;
}
- (PBSC_userRoomGamePreparedOkResBuilder*) setUid:(UInt32) value {
  resultPbscUserRoomGamePreparedOkRes.hasUid = YES;
  resultPbscUserRoomGamePreparedOkRes.uid = value;
  return self;
}
- (PBSC_userRoomGamePreparedOkResBuilder*) clearUid {
  resultPbscUserRoomGamePreparedOkRes.hasUid = NO;
  resultPbscUserRoomGamePreparedOkRes.uid = 0;
  return self;
}
- (BOOL) hasRescode {
  return resultPbscUserRoomGamePreparedOkRes.hasRescode;
}
- (UInt32) rescode {
  return resultPbscUserRoomGamePreparedOkRes.rescode;
}
- (PBSC_userRoomGamePreparedOkResBuilder*) setRescode:(UInt32) value {
  resultPbscUserRoomGamePreparedOkRes.hasRescode = YES;
  resultPbscUserRoomGamePreparedOkRes.rescode = value;
  return self;
}
- (PBSC_userRoomGamePreparedOkResBuilder*) clearRescode {
  resultPbscUserRoomGamePreparedOkRes.hasRescode = NO;
  resultPbscUserRoomGamePreparedOkRes.rescode = 0;
  return self;
}
@end

@interface PBtagWeaveItem ()
@property (strong) PBAppendableArray * cardsArray;
@property UInt32 cbCenterCard;
@property SInt32 combinationType;
@property UInt32 contributorUid;
@end

@implementation PBtagWeaveItem

@synthesize cardsArray;
@dynamic cards;
- (BOOL) hasCbCenterCard {
  return !!hasCbCenterCard_;
}
- (void) setHasCbCenterCard:(BOOL) _value_ {
  hasCbCenterCard_ = !!_value_;
}
@synthesize cbCenterCard;
- (BOOL) hasCombinationType {
  return !!hasCombinationType_;
}
- (void) setHasCombinationType:(BOOL) _value_ {
  hasCombinationType_ = !!_value_;
}
@synthesize combinationType;
- (BOOL) hasContributorUid {
  return !!hasContributorUid_;
}
- (void) setHasContributorUid:(BOOL) _value_ {
  hasContributorUid_ = !!_value_;
}
@synthesize contributorUid;
- (instancetype) init {
  if ((self = [super init])) {
    self.cbCenterCard = 0;
    self.combinationType = 0;
    self.contributorUid = 0;
  }
  return self;
}
static PBtagWeaveItem* defaultPBtagWeaveItemInstance = nil;
+ (void) initialize {
  if (self == [PBtagWeaveItem class]) {
    defaultPBtagWeaveItemInstance = [[PBtagWeaveItem alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBtagWeaveItemInstance;
}
- (instancetype) defaultInstance {
  return defaultPBtagWeaveItemInstance;
}
- (PBArray *)cards {
  return cardsArray;
}
- (UInt32)cardsAtIndex:(NSUInteger)index {
  return [cardsArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasCombinationType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  const NSUInteger cardsArrayCount = self.cardsArray.count;
  if (cardsArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.cardsArray.data;
    for (NSUInteger i = 0; i < cardsArrayCount; ++i) {
      [output writeUInt32:1 value:values[i]];
    }
  }
  if (self.hasCbCenterCard) {
    [output writeUInt32:2 value:self.cbCenterCard];
  }
  if (self.hasCombinationType) {
    [output writeInt32:3 value:self.combinationType];
  }
  if (self.hasContributorUid) {
    [output writeUInt32:4 value:self.contributorUid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.cardsArray.count;
    const UInt32 *values = (const UInt32 *)self.cardsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasCbCenterCard) {
    size_ += computeUInt32Size(2, self.cbCenterCard);
  }
  if (self.hasCombinationType) {
    size_ += computeInt32Size(3, self.combinationType);
  }
  if (self.hasContributorUid) {
    size_ += computeUInt32Size(4, self.contributorUid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBtagWeaveItem*) parseFromData:(NSData*) data {
  return (PBtagWeaveItem*)[[[PBtagWeaveItem builder] mergeFromData:data] build];
}
+ (PBtagWeaveItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBtagWeaveItem*)[[[PBtagWeaveItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBtagWeaveItem*) parseFromInputStream:(NSInputStream*) input {
  return (PBtagWeaveItem*)[[[PBtagWeaveItem builder] mergeFromInputStream:input] build];
}
+ (PBtagWeaveItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBtagWeaveItem*)[[[PBtagWeaveItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBtagWeaveItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBtagWeaveItem*)[[[PBtagWeaveItem builder] mergeFromCodedInputStream:input] build];
}
+ (PBtagWeaveItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBtagWeaveItem*)[[[PBtagWeaveItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBtagWeaveItemBuilder*) builder {
  return [[PBtagWeaveItemBuilder alloc] init];
}
+ (PBtagWeaveItemBuilder*) builderWithPrototype:(PBtagWeaveItem*) prototype {
  return [[PBtagWeaveItem builder] mergeFrom:prototype];
}
- (PBtagWeaveItemBuilder*) builder {
  return [PBtagWeaveItem builder];
}
- (PBtagWeaveItemBuilder*) toBuilder {
  return [PBtagWeaveItem builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.cardsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cards", obj];
  }];
  if (self.hasCbCenterCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cbCenterCard", [NSNumber numberWithInteger:self.cbCenterCard]];
  }
  if (self.hasCombinationType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"combinationType", [NSNumber numberWithInteger:self.combinationType]];
  }
  if (self.hasContributorUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"contributorUid", [NSNumber numberWithInteger:self.contributorUid]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  NSMutableArray * cardsArrayArray = [NSMutableArray new];
  NSUInteger cardsArrayCount=self.cardsArray.count;
  for(int i=0;i<cardsArrayCount;i++){
    [cardsArrayArray addObject: @([self.cardsArray uint32AtIndex:i])];
  }
  [dictionary setObject: cardsArrayArray forKey: @"cards"];
  if (self.hasCbCenterCard) {
    [dictionary setObject: [NSNumber numberWithInteger:self.cbCenterCard] forKey: @"cbCenterCard"];
  }
  if (self.hasCombinationType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.combinationType] forKey: @"combinationType"];
  }
  if (self.hasContributorUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.contributorUid] forKey: @"contributorUid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBtagWeaveItem class]]) {
    return NO;
  }
  PBtagWeaveItem *otherMessage = other;
  return
      [self.cardsArray isEqualToArray:otherMessage.cardsArray] &&
      self.hasCbCenterCard == otherMessage.hasCbCenterCard &&
      (!self.hasCbCenterCard || self.cbCenterCard == otherMessage.cbCenterCard) &&
      self.hasCombinationType == otherMessage.hasCombinationType &&
      (!self.hasCombinationType || self.combinationType == otherMessage.combinationType) &&
      self.hasContributorUid == otherMessage.hasContributorUid &&
      (!self.hasContributorUid || self.contributorUid == otherMessage.contributorUid) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.cardsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasCbCenterCard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cbCenterCard] hash];
  }
  if (self.hasCombinationType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.combinationType] hash];
  }
  if (self.hasContributorUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.contributorUid] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBtagWeaveItemBuilder()
@property (strong) PBtagWeaveItem* resultPbtagWeaveItem;
@end

@implementation PBtagWeaveItemBuilder
@synthesize resultPbtagWeaveItem;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbtagWeaveItem = [[PBtagWeaveItem alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbtagWeaveItem;
}
- (PBtagWeaveItemBuilder*) clear {
  self.resultPbtagWeaveItem = [[PBtagWeaveItem alloc] init];
  return self;
}
- (PBtagWeaveItemBuilder*) clone {
  return [PBtagWeaveItem builderWithPrototype:resultPbtagWeaveItem];
}
- (PBtagWeaveItem*) defaultInstance {
  return [PBtagWeaveItem defaultInstance];
}
- (PBtagWeaveItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBtagWeaveItem*) buildPartial {
  PBtagWeaveItem* returnMe = resultPbtagWeaveItem;
  self.resultPbtagWeaveItem = nil;
  return returnMe;
}
- (PBtagWeaveItemBuilder*) mergeFrom:(PBtagWeaveItem*) other {
  if (other == [PBtagWeaveItem defaultInstance]) {
    return self;
  }
  if (other.cardsArray.count > 0) {
    if (resultPbtagWeaveItem.cardsArray == nil) {
      resultPbtagWeaveItem.cardsArray = [other.cardsArray copy];
    } else {
      [resultPbtagWeaveItem.cardsArray appendArray:other.cardsArray];
    }
  }
  if (other.hasCbCenterCard) {
    [self setCbCenterCard:other.cbCenterCard];
  }
  if (other.hasCombinationType) {
    [self setCombinationType:other.combinationType];
  }
  if (other.hasContributorUid) {
    [self setContributorUid:other.contributorUid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBtagWeaveItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBtagWeaveItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self addCards:[input readUInt32]];
        break;
      }
      case 16: {
        [self setCbCenterCard:[input readUInt32]];
        break;
      }
      case 24: {
        [self setCombinationType:[input readInt32]];
        break;
      }
      case 32: {
        [self setContributorUid:[input readUInt32]];
        break;
      }
    }
  }
}
- (PBAppendableArray *)cards {
  return resultPbtagWeaveItem.cardsArray;
}
- (UInt32)cardsAtIndex:(NSUInteger)index {
  return [resultPbtagWeaveItem cardsAtIndex:index];
}
- (PBtagWeaveItemBuilder *)addCards:(UInt32)value {
  if (resultPbtagWeaveItem.cardsArray == nil) {
    resultPbtagWeaveItem.cardsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultPbtagWeaveItem.cardsArray addUint32:value];
  return self;
}
- (PBtagWeaveItemBuilder *)setCardsArray:(NSArray *)array {
  resultPbtagWeaveItem.cardsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (PBtagWeaveItemBuilder *)setCardsValues:(const UInt32 *)values count:(NSUInteger)count {
  resultPbtagWeaveItem.cardsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (PBtagWeaveItemBuilder *)clearCards {
  resultPbtagWeaveItem.cardsArray = nil;
  return self;
}
- (BOOL) hasCbCenterCard {
  return resultPbtagWeaveItem.hasCbCenterCard;
}
- (UInt32) cbCenterCard {
  return resultPbtagWeaveItem.cbCenterCard;
}
- (PBtagWeaveItemBuilder*) setCbCenterCard:(UInt32) value {
  resultPbtagWeaveItem.hasCbCenterCard = YES;
  resultPbtagWeaveItem.cbCenterCard = value;
  return self;
}
- (PBtagWeaveItemBuilder*) clearCbCenterCard {
  resultPbtagWeaveItem.hasCbCenterCard = NO;
  resultPbtagWeaveItem.cbCenterCard = 0;
  return self;
}
- (BOOL) hasCombinationType {
  return resultPbtagWeaveItem.hasCombinationType;
}
- (SInt32) combinationType {
  return resultPbtagWeaveItem.combinationType;
}
- (PBtagWeaveItemBuilder*) setCombinationType:(SInt32) value {
  resultPbtagWeaveItem.hasCombinationType = YES;
  resultPbtagWeaveItem.combinationType = value;
  return self;
}
- (PBtagWeaveItemBuilder*) clearCombinationType {
  resultPbtagWeaveItem.hasCombinationType = NO;
  resultPbtagWeaveItem.combinationType = 0;
  return self;
}
- (BOOL) hasContributorUid {
  return resultPbtagWeaveItem.hasContributorUid;
}
- (UInt32) contributorUid {
  return resultPbtagWeaveItem.contributorUid;
}
- (PBtagWeaveItemBuilder*) setContributorUid:(UInt32) value {
  resultPbtagWeaveItem.hasContributorUid = YES;
  resultPbtagWeaveItem.contributorUid = value;
  return self;
}
- (PBtagWeaveItemBuilder*) clearContributorUid {
  resultPbtagWeaveItem.hasContributorUid = NO;
  resultPbtagWeaveItem.contributorUid = 0;
  return self;
}
@end

@interface p_user_penhu_room ()
@property UInt32 position;
@property UInt32 uid;
@property (strong) NSString* name;
@property (strong) NSString* headFrame;
@property (strong) NSString* headIcon;
@property UInt32 sex;
@property (strong) NSString* ip;
@property SInt32 curRoundPoint;
@property SInt32 totalPoint;
@property UInt32 status;
@property (strong) PBAppendableArray * preCardsArray;
@property (strong) NSMutableArray<PBtagWeaveItem*> * cardsInTableArray;
@property UInt32 saoCount;
@end

@implementation p_user_penhu_room

- (BOOL) hasPosition {
  return !!hasPosition_;
}
- (void) setHasPosition:(BOOL) _value_ {
  hasPosition_ = !!_value_;
}
@synthesize position;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasHeadFrame {
  return !!hasHeadFrame_;
}
- (void) setHasHeadFrame:(BOOL) _value_ {
  hasHeadFrame_ = !!_value_;
}
@synthesize headFrame;
- (BOOL) hasHeadIcon {
  return !!hasHeadIcon_;
}
- (void) setHasHeadIcon:(BOOL) _value_ {
  hasHeadIcon_ = !!_value_;
}
@synthesize headIcon;
- (BOOL) hasSex {
  return !!hasSex_;
}
- (void) setHasSex:(BOOL) _value_ {
  hasSex_ = !!_value_;
}
@synthesize sex;
- (BOOL) hasIp {
  return !!hasIp_;
}
- (void) setHasIp:(BOOL) _value_ {
  hasIp_ = !!_value_;
}
@synthesize ip;
- (BOOL) hasCurRoundPoint {
  return !!hasCurRoundPoint_;
}
- (void) setHasCurRoundPoint:(BOOL) _value_ {
  hasCurRoundPoint_ = !!_value_;
}
@synthesize curRoundPoint;
- (BOOL) hasTotalPoint {
  return !!hasTotalPoint_;
}
- (void) setHasTotalPoint:(BOOL) _value_ {
  hasTotalPoint_ = !!_value_;
}
@synthesize totalPoint;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) _value_ {
  hasStatus_ = !!_value_;
}
@synthesize status;
@synthesize preCardsArray;
@dynamic preCards;
@synthesize cardsInTableArray;
@dynamic cardsInTable;
- (BOOL) hasSaoCount {
  return !!hasSaoCount_;
}
- (void) setHasSaoCount:(BOOL) _value_ {
  hasSaoCount_ = !!_value_;
}
@synthesize saoCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.position = 0;
    self.uid = 0;
    self.name = @"";
    self.headFrame = @"";
    self.headIcon = @"";
    self.sex = 0;
    self.ip = @"";
    self.curRoundPoint = 0;
    self.totalPoint = 0;
    self.status = 0;
    self.saoCount = 0;
  }
  return self;
}
static p_user_penhu_room* defaultp_user_penhu_roomInstance = nil;
+ (void) initialize {
  if (self == [p_user_penhu_room class]) {
    defaultp_user_penhu_roomInstance = [[p_user_penhu_room alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultp_user_penhu_roomInstance;
}
- (instancetype) defaultInstance {
  return defaultp_user_penhu_roomInstance;
}
- (PBArray *)preCards {
  return preCardsArray;
}
- (UInt32)preCardsAtIndex:(NSUInteger)index {
  return [preCardsArray uint32AtIndex:index];
}
- (NSArray<PBtagWeaveItem*> *)cardsInTable {
  return cardsInTableArray;
}
- (PBtagWeaveItem*)cardsInTableAtIndex:(NSUInteger)index {
  return [cardsInTableArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasPosition) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  __block BOOL isInitcardsInTable = YES;
   [self.cardsInTable enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcardsInTable = NO;
      *stop = YES;
    }
  }];
  if (!isInitcardsInTable) return isInitcardsInTable;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPosition) {
    [output writeUInt32:1 value:self.position];
  }
  if (self.hasUid) {
    [output writeUInt32:2 value:self.uid];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasHeadFrame) {
    [output writeString:4 value:self.headFrame];
  }
  if (self.hasHeadIcon) {
    [output writeString:5 value:self.headIcon];
  }
  if (self.hasSex) {
    [output writeUInt32:6 value:self.sex];
  }
  if (self.hasIp) {
    [output writeString:7 value:self.ip];
  }
  if (self.hasCurRoundPoint) {
    [output writeInt32:8 value:self.curRoundPoint];
  }
  if (self.hasTotalPoint) {
    [output writeInt32:9 value:self.totalPoint];
  }
  if (self.hasStatus) {
    [output writeUInt32:10 value:self.status];
  }
  const NSUInteger preCardsArrayCount = self.preCardsArray.count;
  if (preCardsArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.preCardsArray.data;
    for (NSUInteger i = 0; i < preCardsArrayCount; ++i) {
      [output writeUInt32:11 value:values[i]];
    }
  }
  [self.cardsInTableArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:12 value:element];
  }];
  if (self.hasSaoCount) {
    [output writeUInt32:13 value:self.saoCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPosition) {
    size_ += computeUInt32Size(1, self.position);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(2, self.uid);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  if (self.hasHeadFrame) {
    size_ += computeStringSize(4, self.headFrame);
  }
  if (self.hasHeadIcon) {
    size_ += computeStringSize(5, self.headIcon);
  }
  if (self.hasSex) {
    size_ += computeUInt32Size(6, self.sex);
  }
  if (self.hasIp) {
    size_ += computeStringSize(7, self.ip);
  }
  if (self.hasCurRoundPoint) {
    size_ += computeInt32Size(8, self.curRoundPoint);
  }
  if (self.hasTotalPoint) {
    size_ += computeInt32Size(9, self.totalPoint);
  }
  if (self.hasStatus) {
    size_ += computeUInt32Size(10, self.status);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.preCardsArray.count;
    const UInt32 *values = (const UInt32 *)self.preCardsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  [self.cardsInTableArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(12, element);
  }];
  if (self.hasSaoCount) {
    size_ += computeUInt32Size(13, self.saoCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (p_user_penhu_room*) parseFromData:(NSData*) data {
  return (p_user_penhu_room*)[[[p_user_penhu_room builder] mergeFromData:data] build];
}
+ (p_user_penhu_room*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (p_user_penhu_room*)[[[p_user_penhu_room builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (p_user_penhu_room*) parseFromInputStream:(NSInputStream*) input {
  return (p_user_penhu_room*)[[[p_user_penhu_room builder] mergeFromInputStream:input] build];
}
+ (p_user_penhu_room*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (p_user_penhu_room*)[[[p_user_penhu_room builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (p_user_penhu_room*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (p_user_penhu_room*)[[[p_user_penhu_room builder] mergeFromCodedInputStream:input] build];
}
+ (p_user_penhu_room*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (p_user_penhu_room*)[[[p_user_penhu_room builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (p_user_penhu_roomBuilder*) builder {
  return [[p_user_penhu_roomBuilder alloc] init];
}
+ (p_user_penhu_roomBuilder*) builderWithPrototype:(p_user_penhu_room*) prototype {
  return [[p_user_penhu_room builder] mergeFrom:prototype];
}
- (p_user_penhu_roomBuilder*) builder {
  return [p_user_penhu_room builder];
}
- (p_user_penhu_roomBuilder*) toBuilder {
  return [p_user_penhu_room builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPosition) {
    [output appendFormat:@"%@%@: %@\n", indent, @"position", [NSNumber numberWithInteger:self.position]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasHeadFrame) {
    [output appendFormat:@"%@%@: %@\n", indent, @"headFrame", self.headFrame];
  }
  if (self.hasHeadIcon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"headIcon", self.headIcon];
  }
  if (self.hasSex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sex", [NSNumber numberWithInteger:self.sex]];
  }
  if (self.hasIp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ip", self.ip];
  }
  if (self.hasCurRoundPoint) {
    [output appendFormat:@"%@%@: %@\n", indent, @"curRoundPoint", [NSNumber numberWithInteger:self.curRoundPoint]];
  }
  if (self.hasTotalPoint) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalPoint", [NSNumber numberWithInteger:self.totalPoint]];
  }
  if (self.hasStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"status", [NSNumber numberWithInteger:self.status]];
  }
  [self.preCardsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preCards", obj];
  }];
  [self.cardsInTableArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"cardsInTable"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasSaoCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"saoCount", [NSNumber numberWithInteger:self.saoCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPosition) {
    [dictionary setObject: [NSNumber numberWithInteger:self.position] forKey: @"position"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasHeadFrame) {
    [dictionary setObject: self.headFrame forKey: @"headFrame"];
  }
  if (self.hasHeadIcon) {
    [dictionary setObject: self.headIcon forKey: @"headIcon"];
  }
  if (self.hasSex) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sex] forKey: @"sex"];
  }
  if (self.hasIp) {
    [dictionary setObject: self.ip forKey: @"ip"];
  }
  if (self.hasCurRoundPoint) {
    [dictionary setObject: [NSNumber numberWithInteger:self.curRoundPoint] forKey: @"curRoundPoint"];
  }
  if (self.hasTotalPoint) {
    [dictionary setObject: [NSNumber numberWithInteger:self.totalPoint] forKey: @"totalPoint"];
  }
  if (self.hasStatus) {
    [dictionary setObject: [NSNumber numberWithInteger:self.status] forKey: @"status"];
  }
  NSMutableArray * preCardsArrayArray = [NSMutableArray new];
  NSUInteger preCardsArrayCount=self.preCardsArray.count;
  for(int i=0;i<preCardsArrayCount;i++){
    [preCardsArrayArray addObject: @([self.preCardsArray uint32AtIndex:i])];
  }
  [dictionary setObject: preCardsArrayArray forKey: @"preCards"];
  for (PBtagWeaveItem* element in self.cardsInTableArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"cardsInTable"];
  }
  if (self.hasSaoCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.saoCount] forKey: @"saoCount"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[p_user_penhu_room class]]) {
    return NO;
  }
  p_user_penhu_room *otherMessage = other;
  return
      self.hasPosition == otherMessage.hasPosition &&
      (!self.hasPosition || self.position == otherMessage.position) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasHeadFrame == otherMessage.hasHeadFrame &&
      (!self.hasHeadFrame || [self.headFrame isEqual:otherMessage.headFrame]) &&
      self.hasHeadIcon == otherMessage.hasHeadIcon &&
      (!self.hasHeadIcon || [self.headIcon isEqual:otherMessage.headIcon]) &&
      self.hasSex == otherMessage.hasSex &&
      (!self.hasSex || self.sex == otherMessage.sex) &&
      self.hasIp == otherMessage.hasIp &&
      (!self.hasIp || [self.ip isEqual:otherMessage.ip]) &&
      self.hasCurRoundPoint == otherMessage.hasCurRoundPoint &&
      (!self.hasCurRoundPoint || self.curRoundPoint == otherMessage.curRoundPoint) &&
      self.hasTotalPoint == otherMessage.hasTotalPoint &&
      (!self.hasTotalPoint || self.totalPoint == otherMessage.totalPoint) &&
      self.hasStatus == otherMessage.hasStatus &&
      (!self.hasStatus || self.status == otherMessage.status) &&
      [self.preCardsArray isEqualToArray:otherMessage.preCardsArray] &&
      [self.cardsInTableArray isEqualToArray:otherMessage.cardsInTableArray] &&
      self.hasSaoCount == otherMessage.hasSaoCount &&
      (!self.hasSaoCount || self.saoCount == otherMessage.saoCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPosition) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.position] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasHeadFrame) {
    hashCode = hashCode * 31 + [self.headFrame hash];
  }
  if (self.hasHeadIcon) {
    hashCode = hashCode * 31 + [self.headIcon hash];
  }
  if (self.hasSex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sex] hash];
  }
  if (self.hasIp) {
    hashCode = hashCode * 31 + [self.ip hash];
  }
  if (self.hasCurRoundPoint) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.curRoundPoint] hash];
  }
  if (self.hasTotalPoint) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalPoint] hash];
  }
  if (self.hasStatus) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.status] hash];
  }
  [self.preCardsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.cardsInTableArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSaoCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.saoCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface p_user_penhu_roomBuilder()
@property (strong) p_user_penhu_room* resultPUserPenhuRoom;
@end

@implementation p_user_penhu_roomBuilder
@synthesize resultPUserPenhuRoom;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPUserPenhuRoom = [[p_user_penhu_room alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPUserPenhuRoom;
}
- (p_user_penhu_roomBuilder*) clear {
  self.resultPUserPenhuRoom = [[p_user_penhu_room alloc] init];
  return self;
}
- (p_user_penhu_roomBuilder*) clone {
  return [p_user_penhu_room builderWithPrototype:resultPUserPenhuRoom];
}
- (p_user_penhu_room*) defaultInstance {
  return [p_user_penhu_room defaultInstance];
}
- (p_user_penhu_room*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (p_user_penhu_room*) buildPartial {
  p_user_penhu_room* returnMe = resultPUserPenhuRoom;
  self.resultPUserPenhuRoom = nil;
  return returnMe;
}
- (p_user_penhu_roomBuilder*) mergeFrom:(p_user_penhu_room*) other {
  if (other == [p_user_penhu_room defaultInstance]) {
    return self;
  }
  if (other.hasPosition) {
    [self setPosition:other.position];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasHeadFrame) {
    [self setHeadFrame:other.headFrame];
  }
  if (other.hasHeadIcon) {
    [self setHeadIcon:other.headIcon];
  }
  if (other.hasSex) {
    [self setSex:other.sex];
  }
  if (other.hasIp) {
    [self setIp:other.ip];
  }
  if (other.hasCurRoundPoint) {
    [self setCurRoundPoint:other.curRoundPoint];
  }
  if (other.hasTotalPoint) {
    [self setTotalPoint:other.totalPoint];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.preCardsArray.count > 0) {
    if (resultPUserPenhuRoom.preCardsArray == nil) {
      resultPUserPenhuRoom.preCardsArray = [other.preCardsArray copy];
    } else {
      [resultPUserPenhuRoom.preCardsArray appendArray:other.preCardsArray];
    }
  }
  if (other.cardsInTableArray.count > 0) {
    if (resultPUserPenhuRoom.cardsInTableArray == nil) {
      resultPUserPenhuRoom.cardsInTableArray = [[NSMutableArray alloc] initWithArray:other.cardsInTableArray];
    } else {
      [resultPUserPenhuRoom.cardsInTableArray addObjectsFromArray:other.cardsInTableArray];
    }
  }
  if (other.hasSaoCount) {
    [self setSaoCount:other.saoCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (p_user_penhu_roomBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (p_user_penhu_roomBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setPosition:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setHeadFrame:[input readString]];
        break;
      }
      case 42: {
        [self setHeadIcon:[input readString]];
        break;
      }
      case 48: {
        [self setSex:[input readUInt32]];
        break;
      }
      case 58: {
        [self setIp:[input readString]];
        break;
      }
      case 64: {
        [self setCurRoundPoint:[input readInt32]];
        break;
      }
      case 72: {
        [self setTotalPoint:[input readInt32]];
        break;
      }
      case 80: {
        [self setStatus:[input readUInt32]];
        break;
      }
      case 88: {
        [self addPreCards:[input readUInt32]];
        break;
      }
      case 98: {
        PBtagWeaveItemBuilder* subBuilder = [PBtagWeaveItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCardsInTable:[subBuilder buildPartial]];
        break;
      }
      case 104: {
        [self setSaoCount:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPosition {
  return resultPUserPenhuRoom.hasPosition;
}
- (UInt32) position {
  return resultPUserPenhuRoom.position;
}
- (p_user_penhu_roomBuilder*) setPosition:(UInt32) value {
  resultPUserPenhuRoom.hasPosition = YES;
  resultPUserPenhuRoom.position = value;
  return self;
}
- (p_user_penhu_roomBuilder*) clearPosition {
  resultPUserPenhuRoom.hasPosition = NO;
  resultPUserPenhuRoom.position = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPUserPenhuRoom.hasUid;
}
- (UInt32) uid {
  return resultPUserPenhuRoom.uid;
}
- (p_user_penhu_roomBuilder*) setUid:(UInt32) value {
  resultPUserPenhuRoom.hasUid = YES;
  resultPUserPenhuRoom.uid = value;
  return self;
}
- (p_user_penhu_roomBuilder*) clearUid {
  resultPUserPenhuRoom.hasUid = NO;
  resultPUserPenhuRoom.uid = 0;
  return self;
}
- (BOOL) hasName {
  return resultPUserPenhuRoom.hasName;
}
- (NSString*) name {
  return resultPUserPenhuRoom.name;
}
- (p_user_penhu_roomBuilder*) setName:(NSString*) value {
  resultPUserPenhuRoom.hasName = YES;
  resultPUserPenhuRoom.name = value;
  return self;
}
- (p_user_penhu_roomBuilder*) clearName {
  resultPUserPenhuRoom.hasName = NO;
  resultPUserPenhuRoom.name = @"";
  return self;
}
- (BOOL) hasHeadFrame {
  return resultPUserPenhuRoom.hasHeadFrame;
}
- (NSString*) headFrame {
  return resultPUserPenhuRoom.headFrame;
}
- (p_user_penhu_roomBuilder*) setHeadFrame:(NSString*) value {
  resultPUserPenhuRoom.hasHeadFrame = YES;
  resultPUserPenhuRoom.headFrame = value;
  return self;
}
- (p_user_penhu_roomBuilder*) clearHeadFrame {
  resultPUserPenhuRoom.hasHeadFrame = NO;
  resultPUserPenhuRoom.headFrame = @"";
  return self;
}
- (BOOL) hasHeadIcon {
  return resultPUserPenhuRoom.hasHeadIcon;
}
- (NSString*) headIcon {
  return resultPUserPenhuRoom.headIcon;
}
- (p_user_penhu_roomBuilder*) setHeadIcon:(NSString*) value {
  resultPUserPenhuRoom.hasHeadIcon = YES;
  resultPUserPenhuRoom.headIcon = value;
  return self;
}
- (p_user_penhu_roomBuilder*) clearHeadIcon {
  resultPUserPenhuRoom.hasHeadIcon = NO;
  resultPUserPenhuRoom.headIcon = @"";
  return self;
}
- (BOOL) hasSex {
  return resultPUserPenhuRoom.hasSex;
}
- (UInt32) sex {
  return resultPUserPenhuRoom.sex;
}
- (p_user_penhu_roomBuilder*) setSex:(UInt32) value {
  resultPUserPenhuRoom.hasSex = YES;
  resultPUserPenhuRoom.sex = value;
  return self;
}
- (p_user_penhu_roomBuilder*) clearSex {
  resultPUserPenhuRoom.hasSex = NO;
  resultPUserPenhuRoom.sex = 0;
  return self;
}
- (BOOL) hasIp {
  return resultPUserPenhuRoom.hasIp;
}
- (NSString*) ip {
  return resultPUserPenhuRoom.ip;
}
- (p_user_penhu_roomBuilder*) setIp:(NSString*) value {
  resultPUserPenhuRoom.hasIp = YES;
  resultPUserPenhuRoom.ip = value;
  return self;
}
- (p_user_penhu_roomBuilder*) clearIp {
  resultPUserPenhuRoom.hasIp = NO;
  resultPUserPenhuRoom.ip = @"";
  return self;
}
- (BOOL) hasCurRoundPoint {
  return resultPUserPenhuRoom.hasCurRoundPoint;
}
- (SInt32) curRoundPoint {
  return resultPUserPenhuRoom.curRoundPoint;
}
- (p_user_penhu_roomBuilder*) setCurRoundPoint:(SInt32) value {
  resultPUserPenhuRoom.hasCurRoundPoint = YES;
  resultPUserPenhuRoom.curRoundPoint = value;
  return self;
}
- (p_user_penhu_roomBuilder*) clearCurRoundPoint {
  resultPUserPenhuRoom.hasCurRoundPoint = NO;
  resultPUserPenhuRoom.curRoundPoint = 0;
  return self;
}
- (BOOL) hasTotalPoint {
  return resultPUserPenhuRoom.hasTotalPoint;
}
- (SInt32) totalPoint {
  return resultPUserPenhuRoom.totalPoint;
}
- (p_user_penhu_roomBuilder*) setTotalPoint:(SInt32) value {
  resultPUserPenhuRoom.hasTotalPoint = YES;
  resultPUserPenhuRoom.totalPoint = value;
  return self;
}
- (p_user_penhu_roomBuilder*) clearTotalPoint {
  resultPUserPenhuRoom.hasTotalPoint = NO;
  resultPUserPenhuRoom.totalPoint = 0;
  return self;
}
- (BOOL) hasStatus {
  return resultPUserPenhuRoom.hasStatus;
}
- (UInt32) status {
  return resultPUserPenhuRoom.status;
}
- (p_user_penhu_roomBuilder*) setStatus:(UInt32) value {
  resultPUserPenhuRoom.hasStatus = YES;
  resultPUserPenhuRoom.status = value;
  return self;
}
- (p_user_penhu_roomBuilder*) clearStatus {
  resultPUserPenhuRoom.hasStatus = NO;
  resultPUserPenhuRoom.status = 0;
  return self;
}
- (PBAppendableArray *)preCards {
  return resultPUserPenhuRoom.preCardsArray;
}
- (UInt32)preCardsAtIndex:(NSUInteger)index {
  return [resultPUserPenhuRoom preCardsAtIndex:index];
}
- (p_user_penhu_roomBuilder *)addPreCards:(UInt32)value {
  if (resultPUserPenhuRoom.preCardsArray == nil) {
    resultPUserPenhuRoom.preCardsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultPUserPenhuRoom.preCardsArray addUint32:value];
  return self;
}
- (p_user_penhu_roomBuilder *)setPreCardsArray:(NSArray *)array {
  resultPUserPenhuRoom.preCardsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (p_user_penhu_roomBuilder *)setPreCardsValues:(const UInt32 *)values count:(NSUInteger)count {
  resultPUserPenhuRoom.preCardsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (p_user_penhu_roomBuilder *)clearPreCards {
  resultPUserPenhuRoom.preCardsArray = nil;
  return self;
}
- (NSMutableArray<PBtagWeaveItem*> *)cardsInTable {
  return resultPUserPenhuRoom.cardsInTableArray;
}
- (PBtagWeaveItem*)cardsInTableAtIndex:(NSUInteger)index {
  return [resultPUserPenhuRoom cardsInTableAtIndex:index];
}
- (p_user_penhu_roomBuilder *)addCardsInTable:(PBtagWeaveItem*)value {
  if (resultPUserPenhuRoom.cardsInTableArray == nil) {
    resultPUserPenhuRoom.cardsInTableArray = [[NSMutableArray alloc]init];
  }
  [resultPUserPenhuRoom.cardsInTableArray addObject:value];
  return self;
}
- (p_user_penhu_roomBuilder *)setCardsInTableArray:(NSArray<PBtagWeaveItem*> *)array {
  resultPUserPenhuRoom.cardsInTableArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (p_user_penhu_roomBuilder *)clearCardsInTable {
  resultPUserPenhuRoom.cardsInTableArray = nil;
  return self;
}
- (BOOL) hasSaoCount {
  return resultPUserPenhuRoom.hasSaoCount;
}
- (UInt32) saoCount {
  return resultPUserPenhuRoom.saoCount;
}
- (p_user_penhu_roomBuilder*) setSaoCount:(UInt32) value {
  resultPUserPenhuRoom.hasSaoCount = YES;
  resultPUserPenhuRoom.saoCount = value;
  return self;
}
- (p_user_penhu_roomBuilder*) clearSaoCount {
  resultPUserPenhuRoom.hasSaoCount = NO;
  resultPUserPenhuRoom.saoCount = 0;
  return self;
}
@end

@interface PBSC_JoinRoomRes ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 rescode;
@property (strong) RoomScene* roomScene;
@end

@implementation PBSC_JoinRoomRes

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasRescode {
  return !!hasRescode_;
}
- (void) setHasRescode:(BOOL) _value_ {
  hasRescode_ = !!_value_;
}
@synthesize rescode;
- (BOOL) hasRoomScene {
  return !!hasRoomScene_;
}
- (void) setHasRoomScene:(BOOL) _value_ {
  hasRoomScene_ = !!_value_;
}
@synthesize roomScene;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.rescode = 0;
    self.roomScene = [RoomScene defaultInstance];
  }
  return self;
}
static PBSC_JoinRoomRes* defaultPBSC_JoinRoomResInstance = nil;
+ (void) initialize {
  if (self == [PBSC_JoinRoomRes class]) {
    defaultPBSC_JoinRoomResInstance = [[PBSC_JoinRoomRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_JoinRoomResInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_JoinRoomResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasRescode) {
    return NO;
  }
  if (self.hasRoomScene) {
    if (!self.roomScene.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasRescode) {
    [output writeUInt32:3 value:self.rescode];
  }
  if (self.hasRoomScene) {
    [output writeMessage:4 value:self.roomScene];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasRescode) {
    size_ += computeUInt32Size(3, self.rescode);
  }
  if (self.hasRoomScene) {
    size_ += computeMessageSize(4, self.roomScene);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_JoinRoomRes*) parseFromData:(NSData*) data {
  return (PBSC_JoinRoomRes*)[[[PBSC_JoinRoomRes builder] mergeFromData:data] build];
}
+ (PBSC_JoinRoomRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_JoinRoomRes*)[[[PBSC_JoinRoomRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_JoinRoomRes*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_JoinRoomRes*)[[[PBSC_JoinRoomRes builder] mergeFromInputStream:input] build];
}
+ (PBSC_JoinRoomRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_JoinRoomRes*)[[[PBSC_JoinRoomRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_JoinRoomRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_JoinRoomRes*)[[[PBSC_JoinRoomRes builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_JoinRoomRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_JoinRoomRes*)[[[PBSC_JoinRoomRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_JoinRoomResBuilder*) builder {
  return [[PBSC_JoinRoomResBuilder alloc] init];
}
+ (PBSC_JoinRoomResBuilder*) builderWithPrototype:(PBSC_JoinRoomRes*) prototype {
  return [[PBSC_JoinRoomRes builder] mergeFrom:prototype];
}
- (PBSC_JoinRoomResBuilder*) builder {
  return [PBSC_JoinRoomRes builder];
}
- (PBSC_JoinRoomResBuilder*) toBuilder {
  return [PBSC_JoinRoomRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasRescode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rescode", [NSNumber numberWithInteger:self.rescode]];
  }
  if (self.hasRoomScene) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomScene"];
    [self.roomScene writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasRescode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.rescode] forKey: @"rescode"];
  }
  if (self.hasRoomScene) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.roomScene storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"roomScene"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_JoinRoomRes class]]) {
    return NO;
  }
  PBSC_JoinRoomRes *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasRescode == otherMessage.hasRescode &&
      (!self.hasRescode || self.rescode == otherMessage.rescode) &&
      self.hasRoomScene == otherMessage.hasRoomScene &&
      (!self.hasRoomScene || [self.roomScene isEqual:otherMessage.roomScene]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasRescode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rescode] hash];
  }
  if (self.hasRoomScene) {
    hashCode = hashCode * 31 + [self.roomScene hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_JoinRoomResBuilder()
@property (strong) PBSC_JoinRoomRes* resultPbscJoinRoomRes;
@end

@implementation PBSC_JoinRoomResBuilder
@synthesize resultPbscJoinRoomRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscJoinRoomRes = [[PBSC_JoinRoomRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscJoinRoomRes;
}
- (PBSC_JoinRoomResBuilder*) clear {
  self.resultPbscJoinRoomRes = [[PBSC_JoinRoomRes alloc] init];
  return self;
}
- (PBSC_JoinRoomResBuilder*) clone {
  return [PBSC_JoinRoomRes builderWithPrototype:resultPbscJoinRoomRes];
}
- (PBSC_JoinRoomRes*) defaultInstance {
  return [PBSC_JoinRoomRes defaultInstance];
}
- (PBSC_JoinRoomRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_JoinRoomRes*) buildPartial {
  PBSC_JoinRoomRes* returnMe = resultPbscJoinRoomRes;
  self.resultPbscJoinRoomRes = nil;
  return returnMe;
}
- (PBSC_JoinRoomResBuilder*) mergeFrom:(PBSC_JoinRoomRes*) other {
  if (other == [PBSC_JoinRoomRes defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasRescode) {
    [self setRescode:other.rescode];
  }
  if (other.hasRoomScene) {
    [self mergeRoomScene:other.roomScene];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_JoinRoomResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_JoinRoomResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setRescode:[input readUInt32]];
        break;
      }
      case 34: {
        RoomSceneBuilder* subBuilder = [RoomScene builder];
        if (self.hasRoomScene) {
          [subBuilder mergeFrom:self.roomScene];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoomScene:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbscJoinRoomRes.hasSeqId;
}
- (UInt32) seqId {
  return resultPbscJoinRoomRes.seqId;
}
- (PBSC_JoinRoomResBuilder*) setSeqId:(UInt32) value {
  resultPbscJoinRoomRes.hasSeqId = YES;
  resultPbscJoinRoomRes.seqId = value;
  return self;
}
- (PBSC_JoinRoomResBuilder*) clearSeqId {
  resultPbscJoinRoomRes.hasSeqId = NO;
  resultPbscJoinRoomRes.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbscJoinRoomRes.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscJoinRoomRes.roomId;
}
- (PBSC_JoinRoomResBuilder*) setRoomId:(UInt32) value {
  resultPbscJoinRoomRes.hasRoomId = YES;
  resultPbscJoinRoomRes.roomId = value;
  return self;
}
- (PBSC_JoinRoomResBuilder*) clearRoomId {
  resultPbscJoinRoomRes.hasRoomId = NO;
  resultPbscJoinRoomRes.roomId = 0;
  return self;
}
- (BOOL) hasRescode {
  return resultPbscJoinRoomRes.hasRescode;
}
- (UInt32) rescode {
  return resultPbscJoinRoomRes.rescode;
}
- (PBSC_JoinRoomResBuilder*) setRescode:(UInt32) value {
  resultPbscJoinRoomRes.hasRescode = YES;
  resultPbscJoinRoomRes.rescode = value;
  return self;
}
- (PBSC_JoinRoomResBuilder*) clearRescode {
  resultPbscJoinRoomRes.hasRescode = NO;
  resultPbscJoinRoomRes.rescode = 0;
  return self;
}
- (BOOL) hasRoomScene {
  return resultPbscJoinRoomRes.hasRoomScene;
}
- (RoomScene*) roomScene {
  return resultPbscJoinRoomRes.roomScene;
}
- (PBSC_JoinRoomResBuilder*) setRoomScene:(RoomScene*) value {
  resultPbscJoinRoomRes.hasRoomScene = YES;
  resultPbscJoinRoomRes.roomScene = value;
  return self;
}
- (PBSC_JoinRoomResBuilder*) setRoomSceneBuilder:(RoomSceneBuilder*) builderForValue {
  return [self setRoomScene:[builderForValue build]];
}
- (PBSC_JoinRoomResBuilder*) mergeRoomScene:(RoomScene*) value {
  if (resultPbscJoinRoomRes.hasRoomScene &&
      resultPbscJoinRoomRes.roomScene != [RoomScene defaultInstance]) {
    resultPbscJoinRoomRes.roomScene =
      [[[RoomScene builderWithPrototype:resultPbscJoinRoomRes.roomScene] mergeFrom:value] buildPartial];
  } else {
    resultPbscJoinRoomRes.roomScene = value;
  }
  resultPbscJoinRoomRes.hasRoomScene = YES;
  return self;
}
- (PBSC_JoinRoomResBuilder*) clearRoomScene {
  resultPbscJoinRoomRes.hasRoomScene = NO;
  resultPbscJoinRoomRes.roomScene = [RoomScene defaultInstance];
  return self;
}
@end

@interface RoomScene ()
@property UInt32 roomId;
@property (strong) NSMutableArray<p_user_penhu_room*> * userRoomArray;
@property (strong) PBAppendableArray * userCardsArray;
@property (strong) NSMutableArray<PBtagWeaveItem*> * tmpCardsArray;
@property UInt32 executeUid;
@property UInt32 lastExecuteUid;
@property (strong) PBAppendableArray * lastCardsArray;
@property UInt32 roomOwnerId;
@property UInt32 curRound;
@property UInt32 maxRounds;
@property UInt32 dealerUid;
@property UInt32 cardsBufferNum;
@property UInt32 operatorUid;
@end

@implementation RoomScene

- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
@synthesize userRoomArray;
@dynamic userRoom;
@synthesize userCardsArray;
@dynamic userCards;
@synthesize tmpCardsArray;
@dynamic tmpCards;
- (BOOL) hasExecuteUid {
  return !!hasExecuteUid_;
}
- (void) setHasExecuteUid:(BOOL) _value_ {
  hasExecuteUid_ = !!_value_;
}
@synthesize executeUid;
- (BOOL) hasLastExecuteUid {
  return !!hasLastExecuteUid_;
}
- (void) setHasLastExecuteUid:(BOOL) _value_ {
  hasLastExecuteUid_ = !!_value_;
}
@synthesize lastExecuteUid;
@synthesize lastCardsArray;
@dynamic lastCards;
- (BOOL) hasRoomOwnerId {
  return !!hasRoomOwnerId_;
}
- (void) setHasRoomOwnerId:(BOOL) _value_ {
  hasRoomOwnerId_ = !!_value_;
}
@synthesize roomOwnerId;
- (BOOL) hasCurRound {
  return !!hasCurRound_;
}
- (void) setHasCurRound:(BOOL) _value_ {
  hasCurRound_ = !!_value_;
}
@synthesize curRound;
- (BOOL) hasMaxRounds {
  return !!hasMaxRounds_;
}
- (void) setHasMaxRounds:(BOOL) _value_ {
  hasMaxRounds_ = !!_value_;
}
@synthesize maxRounds;
- (BOOL) hasDealerUid {
  return !!hasDealerUid_;
}
- (void) setHasDealerUid:(BOOL) _value_ {
  hasDealerUid_ = !!_value_;
}
@synthesize dealerUid;
- (BOOL) hasCardsBufferNum {
  return !!hasCardsBufferNum_;
}
- (void) setHasCardsBufferNum:(BOOL) _value_ {
  hasCardsBufferNum_ = !!_value_;
}
@synthesize cardsBufferNum;
- (BOOL) hasOperatorUid {
  return !!hasOperatorUid_;
}
- (void) setHasOperatorUid:(BOOL) _value_ {
  hasOperatorUid_ = !!_value_;
}
@synthesize operatorUid;
- (instancetype) init {
  if ((self = [super init])) {
    self.roomId = 0;
    self.executeUid = 0;
    self.lastExecuteUid = 0;
    self.roomOwnerId = 0;
    self.curRound = 0;
    self.maxRounds = 0;
    self.dealerUid = 0;
    self.cardsBufferNum = 0;
    self.operatorUid = 0;
  }
  return self;
}
static RoomScene* defaultRoomSceneInstance = nil;
+ (void) initialize {
  if (self == [RoomScene class]) {
    defaultRoomSceneInstance = [[RoomScene alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRoomSceneInstance;
}
- (instancetype) defaultInstance {
  return defaultRoomSceneInstance;
}
- (NSArray<p_user_penhu_room*> *)userRoom {
  return userRoomArray;
}
- (p_user_penhu_room*)userRoomAtIndex:(NSUInteger)index {
  return [userRoomArray objectAtIndex:index];
}
- (PBArray *)userCards {
  return userCardsArray;
}
- (UInt32)userCardsAtIndex:(NSUInteger)index {
  return [userCardsArray uint32AtIndex:index];
}
- (NSArray<PBtagWeaveItem*> *)tmpCards {
  return tmpCardsArray;
}
- (PBtagWeaveItem*)tmpCardsAtIndex:(NSUInteger)index {
  return [tmpCardsArray objectAtIndex:index];
}
- (PBArray *)lastCards {
  return lastCardsArray;
}
- (UInt32)lastCardsAtIndex:(NSUInteger)index {
  return [lastCardsArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasRoomOwnerId) {
    return NO;
  }
  __block BOOL isInituserRoom = YES;
   [self.userRoom enumerateObjectsUsingBlock:^(p_user_penhu_room *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserRoom = NO;
      *stop = YES;
    }
  }];
  if (!isInituserRoom) return isInituserRoom;
  __block BOOL isInittmpCards = YES;
   [self.tmpCards enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInittmpCards = NO;
      *stop = YES;
    }
  }];
  if (!isInittmpCards) return isInittmpCards;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRoomId) {
    [output writeUInt32:1 value:self.roomId];
  }
  [self.userRoomArray enumerateObjectsUsingBlock:^(p_user_penhu_room *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  const NSUInteger userCardsArrayCount = self.userCardsArray.count;
  if (userCardsArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.userCardsArray.data;
    for (NSUInteger i = 0; i < userCardsArrayCount; ++i) {
      [output writeUInt32:3 value:values[i]];
    }
  }
  [self.tmpCardsArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  if (self.hasExecuteUid) {
    [output writeUInt32:5 value:self.executeUid];
  }
  if (self.hasLastExecuteUid) {
    [output writeUInt32:6 value:self.lastExecuteUid];
  }
  const NSUInteger lastCardsArrayCount = self.lastCardsArray.count;
  if (lastCardsArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.lastCardsArray.data;
    for (NSUInteger i = 0; i < lastCardsArrayCount; ++i) {
      [output writeUInt32:7 value:values[i]];
    }
  }
  if (self.hasRoomOwnerId) {
    [output writeUInt32:8 value:self.roomOwnerId];
  }
  if (self.hasCurRound) {
    [output writeUInt32:9 value:self.curRound];
  }
  if (self.hasMaxRounds) {
    [output writeUInt32:10 value:self.maxRounds];
  }
  if (self.hasDealerUid) {
    [output writeUInt32:11 value:self.dealerUid];
  }
  if (self.hasCardsBufferNum) {
    [output writeUInt32:12 value:self.cardsBufferNum];
  }
  if (self.hasOperatorUid) {
    [output writeUInt32:13 value:self.operatorUid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRoomId) {
    size_ += computeUInt32Size(1, self.roomId);
  }
  [self.userRoomArray enumerateObjectsUsingBlock:^(p_user_penhu_room *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.userCardsArray.count;
    const UInt32 *values = (const UInt32 *)self.userCardsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  [self.tmpCardsArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  if (self.hasExecuteUid) {
    size_ += computeUInt32Size(5, self.executeUid);
  }
  if (self.hasLastExecuteUid) {
    size_ += computeUInt32Size(6, self.lastExecuteUid);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.lastCardsArray.count;
    const UInt32 *values = (const UInt32 *)self.lastCardsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasRoomOwnerId) {
    size_ += computeUInt32Size(8, self.roomOwnerId);
  }
  if (self.hasCurRound) {
    size_ += computeUInt32Size(9, self.curRound);
  }
  if (self.hasMaxRounds) {
    size_ += computeUInt32Size(10, self.maxRounds);
  }
  if (self.hasDealerUid) {
    size_ += computeUInt32Size(11, self.dealerUid);
  }
  if (self.hasCardsBufferNum) {
    size_ += computeUInt32Size(12, self.cardsBufferNum);
  }
  if (self.hasOperatorUid) {
    size_ += computeUInt32Size(13, self.operatorUid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RoomScene*) parseFromData:(NSData*) data {
  return (RoomScene*)[[[RoomScene builder] mergeFromData:data] build];
}
+ (RoomScene*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomScene*)[[[RoomScene builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomScene*) parseFromInputStream:(NSInputStream*) input {
  return (RoomScene*)[[[RoomScene builder] mergeFromInputStream:input] build];
}
+ (RoomScene*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomScene*)[[[RoomScene builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomScene*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomScene*)[[[RoomScene builder] mergeFromCodedInputStream:input] build];
}
+ (RoomScene*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomScene*)[[[RoomScene builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomSceneBuilder*) builder {
  return [[RoomSceneBuilder alloc] init];
}
+ (RoomSceneBuilder*) builderWithPrototype:(RoomScene*) prototype {
  return [[RoomScene builder] mergeFrom:prototype];
}
- (RoomSceneBuilder*) builder {
  return [RoomScene builder];
}
- (RoomSceneBuilder*) toBuilder {
  return [RoomScene builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  [self.userRoomArray enumerateObjectsUsingBlock:^(p_user_penhu_room *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userRoom"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.userCardsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userCards", obj];
  }];
  [self.tmpCardsArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"tmpCards"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasExecuteUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"executeUid", [NSNumber numberWithInteger:self.executeUid]];
  }
  if (self.hasLastExecuteUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastExecuteUid", [NSNumber numberWithInteger:self.lastExecuteUid]];
  }
  [self.lastCardsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastCards", obj];
  }];
  if (self.hasRoomOwnerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomOwnerId", [NSNumber numberWithInteger:self.roomOwnerId]];
  }
  if (self.hasCurRound) {
    [output appendFormat:@"%@%@: %@\n", indent, @"curRound", [NSNumber numberWithInteger:self.curRound]];
  }
  if (self.hasMaxRounds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxRounds", [NSNumber numberWithInteger:self.maxRounds]];
  }
  if (self.hasDealerUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dealerUid", [NSNumber numberWithInteger:self.dealerUid]];
  }
  if (self.hasCardsBufferNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardsBufferNum", [NSNumber numberWithInteger:self.cardsBufferNum]];
  }
  if (self.hasOperatorUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operatorUid", [NSNumber numberWithInteger:self.operatorUid]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  for (p_user_penhu_room* element in self.userRoomArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userRoom"];
  }
  NSMutableArray * userCardsArrayArray = [NSMutableArray new];
  NSUInteger userCardsArrayCount=self.userCardsArray.count;
  for(int i=0;i<userCardsArrayCount;i++){
    [userCardsArrayArray addObject: @([self.userCardsArray uint32AtIndex:i])];
  }
  [dictionary setObject: userCardsArrayArray forKey: @"userCards"];
  for (PBtagWeaveItem* element in self.tmpCardsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"tmpCards"];
  }
  if (self.hasExecuteUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.executeUid] forKey: @"executeUid"];
  }
  if (self.hasLastExecuteUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.lastExecuteUid] forKey: @"lastExecuteUid"];
  }
  NSMutableArray * lastCardsArrayArray = [NSMutableArray new];
  NSUInteger lastCardsArrayCount=self.lastCardsArray.count;
  for(int i=0;i<lastCardsArrayCount;i++){
    [lastCardsArrayArray addObject: @([self.lastCardsArray uint32AtIndex:i])];
  }
  [dictionary setObject: lastCardsArrayArray forKey: @"lastCards"];
  if (self.hasRoomOwnerId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomOwnerId] forKey: @"roomOwnerId"];
  }
  if (self.hasCurRound) {
    [dictionary setObject: [NSNumber numberWithInteger:self.curRound] forKey: @"curRound"];
  }
  if (self.hasMaxRounds) {
    [dictionary setObject: [NSNumber numberWithInteger:self.maxRounds] forKey: @"maxRounds"];
  }
  if (self.hasDealerUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dealerUid] forKey: @"dealerUid"];
  }
  if (self.hasCardsBufferNum) {
    [dictionary setObject: [NSNumber numberWithInteger:self.cardsBufferNum] forKey: @"cardsBufferNum"];
  }
  if (self.hasOperatorUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.operatorUid] forKey: @"operatorUid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RoomScene class]]) {
    return NO;
  }
  RoomScene *otherMessage = other;
  return
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      [self.userRoomArray isEqualToArray:otherMessage.userRoomArray] &&
      [self.userCardsArray isEqualToArray:otherMessage.userCardsArray] &&
      [self.tmpCardsArray isEqualToArray:otherMessage.tmpCardsArray] &&
      self.hasExecuteUid == otherMessage.hasExecuteUid &&
      (!self.hasExecuteUid || self.executeUid == otherMessage.executeUid) &&
      self.hasLastExecuteUid == otherMessage.hasLastExecuteUid &&
      (!self.hasLastExecuteUid || self.lastExecuteUid == otherMessage.lastExecuteUid) &&
      [self.lastCardsArray isEqualToArray:otherMessage.lastCardsArray] &&
      self.hasRoomOwnerId == otherMessage.hasRoomOwnerId &&
      (!self.hasRoomOwnerId || self.roomOwnerId == otherMessage.roomOwnerId) &&
      self.hasCurRound == otherMessage.hasCurRound &&
      (!self.hasCurRound || self.curRound == otherMessage.curRound) &&
      self.hasMaxRounds == otherMessage.hasMaxRounds &&
      (!self.hasMaxRounds || self.maxRounds == otherMessage.maxRounds) &&
      self.hasDealerUid == otherMessage.hasDealerUid &&
      (!self.hasDealerUid || self.dealerUid == otherMessage.dealerUid) &&
      self.hasCardsBufferNum == otherMessage.hasCardsBufferNum &&
      (!self.hasCardsBufferNum || self.cardsBufferNum == otherMessage.cardsBufferNum) &&
      self.hasOperatorUid == otherMessage.hasOperatorUid &&
      (!self.hasOperatorUid || self.operatorUid == otherMessage.operatorUid) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  [self.userRoomArray enumerateObjectsUsingBlock:^(p_user_penhu_room *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.userCardsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  [self.tmpCardsArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasExecuteUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.executeUid] hash];
  }
  if (self.hasLastExecuteUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lastExecuteUid] hash];
  }
  [self.lastCardsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasRoomOwnerId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomOwnerId] hash];
  }
  if (self.hasCurRound) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.curRound] hash];
  }
  if (self.hasMaxRounds) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxRounds] hash];
  }
  if (self.hasDealerUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dealerUid] hash];
  }
  if (self.hasCardsBufferNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cardsBufferNum] hash];
  }
  if (self.hasOperatorUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.operatorUid] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RoomSceneBuilder()
@property (strong) RoomScene* resultRoomScene;
@end

@implementation RoomSceneBuilder
@synthesize resultRoomScene;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRoomScene = [[RoomScene alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRoomScene;
}
- (RoomSceneBuilder*) clear {
  self.resultRoomScene = [[RoomScene alloc] init];
  return self;
}
- (RoomSceneBuilder*) clone {
  return [RoomScene builderWithPrototype:resultRoomScene];
}
- (RoomScene*) defaultInstance {
  return [RoomScene defaultInstance];
}
- (RoomScene*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomScene*) buildPartial {
  RoomScene* returnMe = resultRoomScene;
  self.resultRoomScene = nil;
  return returnMe;
}
- (RoomSceneBuilder*) mergeFrom:(RoomScene*) other {
  if (other == [RoomScene defaultInstance]) {
    return self;
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.userRoomArray.count > 0) {
    if (resultRoomScene.userRoomArray == nil) {
      resultRoomScene.userRoomArray = [[NSMutableArray alloc] initWithArray:other.userRoomArray];
    } else {
      [resultRoomScene.userRoomArray addObjectsFromArray:other.userRoomArray];
    }
  }
  if (other.userCardsArray.count > 0) {
    if (resultRoomScene.userCardsArray == nil) {
      resultRoomScene.userCardsArray = [other.userCardsArray copy];
    } else {
      [resultRoomScene.userCardsArray appendArray:other.userCardsArray];
    }
  }
  if (other.tmpCardsArray.count > 0) {
    if (resultRoomScene.tmpCardsArray == nil) {
      resultRoomScene.tmpCardsArray = [[NSMutableArray alloc] initWithArray:other.tmpCardsArray];
    } else {
      [resultRoomScene.tmpCardsArray addObjectsFromArray:other.tmpCardsArray];
    }
  }
  if (other.hasExecuteUid) {
    [self setExecuteUid:other.executeUid];
  }
  if (other.hasLastExecuteUid) {
    [self setLastExecuteUid:other.lastExecuteUid];
  }
  if (other.lastCardsArray.count > 0) {
    if (resultRoomScene.lastCardsArray == nil) {
      resultRoomScene.lastCardsArray = [other.lastCardsArray copy];
    } else {
      [resultRoomScene.lastCardsArray appendArray:other.lastCardsArray];
    }
  }
  if (other.hasRoomOwnerId) {
    [self setRoomOwnerId:other.roomOwnerId];
  }
  if (other.hasCurRound) {
    [self setCurRound:other.curRound];
  }
  if (other.hasMaxRounds) {
    [self setMaxRounds:other.maxRounds];
  }
  if (other.hasDealerUid) {
    [self setDealerUid:other.dealerUid];
  }
  if (other.hasCardsBufferNum) {
    [self setCardsBufferNum:other.cardsBufferNum];
  }
  if (other.hasOperatorUid) {
    [self setOperatorUid:other.operatorUid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomSceneBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomSceneBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 18: {
        p_user_penhu_roomBuilder* subBuilder = [p_user_penhu_room builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserRoom:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self addUserCards:[input readUInt32]];
        break;
      }
      case 34: {
        PBtagWeaveItemBuilder* subBuilder = [PBtagWeaveItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTmpCards:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setExecuteUid:[input readUInt32]];
        break;
      }
      case 48: {
        [self setLastExecuteUid:[input readUInt32]];
        break;
      }
      case 56: {
        [self addLastCards:[input readUInt32]];
        break;
      }
      case 64: {
        [self setRoomOwnerId:[input readUInt32]];
        break;
      }
      case 72: {
        [self setCurRound:[input readUInt32]];
        break;
      }
      case 80: {
        [self setMaxRounds:[input readUInt32]];
        break;
      }
      case 88: {
        [self setDealerUid:[input readUInt32]];
        break;
      }
      case 96: {
        [self setCardsBufferNum:[input readUInt32]];
        break;
      }
      case 104: {
        [self setOperatorUid:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRoomId {
  return resultRoomScene.hasRoomId;
}
- (UInt32) roomId {
  return resultRoomScene.roomId;
}
- (RoomSceneBuilder*) setRoomId:(UInt32) value {
  resultRoomScene.hasRoomId = YES;
  resultRoomScene.roomId = value;
  return self;
}
- (RoomSceneBuilder*) clearRoomId {
  resultRoomScene.hasRoomId = NO;
  resultRoomScene.roomId = 0;
  return self;
}
- (NSMutableArray<p_user_penhu_room*> *)userRoom {
  return resultRoomScene.userRoomArray;
}
- (p_user_penhu_room*)userRoomAtIndex:(NSUInteger)index {
  return [resultRoomScene userRoomAtIndex:index];
}
- (RoomSceneBuilder *)addUserRoom:(p_user_penhu_room*)value {
  if (resultRoomScene.userRoomArray == nil) {
    resultRoomScene.userRoomArray = [[NSMutableArray alloc]init];
  }
  [resultRoomScene.userRoomArray addObject:value];
  return self;
}
- (RoomSceneBuilder *)setUserRoomArray:(NSArray<p_user_penhu_room*> *)array {
  resultRoomScene.userRoomArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (RoomSceneBuilder *)clearUserRoom {
  resultRoomScene.userRoomArray = nil;
  return self;
}
- (PBAppendableArray *)userCards {
  return resultRoomScene.userCardsArray;
}
- (UInt32)userCardsAtIndex:(NSUInteger)index {
  return [resultRoomScene userCardsAtIndex:index];
}
- (RoomSceneBuilder *)addUserCards:(UInt32)value {
  if (resultRoomScene.userCardsArray == nil) {
    resultRoomScene.userCardsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultRoomScene.userCardsArray addUint32:value];
  return self;
}
- (RoomSceneBuilder *)setUserCardsArray:(NSArray *)array {
  resultRoomScene.userCardsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (RoomSceneBuilder *)setUserCardsValues:(const UInt32 *)values count:(NSUInteger)count {
  resultRoomScene.userCardsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (RoomSceneBuilder *)clearUserCards {
  resultRoomScene.userCardsArray = nil;
  return self;
}
- (NSMutableArray<PBtagWeaveItem*> *)tmpCards {
  return resultRoomScene.tmpCardsArray;
}
- (PBtagWeaveItem*)tmpCardsAtIndex:(NSUInteger)index {
  return [resultRoomScene tmpCardsAtIndex:index];
}
- (RoomSceneBuilder *)addTmpCards:(PBtagWeaveItem*)value {
  if (resultRoomScene.tmpCardsArray == nil) {
    resultRoomScene.tmpCardsArray = [[NSMutableArray alloc]init];
  }
  [resultRoomScene.tmpCardsArray addObject:value];
  return self;
}
- (RoomSceneBuilder *)setTmpCardsArray:(NSArray<PBtagWeaveItem*> *)array {
  resultRoomScene.tmpCardsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (RoomSceneBuilder *)clearTmpCards {
  resultRoomScene.tmpCardsArray = nil;
  return self;
}
- (BOOL) hasExecuteUid {
  return resultRoomScene.hasExecuteUid;
}
- (UInt32) executeUid {
  return resultRoomScene.executeUid;
}
- (RoomSceneBuilder*) setExecuteUid:(UInt32) value {
  resultRoomScene.hasExecuteUid = YES;
  resultRoomScene.executeUid = value;
  return self;
}
- (RoomSceneBuilder*) clearExecuteUid {
  resultRoomScene.hasExecuteUid = NO;
  resultRoomScene.executeUid = 0;
  return self;
}
- (BOOL) hasLastExecuteUid {
  return resultRoomScene.hasLastExecuteUid;
}
- (UInt32) lastExecuteUid {
  return resultRoomScene.lastExecuteUid;
}
- (RoomSceneBuilder*) setLastExecuteUid:(UInt32) value {
  resultRoomScene.hasLastExecuteUid = YES;
  resultRoomScene.lastExecuteUid = value;
  return self;
}
- (RoomSceneBuilder*) clearLastExecuteUid {
  resultRoomScene.hasLastExecuteUid = NO;
  resultRoomScene.lastExecuteUid = 0;
  return self;
}
- (PBAppendableArray *)lastCards {
  return resultRoomScene.lastCardsArray;
}
- (UInt32)lastCardsAtIndex:(NSUInteger)index {
  return [resultRoomScene lastCardsAtIndex:index];
}
- (RoomSceneBuilder *)addLastCards:(UInt32)value {
  if (resultRoomScene.lastCardsArray == nil) {
    resultRoomScene.lastCardsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultRoomScene.lastCardsArray addUint32:value];
  return self;
}
- (RoomSceneBuilder *)setLastCardsArray:(NSArray *)array {
  resultRoomScene.lastCardsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (RoomSceneBuilder *)setLastCardsValues:(const UInt32 *)values count:(NSUInteger)count {
  resultRoomScene.lastCardsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (RoomSceneBuilder *)clearLastCards {
  resultRoomScene.lastCardsArray = nil;
  return self;
}
- (BOOL) hasRoomOwnerId {
  return resultRoomScene.hasRoomOwnerId;
}
- (UInt32) roomOwnerId {
  return resultRoomScene.roomOwnerId;
}
- (RoomSceneBuilder*) setRoomOwnerId:(UInt32) value {
  resultRoomScene.hasRoomOwnerId = YES;
  resultRoomScene.roomOwnerId = value;
  return self;
}
- (RoomSceneBuilder*) clearRoomOwnerId {
  resultRoomScene.hasRoomOwnerId = NO;
  resultRoomScene.roomOwnerId = 0;
  return self;
}
- (BOOL) hasCurRound {
  return resultRoomScene.hasCurRound;
}
- (UInt32) curRound {
  return resultRoomScene.curRound;
}
- (RoomSceneBuilder*) setCurRound:(UInt32) value {
  resultRoomScene.hasCurRound = YES;
  resultRoomScene.curRound = value;
  return self;
}
- (RoomSceneBuilder*) clearCurRound {
  resultRoomScene.hasCurRound = NO;
  resultRoomScene.curRound = 0;
  return self;
}
- (BOOL) hasMaxRounds {
  return resultRoomScene.hasMaxRounds;
}
- (UInt32) maxRounds {
  return resultRoomScene.maxRounds;
}
- (RoomSceneBuilder*) setMaxRounds:(UInt32) value {
  resultRoomScene.hasMaxRounds = YES;
  resultRoomScene.maxRounds = value;
  return self;
}
- (RoomSceneBuilder*) clearMaxRounds {
  resultRoomScene.hasMaxRounds = NO;
  resultRoomScene.maxRounds = 0;
  return self;
}
- (BOOL) hasDealerUid {
  return resultRoomScene.hasDealerUid;
}
- (UInt32) dealerUid {
  return resultRoomScene.dealerUid;
}
- (RoomSceneBuilder*) setDealerUid:(UInt32) value {
  resultRoomScene.hasDealerUid = YES;
  resultRoomScene.dealerUid = value;
  return self;
}
- (RoomSceneBuilder*) clearDealerUid {
  resultRoomScene.hasDealerUid = NO;
  resultRoomScene.dealerUid = 0;
  return self;
}
- (BOOL) hasCardsBufferNum {
  return resultRoomScene.hasCardsBufferNum;
}
- (UInt32) cardsBufferNum {
  return resultRoomScene.cardsBufferNum;
}
- (RoomSceneBuilder*) setCardsBufferNum:(UInt32) value {
  resultRoomScene.hasCardsBufferNum = YES;
  resultRoomScene.cardsBufferNum = value;
  return self;
}
- (RoomSceneBuilder*) clearCardsBufferNum {
  resultRoomScene.hasCardsBufferNum = NO;
  resultRoomScene.cardsBufferNum = 0;
  return self;
}
- (BOOL) hasOperatorUid {
  return resultRoomScene.hasOperatorUid;
}
- (UInt32) operatorUid {
  return resultRoomScene.operatorUid;
}
- (RoomSceneBuilder*) setOperatorUid:(UInt32) value {
  resultRoomScene.hasOperatorUid = YES;
  resultRoomScene.operatorUid = value;
  return self;
}
- (RoomSceneBuilder*) clearOperatorUid {
  resultRoomScene.hasOperatorUid = NO;
  resultRoomScene.operatorUid = 0;
  return self;
}
@end

@interface PBCS_userOperateRoomReq ()
@property UInt32 seqId;
@property UInt32 uid;
@property UInt32 roomId;
@property UInt32 operate;
@end

@implementation PBCS_userOperateRoomReq

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasOperate {
  return !!hasOperate_;
}
- (void) setHasOperate:(BOOL) _value_ {
  hasOperate_ = !!_value_;
}
@synthesize operate;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.uid = 0;
    self.roomId = 0;
    self.operate = 0;
  }
  return self;
}
static PBCS_userOperateRoomReq* defaultPBCS_userOperateRoomReqInstance = nil;
+ (void) initialize {
  if (self == [PBCS_userOperateRoomReq class]) {
    defaultPBCS_userOperateRoomReqInstance = [[PBCS_userOperateRoomReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCS_userOperateRoomReqInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCS_userOperateRoomReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasOperate) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasUid) {
    [output writeUInt32:2 value:self.uid];
  }
  if (self.hasRoomId) {
    [output writeUInt32:3 value:self.roomId];
  }
  if (self.hasOperate) {
    [output writeUInt32:4 value:self.operate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(2, self.uid);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(3, self.roomId);
  }
  if (self.hasOperate) {
    size_ += computeUInt32Size(4, self.operate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBCS_userOperateRoomReq*) parseFromData:(NSData*) data {
  return (PBCS_userOperateRoomReq*)[[[PBCS_userOperateRoomReq builder] mergeFromData:data] build];
}
+ (PBCS_userOperateRoomReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_userOperateRoomReq*)[[[PBCS_userOperateRoomReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCS_userOperateRoomReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBCS_userOperateRoomReq*)[[[PBCS_userOperateRoomReq builder] mergeFromInputStream:input] build];
}
+ (PBCS_userOperateRoomReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_userOperateRoomReq*)[[[PBCS_userOperateRoomReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_userOperateRoomReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCS_userOperateRoomReq*)[[[PBCS_userOperateRoomReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBCS_userOperateRoomReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_userOperateRoomReq*)[[[PBCS_userOperateRoomReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_userOperateRoomReqBuilder*) builder {
  return [[PBCS_userOperateRoomReqBuilder alloc] init];
}
+ (PBCS_userOperateRoomReqBuilder*) builderWithPrototype:(PBCS_userOperateRoomReq*) prototype {
  return [[PBCS_userOperateRoomReq builder] mergeFrom:prototype];
}
- (PBCS_userOperateRoomReqBuilder*) builder {
  return [PBCS_userOperateRoomReq builder];
}
- (PBCS_userOperateRoomReqBuilder*) toBuilder {
  return [PBCS_userOperateRoomReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasOperate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operate", [NSNumber numberWithInteger:self.operate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasOperate) {
    [dictionary setObject: [NSNumber numberWithInteger:self.operate] forKey: @"operate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBCS_userOperateRoomReq class]]) {
    return NO;
  }
  PBCS_userOperateRoomReq *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasOperate == otherMessage.hasOperate &&
      (!self.hasOperate || self.operate == otherMessage.operate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasOperate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.operate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCS_userOperateRoomReqBuilder()
@property (strong) PBCS_userOperateRoomReq* resultPbcsUserOperateRoomReq;
@end

@implementation PBCS_userOperateRoomReqBuilder
@synthesize resultPbcsUserOperateRoomReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcsUserOperateRoomReq = [[PBCS_userOperateRoomReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcsUserOperateRoomReq;
}
- (PBCS_userOperateRoomReqBuilder*) clear {
  self.resultPbcsUserOperateRoomReq = [[PBCS_userOperateRoomReq alloc] init];
  return self;
}
- (PBCS_userOperateRoomReqBuilder*) clone {
  return [PBCS_userOperateRoomReq builderWithPrototype:resultPbcsUserOperateRoomReq];
}
- (PBCS_userOperateRoomReq*) defaultInstance {
  return [PBCS_userOperateRoomReq defaultInstance];
}
- (PBCS_userOperateRoomReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCS_userOperateRoomReq*) buildPartial {
  PBCS_userOperateRoomReq* returnMe = resultPbcsUserOperateRoomReq;
  self.resultPbcsUserOperateRoomReq = nil;
  return returnMe;
}
- (PBCS_userOperateRoomReqBuilder*) mergeFrom:(PBCS_userOperateRoomReq*) other {
  if (other == [PBCS_userOperateRoomReq defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasOperate) {
    [self setOperate:other.operate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCS_userOperateRoomReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCS_userOperateRoomReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 24: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 32: {
        [self setOperate:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbcsUserOperateRoomReq.hasSeqId;
}
- (UInt32) seqId {
  return resultPbcsUserOperateRoomReq.seqId;
}
- (PBCS_userOperateRoomReqBuilder*) setSeqId:(UInt32) value {
  resultPbcsUserOperateRoomReq.hasSeqId = YES;
  resultPbcsUserOperateRoomReq.seqId = value;
  return self;
}
- (PBCS_userOperateRoomReqBuilder*) clearSeqId {
  resultPbcsUserOperateRoomReq.hasSeqId = NO;
  resultPbcsUserOperateRoomReq.seqId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbcsUserOperateRoomReq.hasUid;
}
- (UInt32) uid {
  return resultPbcsUserOperateRoomReq.uid;
}
- (PBCS_userOperateRoomReqBuilder*) setUid:(UInt32) value {
  resultPbcsUserOperateRoomReq.hasUid = YES;
  resultPbcsUserOperateRoomReq.uid = value;
  return self;
}
- (PBCS_userOperateRoomReqBuilder*) clearUid {
  resultPbcsUserOperateRoomReq.hasUid = NO;
  resultPbcsUserOperateRoomReq.uid = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbcsUserOperateRoomReq.hasRoomId;
}
- (UInt32) roomId {
  return resultPbcsUserOperateRoomReq.roomId;
}
- (PBCS_userOperateRoomReqBuilder*) setRoomId:(UInt32) value {
  resultPbcsUserOperateRoomReq.hasRoomId = YES;
  resultPbcsUserOperateRoomReq.roomId = value;
  return self;
}
- (PBCS_userOperateRoomReqBuilder*) clearRoomId {
  resultPbcsUserOperateRoomReq.hasRoomId = NO;
  resultPbcsUserOperateRoomReq.roomId = 0;
  return self;
}
- (BOOL) hasOperate {
  return resultPbcsUserOperateRoomReq.hasOperate;
}
- (UInt32) operate {
  return resultPbcsUserOperateRoomReq.operate;
}
- (PBCS_userOperateRoomReqBuilder*) setOperate:(UInt32) value {
  resultPbcsUserOperateRoomReq.hasOperate = YES;
  resultPbcsUserOperateRoomReq.operate = value;
  return self;
}
- (PBCS_userOperateRoomReqBuilder*) clearOperate {
  resultPbcsUserOperateRoomReq.hasOperate = NO;
  resultPbcsUserOperateRoomReq.operate = 0;
  return self;
}
@end

@interface PBSC_userOperateRoomRes ()
@property UInt32 seqId;
@property UInt32 uid;
@property UInt32 roomId;
@property UInt32 operate;
@property UInt32 rescode;
@end

@implementation PBSC_userOperateRoomRes

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasOperate {
  return !!hasOperate_;
}
- (void) setHasOperate:(BOOL) _value_ {
  hasOperate_ = !!_value_;
}
@synthesize operate;
- (BOOL) hasRescode {
  return !!hasRescode_;
}
- (void) setHasRescode:(BOOL) _value_ {
  hasRescode_ = !!_value_;
}
@synthesize rescode;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.uid = 0;
    self.roomId = 0;
    self.operate = 0;
    self.rescode = 0;
  }
  return self;
}
static PBSC_userOperateRoomRes* defaultPBSC_userOperateRoomResInstance = nil;
+ (void) initialize {
  if (self == [PBSC_userOperateRoomRes class]) {
    defaultPBSC_userOperateRoomResInstance = [[PBSC_userOperateRoomRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_userOperateRoomResInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_userOperateRoomResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasOperate) {
    return NO;
  }
  if (!self.hasRescode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasUid) {
    [output writeUInt32:2 value:self.uid];
  }
  if (self.hasRoomId) {
    [output writeUInt32:3 value:self.roomId];
  }
  if (self.hasOperate) {
    [output writeUInt32:4 value:self.operate];
  }
  if (self.hasRescode) {
    [output writeUInt32:5 value:self.rescode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(2, self.uid);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(3, self.roomId);
  }
  if (self.hasOperate) {
    size_ += computeUInt32Size(4, self.operate);
  }
  if (self.hasRescode) {
    size_ += computeUInt32Size(5, self.rescode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_userOperateRoomRes*) parseFromData:(NSData*) data {
  return (PBSC_userOperateRoomRes*)[[[PBSC_userOperateRoomRes builder] mergeFromData:data] build];
}
+ (PBSC_userOperateRoomRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_userOperateRoomRes*)[[[PBSC_userOperateRoomRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_userOperateRoomRes*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_userOperateRoomRes*)[[[PBSC_userOperateRoomRes builder] mergeFromInputStream:input] build];
}
+ (PBSC_userOperateRoomRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_userOperateRoomRes*)[[[PBSC_userOperateRoomRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_userOperateRoomRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_userOperateRoomRes*)[[[PBSC_userOperateRoomRes builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_userOperateRoomRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_userOperateRoomRes*)[[[PBSC_userOperateRoomRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_userOperateRoomResBuilder*) builder {
  return [[PBSC_userOperateRoomResBuilder alloc] init];
}
+ (PBSC_userOperateRoomResBuilder*) builderWithPrototype:(PBSC_userOperateRoomRes*) prototype {
  return [[PBSC_userOperateRoomRes builder] mergeFrom:prototype];
}
- (PBSC_userOperateRoomResBuilder*) builder {
  return [PBSC_userOperateRoomRes builder];
}
- (PBSC_userOperateRoomResBuilder*) toBuilder {
  return [PBSC_userOperateRoomRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasOperate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operate", [NSNumber numberWithInteger:self.operate]];
  }
  if (self.hasRescode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rescode", [NSNumber numberWithInteger:self.rescode]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasOperate) {
    [dictionary setObject: [NSNumber numberWithInteger:self.operate] forKey: @"operate"];
  }
  if (self.hasRescode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.rescode] forKey: @"rescode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_userOperateRoomRes class]]) {
    return NO;
  }
  PBSC_userOperateRoomRes *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasOperate == otherMessage.hasOperate &&
      (!self.hasOperate || self.operate == otherMessage.operate) &&
      self.hasRescode == otherMessage.hasRescode &&
      (!self.hasRescode || self.rescode == otherMessage.rescode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasOperate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.operate] hash];
  }
  if (self.hasRescode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rescode] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_userOperateRoomResBuilder()
@property (strong) PBSC_userOperateRoomRes* resultPbscUserOperateRoomRes;
@end

@implementation PBSC_userOperateRoomResBuilder
@synthesize resultPbscUserOperateRoomRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscUserOperateRoomRes = [[PBSC_userOperateRoomRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscUserOperateRoomRes;
}
- (PBSC_userOperateRoomResBuilder*) clear {
  self.resultPbscUserOperateRoomRes = [[PBSC_userOperateRoomRes alloc] init];
  return self;
}
- (PBSC_userOperateRoomResBuilder*) clone {
  return [PBSC_userOperateRoomRes builderWithPrototype:resultPbscUserOperateRoomRes];
}
- (PBSC_userOperateRoomRes*) defaultInstance {
  return [PBSC_userOperateRoomRes defaultInstance];
}
- (PBSC_userOperateRoomRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_userOperateRoomRes*) buildPartial {
  PBSC_userOperateRoomRes* returnMe = resultPbscUserOperateRoomRes;
  self.resultPbscUserOperateRoomRes = nil;
  return returnMe;
}
- (PBSC_userOperateRoomResBuilder*) mergeFrom:(PBSC_userOperateRoomRes*) other {
  if (other == [PBSC_userOperateRoomRes defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasOperate) {
    [self setOperate:other.operate];
  }
  if (other.hasRescode) {
    [self setRescode:other.rescode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_userOperateRoomResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_userOperateRoomResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 24: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 32: {
        [self setOperate:[input readUInt32]];
        break;
      }
      case 40: {
        [self setRescode:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbscUserOperateRoomRes.hasSeqId;
}
- (UInt32) seqId {
  return resultPbscUserOperateRoomRes.seqId;
}
- (PBSC_userOperateRoomResBuilder*) setSeqId:(UInt32) value {
  resultPbscUserOperateRoomRes.hasSeqId = YES;
  resultPbscUserOperateRoomRes.seqId = value;
  return self;
}
- (PBSC_userOperateRoomResBuilder*) clearSeqId {
  resultPbscUserOperateRoomRes.hasSeqId = NO;
  resultPbscUserOperateRoomRes.seqId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbscUserOperateRoomRes.hasUid;
}
- (UInt32) uid {
  return resultPbscUserOperateRoomRes.uid;
}
- (PBSC_userOperateRoomResBuilder*) setUid:(UInt32) value {
  resultPbscUserOperateRoomRes.hasUid = YES;
  resultPbscUserOperateRoomRes.uid = value;
  return self;
}
- (PBSC_userOperateRoomResBuilder*) clearUid {
  resultPbscUserOperateRoomRes.hasUid = NO;
  resultPbscUserOperateRoomRes.uid = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbscUserOperateRoomRes.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscUserOperateRoomRes.roomId;
}
- (PBSC_userOperateRoomResBuilder*) setRoomId:(UInt32) value {
  resultPbscUserOperateRoomRes.hasRoomId = YES;
  resultPbscUserOperateRoomRes.roomId = value;
  return self;
}
- (PBSC_userOperateRoomResBuilder*) clearRoomId {
  resultPbscUserOperateRoomRes.hasRoomId = NO;
  resultPbscUserOperateRoomRes.roomId = 0;
  return self;
}
- (BOOL) hasOperate {
  return resultPbscUserOperateRoomRes.hasOperate;
}
- (UInt32) operate {
  return resultPbscUserOperateRoomRes.operate;
}
- (PBSC_userOperateRoomResBuilder*) setOperate:(UInt32) value {
  resultPbscUserOperateRoomRes.hasOperate = YES;
  resultPbscUserOperateRoomRes.operate = value;
  return self;
}
- (PBSC_userOperateRoomResBuilder*) clearOperate {
  resultPbscUserOperateRoomRes.hasOperate = NO;
  resultPbscUserOperateRoomRes.operate = 0;
  return self;
}
- (BOOL) hasRescode {
  return resultPbscUserOperateRoomRes.hasRescode;
}
- (UInt32) rescode {
  return resultPbscUserOperateRoomRes.rescode;
}
- (PBSC_userOperateRoomResBuilder*) setRescode:(UInt32) value {
  resultPbscUserOperateRoomRes.hasRescode = YES;
  resultPbscUserOperateRoomRes.rescode = value;
  return self;
}
- (PBSC_userOperateRoomResBuilder*) clearRescode {
  resultPbscUserOperateRoomRes.hasRescode = NO;
  resultPbscUserOperateRoomRes.rescode = 0;
  return self;
}
@end

@interface PBSC_BroadCastUserOperateRoom ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 operateUid;
@property UInt32 operate;
@end

@implementation PBSC_BroadCastUserOperateRoom

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasOperateUid {
  return !!hasOperateUid_;
}
- (void) setHasOperateUid:(BOOL) _value_ {
  hasOperateUid_ = !!_value_;
}
@synthesize operateUid;
- (BOOL) hasOperate {
  return !!hasOperate_;
}
- (void) setHasOperate:(BOOL) _value_ {
  hasOperate_ = !!_value_;
}
@synthesize operate;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.operateUid = 0;
    self.operate = 0;
  }
  return self;
}
static PBSC_BroadCastUserOperateRoom* defaultPBSC_BroadCastUserOperateRoomInstance = nil;
+ (void) initialize {
  if (self == [PBSC_BroadCastUserOperateRoom class]) {
    defaultPBSC_BroadCastUserOperateRoomInstance = [[PBSC_BroadCastUserOperateRoom alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_BroadCastUserOperateRoomInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_BroadCastUserOperateRoomInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasOperateUid) {
    return NO;
  }
  if (!self.hasOperate) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasOperateUid) {
    [output writeUInt32:3 value:self.operateUid];
  }
  if (self.hasOperate) {
    [output writeUInt32:4 value:self.operate];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasOperateUid) {
    size_ += computeUInt32Size(3, self.operateUid);
  }
  if (self.hasOperate) {
    size_ += computeUInt32Size(4, self.operate);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_BroadCastUserOperateRoom*) parseFromData:(NSData*) data {
  return (PBSC_BroadCastUserOperateRoom*)[[[PBSC_BroadCastUserOperateRoom builder] mergeFromData:data] build];
}
+ (PBSC_BroadCastUserOperateRoom*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_BroadCastUserOperateRoom*)[[[PBSC_BroadCastUserOperateRoom builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_BroadCastUserOperateRoom*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_BroadCastUserOperateRoom*)[[[PBSC_BroadCastUserOperateRoom builder] mergeFromInputStream:input] build];
}
+ (PBSC_BroadCastUserOperateRoom*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_BroadCastUserOperateRoom*)[[[PBSC_BroadCastUserOperateRoom builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_BroadCastUserOperateRoom*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_BroadCastUserOperateRoom*)[[[PBSC_BroadCastUserOperateRoom builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_BroadCastUserOperateRoom*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_BroadCastUserOperateRoom*)[[[PBSC_BroadCastUserOperateRoom builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_BroadCastUserOperateRoomBuilder*) builder {
  return [[PBSC_BroadCastUserOperateRoomBuilder alloc] init];
}
+ (PBSC_BroadCastUserOperateRoomBuilder*) builderWithPrototype:(PBSC_BroadCastUserOperateRoom*) prototype {
  return [[PBSC_BroadCastUserOperateRoom builder] mergeFrom:prototype];
}
- (PBSC_BroadCastUserOperateRoomBuilder*) builder {
  return [PBSC_BroadCastUserOperateRoom builder];
}
- (PBSC_BroadCastUserOperateRoomBuilder*) toBuilder {
  return [PBSC_BroadCastUserOperateRoom builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasOperateUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operateUid", [NSNumber numberWithInteger:self.operateUid]];
  }
  if (self.hasOperate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operate", [NSNumber numberWithInteger:self.operate]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasOperateUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.operateUid] forKey: @"operateUid"];
  }
  if (self.hasOperate) {
    [dictionary setObject: [NSNumber numberWithInteger:self.operate] forKey: @"operate"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_BroadCastUserOperateRoom class]]) {
    return NO;
  }
  PBSC_BroadCastUserOperateRoom *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasOperateUid == otherMessage.hasOperateUid &&
      (!self.hasOperateUid || self.operateUid == otherMessage.operateUid) &&
      self.hasOperate == otherMessage.hasOperate &&
      (!self.hasOperate || self.operate == otherMessage.operate) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasOperateUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.operateUid] hash];
  }
  if (self.hasOperate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.operate] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_BroadCastUserOperateRoomBuilder()
@property (strong) PBSC_BroadCastUserOperateRoom* resultPbscBroadCastUserOperateRoom;
@end

@implementation PBSC_BroadCastUserOperateRoomBuilder
@synthesize resultPbscBroadCastUserOperateRoom;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscBroadCastUserOperateRoom = [[PBSC_BroadCastUserOperateRoom alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscBroadCastUserOperateRoom;
}
- (PBSC_BroadCastUserOperateRoomBuilder*) clear {
  self.resultPbscBroadCastUserOperateRoom = [[PBSC_BroadCastUserOperateRoom alloc] init];
  return self;
}
- (PBSC_BroadCastUserOperateRoomBuilder*) clone {
  return [PBSC_BroadCastUserOperateRoom builderWithPrototype:resultPbscBroadCastUserOperateRoom];
}
- (PBSC_BroadCastUserOperateRoom*) defaultInstance {
  return [PBSC_BroadCastUserOperateRoom defaultInstance];
}
- (PBSC_BroadCastUserOperateRoom*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_BroadCastUserOperateRoom*) buildPartial {
  PBSC_BroadCastUserOperateRoom* returnMe = resultPbscBroadCastUserOperateRoom;
  self.resultPbscBroadCastUserOperateRoom = nil;
  return returnMe;
}
- (PBSC_BroadCastUserOperateRoomBuilder*) mergeFrom:(PBSC_BroadCastUserOperateRoom*) other {
  if (other == [PBSC_BroadCastUserOperateRoom defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasOperateUid) {
    [self setOperateUid:other.operateUid];
  }
  if (other.hasOperate) {
    [self setOperate:other.operate];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_BroadCastUserOperateRoomBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_BroadCastUserOperateRoomBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setOperateUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setOperate:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbscBroadCastUserOperateRoom.hasSeqId;
}
- (UInt32) seqId {
  return resultPbscBroadCastUserOperateRoom.seqId;
}
- (PBSC_BroadCastUserOperateRoomBuilder*) setSeqId:(UInt32) value {
  resultPbscBroadCastUserOperateRoom.hasSeqId = YES;
  resultPbscBroadCastUserOperateRoom.seqId = value;
  return self;
}
- (PBSC_BroadCastUserOperateRoomBuilder*) clearSeqId {
  resultPbscBroadCastUserOperateRoom.hasSeqId = NO;
  resultPbscBroadCastUserOperateRoom.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbscBroadCastUserOperateRoom.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscBroadCastUserOperateRoom.roomId;
}
- (PBSC_BroadCastUserOperateRoomBuilder*) setRoomId:(UInt32) value {
  resultPbscBroadCastUserOperateRoom.hasRoomId = YES;
  resultPbscBroadCastUserOperateRoom.roomId = value;
  return self;
}
- (PBSC_BroadCastUserOperateRoomBuilder*) clearRoomId {
  resultPbscBroadCastUserOperateRoom.hasRoomId = NO;
  resultPbscBroadCastUserOperateRoom.roomId = 0;
  return self;
}
- (BOOL) hasOperateUid {
  return resultPbscBroadCastUserOperateRoom.hasOperateUid;
}
- (UInt32) operateUid {
  return resultPbscBroadCastUserOperateRoom.operateUid;
}
- (PBSC_BroadCastUserOperateRoomBuilder*) setOperateUid:(UInt32) value {
  resultPbscBroadCastUserOperateRoom.hasOperateUid = YES;
  resultPbscBroadCastUserOperateRoom.operateUid = value;
  return self;
}
- (PBSC_BroadCastUserOperateRoomBuilder*) clearOperateUid {
  resultPbscBroadCastUserOperateRoom.hasOperateUid = NO;
  resultPbscBroadCastUserOperateRoom.operateUid = 0;
  return self;
}
- (BOOL) hasOperate {
  return resultPbscBroadCastUserOperateRoom.hasOperate;
}
- (UInt32) operate {
  return resultPbscBroadCastUserOperateRoom.operate;
}
- (PBSC_BroadCastUserOperateRoomBuilder*) setOperate:(UInt32) value {
  resultPbscBroadCastUserOperateRoom.hasOperate = YES;
  resultPbscBroadCastUserOperateRoom.operate = value;
  return self;
}
- (PBSC_BroadCastUserOperateRoomBuilder*) clearOperate {
  resultPbscBroadCastUserOperateRoom.hasOperate = NO;
  resultPbscBroadCastUserOperateRoom.operate = 0;
  return self;
}
@end

@interface PBSC_NewRoundStart ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 uid;
@property UInt32 seatid;
@property UInt32 executeUid;
@property (strong) PBAppendableArray * cardsArray;
@property UInt32 curRound;
@end

@implementation PBSC_NewRoundStart

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasSeatid {
  return !!hasSeatid_;
}
- (void) setHasSeatid:(BOOL) _value_ {
  hasSeatid_ = !!_value_;
}
@synthesize seatid;
- (BOOL) hasExecuteUid {
  return !!hasExecuteUid_;
}
- (void) setHasExecuteUid:(BOOL) _value_ {
  hasExecuteUid_ = !!_value_;
}
@synthesize executeUid;
@synthesize cardsArray;
@dynamic cards;
- (BOOL) hasCurRound {
  return !!hasCurRound_;
}
- (void) setHasCurRound:(BOOL) _value_ {
  hasCurRound_ = !!_value_;
}
@synthesize curRound;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.uid = 0;
    self.seatid = 0;
    self.executeUid = 0;
    self.curRound = 0;
  }
  return self;
}
static PBSC_NewRoundStart* defaultPBSC_NewRoundStartInstance = nil;
+ (void) initialize {
  if (self == [PBSC_NewRoundStart class]) {
    defaultPBSC_NewRoundStartInstance = [[PBSC_NewRoundStart alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_NewRoundStartInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_NewRoundStartInstance;
}
- (PBArray *)cards {
  return cardsArray;
}
- (UInt32)cardsAtIndex:(NSUInteger)index {
  return [cardsArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasSeatid) {
    return NO;
  }
  if (!self.hasExecuteUid) {
    return NO;
  }
  if (!self.hasCurRound) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasUid) {
    [output writeUInt32:3 value:self.uid];
  }
  if (self.hasSeatid) {
    [output writeUInt32:4 value:self.seatid];
  }
  if (self.hasExecuteUid) {
    [output writeUInt32:5 value:self.executeUid];
  }
  const NSUInteger cardsArrayCount = self.cardsArray.count;
  if (cardsArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.cardsArray.data;
    for (NSUInteger i = 0; i < cardsArrayCount; ++i) {
      [output writeUInt32:6 value:values[i]];
    }
  }
  if (self.hasCurRound) {
    [output writeUInt32:7 value:self.curRound];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(3, self.uid);
  }
  if (self.hasSeatid) {
    size_ += computeUInt32Size(4, self.seatid);
  }
  if (self.hasExecuteUid) {
    size_ += computeUInt32Size(5, self.executeUid);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.cardsArray.count;
    const UInt32 *values = (const UInt32 *)self.cardsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasCurRound) {
    size_ += computeUInt32Size(7, self.curRound);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_NewRoundStart*) parseFromData:(NSData*) data {
  return (PBSC_NewRoundStart*)[[[PBSC_NewRoundStart builder] mergeFromData:data] build];
}
+ (PBSC_NewRoundStart*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_NewRoundStart*)[[[PBSC_NewRoundStart builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_NewRoundStart*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_NewRoundStart*)[[[PBSC_NewRoundStart builder] mergeFromInputStream:input] build];
}
+ (PBSC_NewRoundStart*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_NewRoundStart*)[[[PBSC_NewRoundStart builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_NewRoundStart*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_NewRoundStart*)[[[PBSC_NewRoundStart builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_NewRoundStart*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_NewRoundStart*)[[[PBSC_NewRoundStart builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_NewRoundStartBuilder*) builder {
  return [[PBSC_NewRoundStartBuilder alloc] init];
}
+ (PBSC_NewRoundStartBuilder*) builderWithPrototype:(PBSC_NewRoundStart*) prototype {
  return [[PBSC_NewRoundStart builder] mergeFrom:prototype];
}
- (PBSC_NewRoundStartBuilder*) builder {
  return [PBSC_NewRoundStart builder];
}
- (PBSC_NewRoundStartBuilder*) toBuilder {
  return [PBSC_NewRoundStart builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasSeatid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seatid", [NSNumber numberWithInteger:self.seatid]];
  }
  if (self.hasExecuteUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"executeUid", [NSNumber numberWithInteger:self.executeUid]];
  }
  [self.cardsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cards", obj];
  }];
  if (self.hasCurRound) {
    [output appendFormat:@"%@%@: %@\n", indent, @"curRound", [NSNumber numberWithInteger:self.curRound]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasSeatid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seatid] forKey: @"seatid"];
  }
  if (self.hasExecuteUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.executeUid] forKey: @"executeUid"];
  }
  NSMutableArray * cardsArrayArray = [NSMutableArray new];
  NSUInteger cardsArrayCount=self.cardsArray.count;
  for(int i=0;i<cardsArrayCount;i++){
    [cardsArrayArray addObject: @([self.cardsArray uint32AtIndex:i])];
  }
  [dictionary setObject: cardsArrayArray forKey: @"cards"];
  if (self.hasCurRound) {
    [dictionary setObject: [NSNumber numberWithInteger:self.curRound] forKey: @"curRound"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_NewRoundStart class]]) {
    return NO;
  }
  PBSC_NewRoundStart *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasSeatid == otherMessage.hasSeatid &&
      (!self.hasSeatid || self.seatid == otherMessage.seatid) &&
      self.hasExecuteUid == otherMessage.hasExecuteUid &&
      (!self.hasExecuteUid || self.executeUid == otherMessage.executeUid) &&
      [self.cardsArray isEqualToArray:otherMessage.cardsArray] &&
      self.hasCurRound == otherMessage.hasCurRound &&
      (!self.hasCurRound || self.curRound == otherMessage.curRound) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasSeatid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seatid] hash];
  }
  if (self.hasExecuteUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.executeUid] hash];
  }
  [self.cardsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasCurRound) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.curRound] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_NewRoundStartBuilder()
@property (strong) PBSC_NewRoundStart* resultPbscNewRoundStart;
@end

@implementation PBSC_NewRoundStartBuilder
@synthesize resultPbscNewRoundStart;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscNewRoundStart = [[PBSC_NewRoundStart alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscNewRoundStart;
}
- (PBSC_NewRoundStartBuilder*) clear {
  self.resultPbscNewRoundStart = [[PBSC_NewRoundStart alloc] init];
  return self;
}
- (PBSC_NewRoundStartBuilder*) clone {
  return [PBSC_NewRoundStart builderWithPrototype:resultPbscNewRoundStart];
}
- (PBSC_NewRoundStart*) defaultInstance {
  return [PBSC_NewRoundStart defaultInstance];
}
- (PBSC_NewRoundStart*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_NewRoundStart*) buildPartial {
  PBSC_NewRoundStart* returnMe = resultPbscNewRoundStart;
  self.resultPbscNewRoundStart = nil;
  return returnMe;
}
- (PBSC_NewRoundStartBuilder*) mergeFrom:(PBSC_NewRoundStart*) other {
  if (other == [PBSC_NewRoundStart defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasSeatid) {
    [self setSeatid:other.seatid];
  }
  if (other.hasExecuteUid) {
    [self setExecuteUid:other.executeUid];
  }
  if (other.cardsArray.count > 0) {
    if (resultPbscNewRoundStart.cardsArray == nil) {
      resultPbscNewRoundStart.cardsArray = [other.cardsArray copy];
    } else {
      [resultPbscNewRoundStart.cardsArray appendArray:other.cardsArray];
    }
  }
  if (other.hasCurRound) {
    [self setCurRound:other.curRound];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_NewRoundStartBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_NewRoundStartBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setSeatid:[input readUInt32]];
        break;
      }
      case 40: {
        [self setExecuteUid:[input readUInt32]];
        break;
      }
      case 48: {
        [self addCards:[input readUInt32]];
        break;
      }
      case 56: {
        [self setCurRound:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbscNewRoundStart.hasSeqId;
}
- (UInt32) seqId {
  return resultPbscNewRoundStart.seqId;
}
- (PBSC_NewRoundStartBuilder*) setSeqId:(UInt32) value {
  resultPbscNewRoundStart.hasSeqId = YES;
  resultPbscNewRoundStart.seqId = value;
  return self;
}
- (PBSC_NewRoundStartBuilder*) clearSeqId {
  resultPbscNewRoundStart.hasSeqId = NO;
  resultPbscNewRoundStart.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbscNewRoundStart.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscNewRoundStart.roomId;
}
- (PBSC_NewRoundStartBuilder*) setRoomId:(UInt32) value {
  resultPbscNewRoundStart.hasRoomId = YES;
  resultPbscNewRoundStart.roomId = value;
  return self;
}
- (PBSC_NewRoundStartBuilder*) clearRoomId {
  resultPbscNewRoundStart.hasRoomId = NO;
  resultPbscNewRoundStart.roomId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbscNewRoundStart.hasUid;
}
- (UInt32) uid {
  return resultPbscNewRoundStart.uid;
}
- (PBSC_NewRoundStartBuilder*) setUid:(UInt32) value {
  resultPbscNewRoundStart.hasUid = YES;
  resultPbscNewRoundStart.uid = value;
  return self;
}
- (PBSC_NewRoundStartBuilder*) clearUid {
  resultPbscNewRoundStart.hasUid = NO;
  resultPbscNewRoundStart.uid = 0;
  return self;
}
- (BOOL) hasSeatid {
  return resultPbscNewRoundStart.hasSeatid;
}
- (UInt32) seatid {
  return resultPbscNewRoundStart.seatid;
}
- (PBSC_NewRoundStartBuilder*) setSeatid:(UInt32) value {
  resultPbscNewRoundStart.hasSeatid = YES;
  resultPbscNewRoundStart.seatid = value;
  return self;
}
- (PBSC_NewRoundStartBuilder*) clearSeatid {
  resultPbscNewRoundStart.hasSeatid = NO;
  resultPbscNewRoundStart.seatid = 0;
  return self;
}
- (BOOL) hasExecuteUid {
  return resultPbscNewRoundStart.hasExecuteUid;
}
- (UInt32) executeUid {
  return resultPbscNewRoundStart.executeUid;
}
- (PBSC_NewRoundStartBuilder*) setExecuteUid:(UInt32) value {
  resultPbscNewRoundStart.hasExecuteUid = YES;
  resultPbscNewRoundStart.executeUid = value;
  return self;
}
- (PBSC_NewRoundStartBuilder*) clearExecuteUid {
  resultPbscNewRoundStart.hasExecuteUid = NO;
  resultPbscNewRoundStart.executeUid = 0;
  return self;
}
- (PBAppendableArray *)cards {
  return resultPbscNewRoundStart.cardsArray;
}
- (UInt32)cardsAtIndex:(NSUInteger)index {
  return [resultPbscNewRoundStart cardsAtIndex:index];
}
- (PBSC_NewRoundStartBuilder *)addCards:(UInt32)value {
  if (resultPbscNewRoundStart.cardsArray == nil) {
    resultPbscNewRoundStart.cardsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultPbscNewRoundStart.cardsArray addUint32:value];
  return self;
}
- (PBSC_NewRoundStartBuilder *)setCardsArray:(NSArray *)array {
  resultPbscNewRoundStart.cardsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (PBSC_NewRoundStartBuilder *)setCardsValues:(const UInt32 *)values count:(NSUInteger)count {
  resultPbscNewRoundStart.cardsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (PBSC_NewRoundStartBuilder *)clearCards {
  resultPbscNewRoundStart.cardsArray = nil;
  return self;
}
- (BOOL) hasCurRound {
  return resultPbscNewRoundStart.hasCurRound;
}
- (UInt32) curRound {
  return resultPbscNewRoundStart.curRound;
}
- (PBSC_NewRoundStartBuilder*) setCurRound:(UInt32) value {
  resultPbscNewRoundStart.hasCurRound = YES;
  resultPbscNewRoundStart.curRound = value;
  return self;
}
- (PBSC_NewRoundStartBuilder*) clearCurRound {
  resultPbscNewRoundStart.hasCurRound = NO;
  resultPbscNewRoundStart.curRound = 0;
  return self;
}
@end

@interface PBCS_NewRoundStartUserAck ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 uid;
@property UInt32 seatid;
@end

@implementation PBCS_NewRoundStartUserAck

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasSeatid {
  return !!hasSeatid_;
}
- (void) setHasSeatid:(BOOL) _value_ {
  hasSeatid_ = !!_value_;
}
@synthesize seatid;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.uid = 0;
    self.seatid = 0;
  }
  return self;
}
static PBCS_NewRoundStartUserAck* defaultPBCS_NewRoundStartUserAckInstance = nil;
+ (void) initialize {
  if (self == [PBCS_NewRoundStartUserAck class]) {
    defaultPBCS_NewRoundStartUserAckInstance = [[PBCS_NewRoundStartUserAck alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCS_NewRoundStartUserAckInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCS_NewRoundStartUserAckInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasSeatid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasUid) {
    [output writeUInt32:3 value:self.uid];
  }
  if (self.hasSeatid) {
    [output writeUInt32:4 value:self.seatid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(3, self.uid);
  }
  if (self.hasSeatid) {
    size_ += computeUInt32Size(4, self.seatid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBCS_NewRoundStartUserAck*) parseFromData:(NSData*) data {
  return (PBCS_NewRoundStartUserAck*)[[[PBCS_NewRoundStartUserAck builder] mergeFromData:data] build];
}
+ (PBCS_NewRoundStartUserAck*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_NewRoundStartUserAck*)[[[PBCS_NewRoundStartUserAck builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCS_NewRoundStartUserAck*) parseFromInputStream:(NSInputStream*) input {
  return (PBCS_NewRoundStartUserAck*)[[[PBCS_NewRoundStartUserAck builder] mergeFromInputStream:input] build];
}
+ (PBCS_NewRoundStartUserAck*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_NewRoundStartUserAck*)[[[PBCS_NewRoundStartUserAck builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_NewRoundStartUserAck*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCS_NewRoundStartUserAck*)[[[PBCS_NewRoundStartUserAck builder] mergeFromCodedInputStream:input] build];
}
+ (PBCS_NewRoundStartUserAck*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_NewRoundStartUserAck*)[[[PBCS_NewRoundStartUserAck builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_NewRoundStartUserAckBuilder*) builder {
  return [[PBCS_NewRoundStartUserAckBuilder alloc] init];
}
+ (PBCS_NewRoundStartUserAckBuilder*) builderWithPrototype:(PBCS_NewRoundStartUserAck*) prototype {
  return [[PBCS_NewRoundStartUserAck builder] mergeFrom:prototype];
}
- (PBCS_NewRoundStartUserAckBuilder*) builder {
  return [PBCS_NewRoundStartUserAck builder];
}
- (PBCS_NewRoundStartUserAckBuilder*) toBuilder {
  return [PBCS_NewRoundStartUserAck builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasSeatid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seatid", [NSNumber numberWithInteger:self.seatid]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasSeatid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seatid] forKey: @"seatid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBCS_NewRoundStartUserAck class]]) {
    return NO;
  }
  PBCS_NewRoundStartUserAck *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasSeatid == otherMessage.hasSeatid &&
      (!self.hasSeatid || self.seatid == otherMessage.seatid) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasSeatid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seatid] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCS_NewRoundStartUserAckBuilder()
@property (strong) PBCS_NewRoundStartUserAck* resultPbcsNewRoundStartUserAck;
@end

@implementation PBCS_NewRoundStartUserAckBuilder
@synthesize resultPbcsNewRoundStartUserAck;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcsNewRoundStartUserAck = [[PBCS_NewRoundStartUserAck alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcsNewRoundStartUserAck;
}
- (PBCS_NewRoundStartUserAckBuilder*) clear {
  self.resultPbcsNewRoundStartUserAck = [[PBCS_NewRoundStartUserAck alloc] init];
  return self;
}
- (PBCS_NewRoundStartUserAckBuilder*) clone {
  return [PBCS_NewRoundStartUserAck builderWithPrototype:resultPbcsNewRoundStartUserAck];
}
- (PBCS_NewRoundStartUserAck*) defaultInstance {
  return [PBCS_NewRoundStartUserAck defaultInstance];
}
- (PBCS_NewRoundStartUserAck*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCS_NewRoundStartUserAck*) buildPartial {
  PBCS_NewRoundStartUserAck* returnMe = resultPbcsNewRoundStartUserAck;
  self.resultPbcsNewRoundStartUserAck = nil;
  return returnMe;
}
- (PBCS_NewRoundStartUserAckBuilder*) mergeFrom:(PBCS_NewRoundStartUserAck*) other {
  if (other == [PBCS_NewRoundStartUserAck defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasSeatid) {
    [self setSeatid:other.seatid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCS_NewRoundStartUserAckBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCS_NewRoundStartUserAckBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setSeatid:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbcsNewRoundStartUserAck.hasSeqId;
}
- (UInt32) seqId {
  return resultPbcsNewRoundStartUserAck.seqId;
}
- (PBCS_NewRoundStartUserAckBuilder*) setSeqId:(UInt32) value {
  resultPbcsNewRoundStartUserAck.hasSeqId = YES;
  resultPbcsNewRoundStartUserAck.seqId = value;
  return self;
}
- (PBCS_NewRoundStartUserAckBuilder*) clearSeqId {
  resultPbcsNewRoundStartUserAck.hasSeqId = NO;
  resultPbcsNewRoundStartUserAck.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbcsNewRoundStartUserAck.hasRoomId;
}
- (UInt32) roomId {
  return resultPbcsNewRoundStartUserAck.roomId;
}
- (PBCS_NewRoundStartUserAckBuilder*) setRoomId:(UInt32) value {
  resultPbcsNewRoundStartUserAck.hasRoomId = YES;
  resultPbcsNewRoundStartUserAck.roomId = value;
  return self;
}
- (PBCS_NewRoundStartUserAckBuilder*) clearRoomId {
  resultPbcsNewRoundStartUserAck.hasRoomId = NO;
  resultPbcsNewRoundStartUserAck.roomId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbcsNewRoundStartUserAck.hasUid;
}
- (UInt32) uid {
  return resultPbcsNewRoundStartUserAck.uid;
}
- (PBCS_NewRoundStartUserAckBuilder*) setUid:(UInt32) value {
  resultPbcsNewRoundStartUserAck.hasUid = YES;
  resultPbcsNewRoundStartUserAck.uid = value;
  return self;
}
- (PBCS_NewRoundStartUserAckBuilder*) clearUid {
  resultPbcsNewRoundStartUserAck.hasUid = NO;
  resultPbcsNewRoundStartUserAck.uid = 0;
  return self;
}
- (BOOL) hasSeatid {
  return resultPbcsNewRoundStartUserAck.hasSeatid;
}
- (UInt32) seatid {
  return resultPbcsNewRoundStartUserAck.seatid;
}
- (PBCS_NewRoundStartUserAckBuilder*) setSeatid:(UInt32) value {
  resultPbcsNewRoundStartUserAck.hasSeatid = YES;
  resultPbcsNewRoundStartUserAck.seatid = value;
  return self;
}
- (PBCS_NewRoundStartUserAckBuilder*) clearSeatid {
  resultPbcsNewRoundStartUserAck.hasSeatid = NO;
  resultPbcsNewRoundStartUserAck.seatid = 0;
  return self;
}
@end

@interface PBCS_UserOutCard ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 uid;
@property UInt32 card;
@end

@implementation PBCS_UserOutCard

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasCard {
  return !!hasCard_;
}
- (void) setHasCard:(BOOL) _value_ {
  hasCard_ = !!_value_;
}
@synthesize card;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.uid = 0;
    self.card = 0;
  }
  return self;
}
static PBCS_UserOutCard* defaultPBCS_UserOutCardInstance = nil;
+ (void) initialize {
  if (self == [PBCS_UserOutCard class]) {
    defaultPBCS_UserOutCardInstance = [[PBCS_UserOutCard alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCS_UserOutCardInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCS_UserOutCardInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasCard) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasUid) {
    [output writeUInt32:3 value:self.uid];
  }
  if (self.hasCard) {
    [output writeUInt32:4 value:self.card];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(3, self.uid);
  }
  if (self.hasCard) {
    size_ += computeUInt32Size(4, self.card);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBCS_UserOutCard*) parseFromData:(NSData*) data {
  return (PBCS_UserOutCard*)[[[PBCS_UserOutCard builder] mergeFromData:data] build];
}
+ (PBCS_UserOutCard*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_UserOutCard*)[[[PBCS_UserOutCard builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCS_UserOutCard*) parseFromInputStream:(NSInputStream*) input {
  return (PBCS_UserOutCard*)[[[PBCS_UserOutCard builder] mergeFromInputStream:input] build];
}
+ (PBCS_UserOutCard*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_UserOutCard*)[[[PBCS_UserOutCard builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_UserOutCard*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCS_UserOutCard*)[[[PBCS_UserOutCard builder] mergeFromCodedInputStream:input] build];
}
+ (PBCS_UserOutCard*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_UserOutCard*)[[[PBCS_UserOutCard builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_UserOutCardBuilder*) builder {
  return [[PBCS_UserOutCardBuilder alloc] init];
}
+ (PBCS_UserOutCardBuilder*) builderWithPrototype:(PBCS_UserOutCard*) prototype {
  return [[PBCS_UserOutCard builder] mergeFrom:prototype];
}
- (PBCS_UserOutCardBuilder*) builder {
  return [PBCS_UserOutCard builder];
}
- (PBCS_UserOutCardBuilder*) toBuilder {
  return [PBCS_UserOutCard builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"card", [NSNumber numberWithInteger:self.card]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasCard) {
    [dictionary setObject: [NSNumber numberWithInteger:self.card] forKey: @"card"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBCS_UserOutCard class]]) {
    return NO;
  }
  PBCS_UserOutCard *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasCard == otherMessage.hasCard &&
      (!self.hasCard || self.card == otherMessage.card) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasCard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.card] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCS_UserOutCardBuilder()
@property (strong) PBCS_UserOutCard* resultPbcsUserOutCard;
@end

@implementation PBCS_UserOutCardBuilder
@synthesize resultPbcsUserOutCard;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcsUserOutCard = [[PBCS_UserOutCard alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcsUserOutCard;
}
- (PBCS_UserOutCardBuilder*) clear {
  self.resultPbcsUserOutCard = [[PBCS_UserOutCard alloc] init];
  return self;
}
- (PBCS_UserOutCardBuilder*) clone {
  return [PBCS_UserOutCard builderWithPrototype:resultPbcsUserOutCard];
}
- (PBCS_UserOutCard*) defaultInstance {
  return [PBCS_UserOutCard defaultInstance];
}
- (PBCS_UserOutCard*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCS_UserOutCard*) buildPartial {
  PBCS_UserOutCard* returnMe = resultPbcsUserOutCard;
  self.resultPbcsUserOutCard = nil;
  return returnMe;
}
- (PBCS_UserOutCardBuilder*) mergeFrom:(PBCS_UserOutCard*) other {
  if (other == [PBCS_UserOutCard defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasCard) {
    [self setCard:other.card];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCS_UserOutCardBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCS_UserOutCardBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setCard:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbcsUserOutCard.hasSeqId;
}
- (UInt32) seqId {
  return resultPbcsUserOutCard.seqId;
}
- (PBCS_UserOutCardBuilder*) setSeqId:(UInt32) value {
  resultPbcsUserOutCard.hasSeqId = YES;
  resultPbcsUserOutCard.seqId = value;
  return self;
}
- (PBCS_UserOutCardBuilder*) clearSeqId {
  resultPbcsUserOutCard.hasSeqId = NO;
  resultPbcsUserOutCard.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbcsUserOutCard.hasRoomId;
}
- (UInt32) roomId {
  return resultPbcsUserOutCard.roomId;
}
- (PBCS_UserOutCardBuilder*) setRoomId:(UInt32) value {
  resultPbcsUserOutCard.hasRoomId = YES;
  resultPbcsUserOutCard.roomId = value;
  return self;
}
- (PBCS_UserOutCardBuilder*) clearRoomId {
  resultPbcsUserOutCard.hasRoomId = NO;
  resultPbcsUserOutCard.roomId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbcsUserOutCard.hasUid;
}
- (UInt32) uid {
  return resultPbcsUserOutCard.uid;
}
- (PBCS_UserOutCardBuilder*) setUid:(UInt32) value {
  resultPbcsUserOutCard.hasUid = YES;
  resultPbcsUserOutCard.uid = value;
  return self;
}
- (PBCS_UserOutCardBuilder*) clearUid {
  resultPbcsUserOutCard.hasUid = NO;
  resultPbcsUserOutCard.uid = 0;
  return self;
}
- (BOOL) hasCard {
  return resultPbcsUserOutCard.hasCard;
}
- (UInt32) card {
  return resultPbcsUserOutCard.card;
}
- (PBCS_UserOutCardBuilder*) setCard:(UInt32) value {
  resultPbcsUserOutCard.hasCard = YES;
  resultPbcsUserOutCard.card = value;
  return self;
}
- (PBCS_UserOutCardBuilder*) clearCard {
  resultPbcsUserOutCard.hasCard = NO;
  resultPbcsUserOutCard.card = 0;
  return self;
}
@end

@interface PBSC_UserOutCardRes ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 uid;
@property UInt32 card;
@end

@implementation PBSC_UserOutCardRes

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasCard {
  return !!hasCard_;
}
- (void) setHasCard:(BOOL) _value_ {
  hasCard_ = !!_value_;
}
@synthesize card;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.uid = 0;
    self.card = 0;
  }
  return self;
}
static PBSC_UserOutCardRes* defaultPBSC_UserOutCardResInstance = nil;
+ (void) initialize {
  if (self == [PBSC_UserOutCardRes class]) {
    defaultPBSC_UserOutCardResInstance = [[PBSC_UserOutCardRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_UserOutCardResInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_UserOutCardResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasCard) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasUid) {
    [output writeUInt32:3 value:self.uid];
  }
  if (self.hasCard) {
    [output writeUInt32:4 value:self.card];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(3, self.uid);
  }
  if (self.hasCard) {
    size_ += computeUInt32Size(4, self.card);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_UserOutCardRes*) parseFromData:(NSData*) data {
  return (PBSC_UserOutCardRes*)[[[PBSC_UserOutCardRes builder] mergeFromData:data] build];
}
+ (PBSC_UserOutCardRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserOutCardRes*)[[[PBSC_UserOutCardRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserOutCardRes*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_UserOutCardRes*)[[[PBSC_UserOutCardRes builder] mergeFromInputStream:input] build];
}
+ (PBSC_UserOutCardRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserOutCardRes*)[[[PBSC_UserOutCardRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserOutCardRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_UserOutCardRes*)[[[PBSC_UserOutCardRes builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_UserOutCardRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserOutCardRes*)[[[PBSC_UserOutCardRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserOutCardResBuilder*) builder {
  return [[PBSC_UserOutCardResBuilder alloc] init];
}
+ (PBSC_UserOutCardResBuilder*) builderWithPrototype:(PBSC_UserOutCardRes*) prototype {
  return [[PBSC_UserOutCardRes builder] mergeFrom:prototype];
}
- (PBSC_UserOutCardResBuilder*) builder {
  return [PBSC_UserOutCardRes builder];
}
- (PBSC_UserOutCardResBuilder*) toBuilder {
  return [PBSC_UserOutCardRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"card", [NSNumber numberWithInteger:self.card]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasCard) {
    [dictionary setObject: [NSNumber numberWithInteger:self.card] forKey: @"card"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_UserOutCardRes class]]) {
    return NO;
  }
  PBSC_UserOutCardRes *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasCard == otherMessage.hasCard &&
      (!self.hasCard || self.card == otherMessage.card) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasCard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.card] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_UserOutCardResBuilder()
@property (strong) PBSC_UserOutCardRes* resultPbscUserOutCardRes;
@end

@implementation PBSC_UserOutCardResBuilder
@synthesize resultPbscUserOutCardRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscUserOutCardRes = [[PBSC_UserOutCardRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscUserOutCardRes;
}
- (PBSC_UserOutCardResBuilder*) clear {
  self.resultPbscUserOutCardRes = [[PBSC_UserOutCardRes alloc] init];
  return self;
}
- (PBSC_UserOutCardResBuilder*) clone {
  return [PBSC_UserOutCardRes builderWithPrototype:resultPbscUserOutCardRes];
}
- (PBSC_UserOutCardRes*) defaultInstance {
  return [PBSC_UserOutCardRes defaultInstance];
}
- (PBSC_UserOutCardRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_UserOutCardRes*) buildPartial {
  PBSC_UserOutCardRes* returnMe = resultPbscUserOutCardRes;
  self.resultPbscUserOutCardRes = nil;
  return returnMe;
}
- (PBSC_UserOutCardResBuilder*) mergeFrom:(PBSC_UserOutCardRes*) other {
  if (other == [PBSC_UserOutCardRes defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasCard) {
    [self setCard:other.card];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_UserOutCardResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_UserOutCardResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setCard:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbscUserOutCardRes.hasSeqId;
}
- (UInt32) seqId {
  return resultPbscUserOutCardRes.seqId;
}
- (PBSC_UserOutCardResBuilder*) setSeqId:(UInt32) value {
  resultPbscUserOutCardRes.hasSeqId = YES;
  resultPbscUserOutCardRes.seqId = value;
  return self;
}
- (PBSC_UserOutCardResBuilder*) clearSeqId {
  resultPbscUserOutCardRes.hasSeqId = NO;
  resultPbscUserOutCardRes.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbscUserOutCardRes.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscUserOutCardRes.roomId;
}
- (PBSC_UserOutCardResBuilder*) setRoomId:(UInt32) value {
  resultPbscUserOutCardRes.hasRoomId = YES;
  resultPbscUserOutCardRes.roomId = value;
  return self;
}
- (PBSC_UserOutCardResBuilder*) clearRoomId {
  resultPbscUserOutCardRes.hasRoomId = NO;
  resultPbscUserOutCardRes.roomId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbscUserOutCardRes.hasUid;
}
- (UInt32) uid {
  return resultPbscUserOutCardRes.uid;
}
- (PBSC_UserOutCardResBuilder*) setUid:(UInt32) value {
  resultPbscUserOutCardRes.hasUid = YES;
  resultPbscUserOutCardRes.uid = value;
  return self;
}
- (PBSC_UserOutCardResBuilder*) clearUid {
  resultPbscUserOutCardRes.hasUid = NO;
  resultPbscUserOutCardRes.uid = 0;
  return self;
}
- (BOOL) hasCard {
  return resultPbscUserOutCardRes.hasCard;
}
- (UInt32) card {
  return resultPbscUserOutCardRes.card;
}
- (PBSC_UserOutCardResBuilder*) setCard:(UInt32) value {
  resultPbscUserOutCardRes.hasCard = YES;
  resultPbscUserOutCardRes.card = value;
  return self;
}
- (PBSC_UserOutCardResBuilder*) clearCard {
  resultPbscUserOutCardRes.hasCard = NO;
  resultPbscUserOutCardRes.card = 0;
  return self;
}
@end

@interface PBSC_UserOutCardNotify ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 executeUid;
@property UInt32 card;
@property (strong) PBAppendableArray * cardListArray;
@property BOOL operateAble;
@property (strong) PBAppendableArray * operateCodesArray;
@property (strong) NSMutableArray<PBtagWeaveItem*> * candidatesArray;
@property (strong) PBtagWeaveItem* additionCards;
@end

@implementation PBSC_UserOutCardNotify

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasExecuteUid {
  return !!hasExecuteUid_;
}
- (void) setHasExecuteUid:(BOOL) _value_ {
  hasExecuteUid_ = !!_value_;
}
@synthesize executeUid;
- (BOOL) hasCard {
  return !!hasCard_;
}
- (void) setHasCard:(BOOL) _value_ {
  hasCard_ = !!_value_;
}
@synthesize card;
@synthesize cardListArray;
@dynamic cardList;
- (BOOL) hasOperateAble {
  return !!hasOperateAble_;
}
- (void) setHasOperateAble:(BOOL) _value_ {
  hasOperateAble_ = !!_value_;
}
- (BOOL) operateAble {
  return !!operateAble_;
}
- (void) setOperateAble:(BOOL) _value_ {
  operateAble_ = !!_value_;
}
@synthesize operateCodesArray;
@dynamic operateCodes;
@synthesize candidatesArray;
@dynamic candidates;
- (BOOL) hasAdditionCards {
  return !!hasAdditionCards_;
}
- (void) setHasAdditionCards:(BOOL) _value_ {
  hasAdditionCards_ = !!_value_;
}
@synthesize additionCards;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.executeUid = 0;
    self.card = 0;
    self.operateAble = NO;
    self.additionCards = [PBtagWeaveItem defaultInstance];
  }
  return self;
}
static PBSC_UserOutCardNotify* defaultPBSC_UserOutCardNotifyInstance = nil;
+ (void) initialize {
  if (self == [PBSC_UserOutCardNotify class]) {
    defaultPBSC_UserOutCardNotifyInstance = [[PBSC_UserOutCardNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_UserOutCardNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_UserOutCardNotifyInstance;
}
- (PBArray *)cardList {
  return cardListArray;
}
- (UInt32)cardListAtIndex:(NSUInteger)index {
  return [cardListArray uint32AtIndex:index];
}
- (PBArray *)operateCodes {
  return operateCodesArray;
}
- (OperateCode)operateCodesAtIndex:(NSUInteger)index {
  return (OperateCode)[operateCodesArray enumAtIndex:index];
}
- (NSArray<PBtagWeaveItem*> *)candidates {
  return candidatesArray;
}
- (PBtagWeaveItem*)candidatesAtIndex:(NSUInteger)index {
  return [candidatesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasExecuteUid) {
    return NO;
  }
  if (!self.hasCard) {
    return NO;
  }
  if (!self.hasOperateAble) {
    return NO;
  }
  __block BOOL isInitcandidates = YES;
   [self.candidates enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcandidates = NO;
      *stop = YES;
    }
  }];
  if (!isInitcandidates) return isInitcandidates;
  if (self.hasAdditionCards) {
    if (!self.additionCards.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasExecuteUid) {
    [output writeUInt32:3 value:self.executeUid];
  }
  if (self.hasCard) {
    [output writeUInt32:4 value:self.card];
  }
  const NSUInteger cardListArrayCount = self.cardListArray.count;
  if (cardListArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.cardListArray.data;
    for (NSUInteger i = 0; i < cardListArrayCount; ++i) {
      [output writeUInt32:5 value:values[i]];
    }
  }
  if (self.hasOperateAble) {
    [output writeBool:6 value:self.operateAble];
  }
  const NSUInteger operateCodesArrayCount = self.operateCodesArray.count;
  const OperateCode *operateCodesArrayValues = (const OperateCode *)self.operateCodesArray.data;
  for (NSUInteger i = 0; i < operateCodesArrayCount; ++i) {
    [output writeEnum:7 value:operateCodesArrayValues[i]];
  }
  [self.candidatesArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:8 value:element];
  }];
  if (self.hasAdditionCards) {
    [output writeMessage:9 value:self.additionCards];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasExecuteUid) {
    size_ += computeUInt32Size(3, self.executeUid);
  }
  if (self.hasCard) {
    size_ += computeUInt32Size(4, self.card);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.cardListArray.count;
    const UInt32 *values = (const UInt32 *)self.cardListArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasOperateAble) {
    size_ += computeBoolSize(6, self.operateAble);
  }
  {
    SInt32 dataSize = 0;
    const NSUInteger count = self.operateCodesArray.count;
    const OperateCode *values = (const OperateCode *)self.operateCodesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeEnumSizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  [self.candidatesArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(8, element);
  }];
  if (self.hasAdditionCards) {
    size_ += computeMessageSize(9, self.additionCards);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_UserOutCardNotify*) parseFromData:(NSData*) data {
  return (PBSC_UserOutCardNotify*)[[[PBSC_UserOutCardNotify builder] mergeFromData:data] build];
}
+ (PBSC_UserOutCardNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserOutCardNotify*)[[[PBSC_UserOutCardNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserOutCardNotify*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_UserOutCardNotify*)[[[PBSC_UserOutCardNotify builder] mergeFromInputStream:input] build];
}
+ (PBSC_UserOutCardNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserOutCardNotify*)[[[PBSC_UserOutCardNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserOutCardNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_UserOutCardNotify*)[[[PBSC_UserOutCardNotify builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_UserOutCardNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserOutCardNotify*)[[[PBSC_UserOutCardNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserOutCardNotifyBuilder*) builder {
  return [[PBSC_UserOutCardNotifyBuilder alloc] init];
}
+ (PBSC_UserOutCardNotifyBuilder*) builderWithPrototype:(PBSC_UserOutCardNotify*) prototype {
  return [[PBSC_UserOutCardNotify builder] mergeFrom:prototype];
}
- (PBSC_UserOutCardNotifyBuilder*) builder {
  return [PBSC_UserOutCardNotify builder];
}
- (PBSC_UserOutCardNotifyBuilder*) toBuilder {
  return [PBSC_UserOutCardNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasExecuteUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"executeUid", [NSNumber numberWithInteger:self.executeUid]];
  }
  if (self.hasCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"card", [NSNumber numberWithInteger:self.card]];
  }
  [self.cardListArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cardList", obj];
  }];
  if (self.hasOperateAble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operateAble", [NSNumber numberWithBool:self.operateAble]];
  }
  [self.operateCodesArray enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operateCodes", NSStringFromOperateCode([(NSNumber *)element intValue])];
  }];
  [self.candidatesArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"candidates"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAdditionCards) {
    [output appendFormat:@"%@%@ {\n", indent, @"additionCards"];
    [self.additionCards writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasExecuteUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.executeUid] forKey: @"executeUid"];
  }
  if (self.hasCard) {
    [dictionary setObject: [NSNumber numberWithInteger:self.card] forKey: @"card"];
  }
  NSMutableArray * cardListArrayArray = [NSMutableArray new];
  NSUInteger cardListArrayCount=self.cardListArray.count;
  for(int i=0;i<cardListArrayCount;i++){
    [cardListArrayArray addObject: @([self.cardListArray uint32AtIndex:i])];
  }
  [dictionary setObject: cardListArrayArray forKey: @"cardList"];
  if (self.hasOperateAble) {
    [dictionary setObject: [NSNumber numberWithBool:self.operateAble] forKey: @"operateAble"];
  }
  const NSUInteger operateCodesArrayCount = self.operateCodesArray.count;
  if (operateCodesArrayCount > 0) {
    const OperateCode *operateCodesArrayValues = (const OperateCode *)self.operateCodesArray.data;
    NSMutableArray * operateCodesArrayArray = [NSMutableArray new];
    for (NSUInteger i = 0; i < operateCodesArrayCount; ++i) {
      [operateCodesArrayArray addObject: @(operateCodesArrayValues[i])];
    }
    [dictionary setObject: operateCodesArrayArray forKey: @"operateCodes"];
  }
  for (PBtagWeaveItem* element in self.candidatesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"candidates"];
  }
  if (self.hasAdditionCards) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.additionCards storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"additionCards"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_UserOutCardNotify class]]) {
    return NO;
  }
  PBSC_UserOutCardNotify *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasExecuteUid == otherMessage.hasExecuteUid &&
      (!self.hasExecuteUid || self.executeUid == otherMessage.executeUid) &&
      self.hasCard == otherMessage.hasCard &&
      (!self.hasCard || self.card == otherMessage.card) &&
      [self.cardListArray isEqualToArray:otherMessage.cardListArray] &&
      self.hasOperateAble == otherMessage.hasOperateAble &&
      (!self.hasOperateAble || self.operateAble == otherMessage.operateAble) &&
      [self.operateCodesArray isEqualToArray:otherMessage.operateCodesArray] &&
      [self.candidatesArray isEqualToArray:otherMessage.candidatesArray] &&
      self.hasAdditionCards == otherMessage.hasAdditionCards &&
      (!self.hasAdditionCards || [self.additionCards isEqual:otherMessage.additionCards]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasExecuteUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.executeUid] hash];
  }
  if (self.hasCard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.card] hash];
  }
  [self.cardListArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasOperateAble) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.operateAble] hash];
  }
  [self.operateCodesArray enumerateObjectsUsingBlock:^(NSNumber* element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + element.longValue;
  }];
  [self.candidatesArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAdditionCards) {
    hashCode = hashCode * 31 + [self.additionCards hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_UserOutCardNotifyBuilder()
@property (strong) PBSC_UserOutCardNotify* resultPbscUserOutCardNotify;
@end

@implementation PBSC_UserOutCardNotifyBuilder
@synthesize resultPbscUserOutCardNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscUserOutCardNotify = [[PBSC_UserOutCardNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscUserOutCardNotify;
}
- (PBSC_UserOutCardNotifyBuilder*) clear {
  self.resultPbscUserOutCardNotify = [[PBSC_UserOutCardNotify alloc] init];
  return self;
}
- (PBSC_UserOutCardNotifyBuilder*) clone {
  return [PBSC_UserOutCardNotify builderWithPrototype:resultPbscUserOutCardNotify];
}
- (PBSC_UserOutCardNotify*) defaultInstance {
  return [PBSC_UserOutCardNotify defaultInstance];
}
- (PBSC_UserOutCardNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_UserOutCardNotify*) buildPartial {
  PBSC_UserOutCardNotify* returnMe = resultPbscUserOutCardNotify;
  self.resultPbscUserOutCardNotify = nil;
  return returnMe;
}
- (PBSC_UserOutCardNotifyBuilder*) mergeFrom:(PBSC_UserOutCardNotify*) other {
  if (other == [PBSC_UserOutCardNotify defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasExecuteUid) {
    [self setExecuteUid:other.executeUid];
  }
  if (other.hasCard) {
    [self setCard:other.card];
  }
  if (other.cardListArray.count > 0) {
    if (resultPbscUserOutCardNotify.cardListArray == nil) {
      resultPbscUserOutCardNotify.cardListArray = [other.cardListArray copy];
    } else {
      [resultPbscUserOutCardNotify.cardListArray appendArray:other.cardListArray];
    }
  }
  if (other.hasOperateAble) {
    [self setOperateAble:other.operateAble];
  }
  if (other.operateCodesArray.count > 0) {
    if (resultPbscUserOutCardNotify.operateCodesArray == nil) {
      resultPbscUserOutCardNotify.operateCodesArray = [other.operateCodesArray copy];
    } else {
      [resultPbscUserOutCardNotify.operateCodesArray appendArray:other.operateCodesArray];
    }
  }
  if (other.candidatesArray.count > 0) {
    if (resultPbscUserOutCardNotify.candidatesArray == nil) {
      resultPbscUserOutCardNotify.candidatesArray = [[NSMutableArray alloc] initWithArray:other.candidatesArray];
    } else {
      [resultPbscUserOutCardNotify.candidatesArray addObjectsFromArray:other.candidatesArray];
    }
  }
  if (other.hasAdditionCards) {
    [self mergeAdditionCards:other.additionCards];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_UserOutCardNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_UserOutCardNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setExecuteUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setCard:[input readUInt32]];
        break;
      }
      case 40: {
        [self addCardList:[input readUInt32]];
        break;
      }
      case 48: {
        [self setOperateAble:[input readBool]];
        break;
      }
      case 56: {
        OperateCode value = (OperateCode)[input readEnum];
        if (OperateCodeIsValidValue(value)) {
          [self addOperateCodes:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 66: {
        PBtagWeaveItemBuilder* subBuilder = [PBtagWeaveItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCandidates:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        PBtagWeaveItemBuilder* subBuilder = [PBtagWeaveItem builder];
        if (self.hasAdditionCards) {
          [subBuilder mergeFrom:self.additionCards];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAdditionCards:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbscUserOutCardNotify.hasSeqId;
}
- (UInt32) seqId {
  return resultPbscUserOutCardNotify.seqId;
}
- (PBSC_UserOutCardNotifyBuilder*) setSeqId:(UInt32) value {
  resultPbscUserOutCardNotify.hasSeqId = YES;
  resultPbscUserOutCardNotify.seqId = value;
  return self;
}
- (PBSC_UserOutCardNotifyBuilder*) clearSeqId {
  resultPbscUserOutCardNotify.hasSeqId = NO;
  resultPbscUserOutCardNotify.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbscUserOutCardNotify.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscUserOutCardNotify.roomId;
}
- (PBSC_UserOutCardNotifyBuilder*) setRoomId:(UInt32) value {
  resultPbscUserOutCardNotify.hasRoomId = YES;
  resultPbscUserOutCardNotify.roomId = value;
  return self;
}
- (PBSC_UserOutCardNotifyBuilder*) clearRoomId {
  resultPbscUserOutCardNotify.hasRoomId = NO;
  resultPbscUserOutCardNotify.roomId = 0;
  return self;
}
- (BOOL) hasExecuteUid {
  return resultPbscUserOutCardNotify.hasExecuteUid;
}
- (UInt32) executeUid {
  return resultPbscUserOutCardNotify.executeUid;
}
- (PBSC_UserOutCardNotifyBuilder*) setExecuteUid:(UInt32) value {
  resultPbscUserOutCardNotify.hasExecuteUid = YES;
  resultPbscUserOutCardNotify.executeUid = value;
  return self;
}
- (PBSC_UserOutCardNotifyBuilder*) clearExecuteUid {
  resultPbscUserOutCardNotify.hasExecuteUid = NO;
  resultPbscUserOutCardNotify.executeUid = 0;
  return self;
}
- (BOOL) hasCard {
  return resultPbscUserOutCardNotify.hasCard;
}
- (UInt32) card {
  return resultPbscUserOutCardNotify.card;
}
- (PBSC_UserOutCardNotifyBuilder*) setCard:(UInt32) value {
  resultPbscUserOutCardNotify.hasCard = YES;
  resultPbscUserOutCardNotify.card = value;
  return self;
}
- (PBSC_UserOutCardNotifyBuilder*) clearCard {
  resultPbscUserOutCardNotify.hasCard = NO;
  resultPbscUserOutCardNotify.card = 0;
  return self;
}
- (PBAppendableArray *)cardList {
  return resultPbscUserOutCardNotify.cardListArray;
}
- (UInt32)cardListAtIndex:(NSUInteger)index {
  return [resultPbscUserOutCardNotify cardListAtIndex:index];
}
- (PBSC_UserOutCardNotifyBuilder *)addCardList:(UInt32)value {
  if (resultPbscUserOutCardNotify.cardListArray == nil) {
    resultPbscUserOutCardNotify.cardListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultPbscUserOutCardNotify.cardListArray addUint32:value];
  return self;
}
- (PBSC_UserOutCardNotifyBuilder *)setCardListArray:(NSArray *)array {
  resultPbscUserOutCardNotify.cardListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (PBSC_UserOutCardNotifyBuilder *)setCardListValues:(const UInt32 *)values count:(NSUInteger)count {
  resultPbscUserOutCardNotify.cardListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (PBSC_UserOutCardNotifyBuilder *)clearCardList {
  resultPbscUserOutCardNotify.cardListArray = nil;
  return self;
}
- (BOOL) hasOperateAble {
  return resultPbscUserOutCardNotify.hasOperateAble;
}
- (BOOL) operateAble {
  return resultPbscUserOutCardNotify.operateAble;
}
- (PBSC_UserOutCardNotifyBuilder*) setOperateAble:(BOOL) value {
  resultPbscUserOutCardNotify.hasOperateAble = YES;
  resultPbscUserOutCardNotify.operateAble = value;
  return self;
}
- (PBSC_UserOutCardNotifyBuilder*) clearOperateAble {
  resultPbscUserOutCardNotify.hasOperateAble = NO;
  resultPbscUserOutCardNotify.operateAble = NO;
  return self;
}
- (PBAppendableArray *)operateCodes {
  return resultPbscUserOutCardNotify.operateCodesArray;
}
- (OperateCode)operateCodesAtIndex:(NSUInteger)index {
  return [resultPbscUserOutCardNotify operateCodesAtIndex:index];
}
- (PBSC_UserOutCardNotifyBuilder *)addOperateCodes:(OperateCode)value {
  if (resultPbscUserOutCardNotify.operateCodesArray == nil) {
    resultPbscUserOutCardNotify.operateCodesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultPbscUserOutCardNotify.operateCodesArray addEnum:value];
  return self;
}
- (PBSC_UserOutCardNotifyBuilder *)setOperateCodesArray:(NSArray *)array {
  resultPbscUserOutCardNotify.operateCodesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (PBSC_UserOutCardNotifyBuilder *)setOperateCodesValues:(const OperateCode *)values count:(NSUInteger)count {
  resultPbscUserOutCardNotify.operateCodesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (PBSC_UserOutCardNotifyBuilder *)clearOperateCodes {
  resultPbscUserOutCardNotify.operateCodesArray = nil;
  return self;
}
- (NSMutableArray<PBtagWeaveItem*> *)candidates {
  return resultPbscUserOutCardNotify.candidatesArray;
}
- (PBtagWeaveItem*)candidatesAtIndex:(NSUInteger)index {
  return [resultPbscUserOutCardNotify candidatesAtIndex:index];
}
- (PBSC_UserOutCardNotifyBuilder *)addCandidates:(PBtagWeaveItem*)value {
  if (resultPbscUserOutCardNotify.candidatesArray == nil) {
    resultPbscUserOutCardNotify.candidatesArray = [[NSMutableArray alloc]init];
  }
  [resultPbscUserOutCardNotify.candidatesArray addObject:value];
  return self;
}
- (PBSC_UserOutCardNotifyBuilder *)setCandidatesArray:(NSArray<PBtagWeaveItem*> *)array {
  resultPbscUserOutCardNotify.candidatesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBSC_UserOutCardNotifyBuilder *)clearCandidates {
  resultPbscUserOutCardNotify.candidatesArray = nil;
  return self;
}
- (BOOL) hasAdditionCards {
  return resultPbscUserOutCardNotify.hasAdditionCards;
}
- (PBtagWeaveItem*) additionCards {
  return resultPbscUserOutCardNotify.additionCards;
}
- (PBSC_UserOutCardNotifyBuilder*) setAdditionCards:(PBtagWeaveItem*) value {
  resultPbscUserOutCardNotify.hasAdditionCards = YES;
  resultPbscUserOutCardNotify.additionCards = value;
  return self;
}
- (PBSC_UserOutCardNotifyBuilder*) setAdditionCardsBuilder:(PBtagWeaveItemBuilder*) builderForValue {
  return [self setAdditionCards:[builderForValue build]];
}
- (PBSC_UserOutCardNotifyBuilder*) mergeAdditionCards:(PBtagWeaveItem*) value {
  if (resultPbscUserOutCardNotify.hasAdditionCards &&
      resultPbscUserOutCardNotify.additionCards != [PBtagWeaveItem defaultInstance]) {
    resultPbscUserOutCardNotify.additionCards =
      [[[PBtagWeaveItem builderWithPrototype:resultPbscUserOutCardNotify.additionCards] mergeFrom:value] buildPartial];
  } else {
    resultPbscUserOutCardNotify.additionCards = value;
  }
  resultPbscUserOutCardNotify.hasAdditionCards = YES;
  return self;
}
- (PBSC_UserOutCardNotifyBuilder*) clearAdditionCards {
  resultPbscUserOutCardNotify.hasAdditionCards = NO;
  resultPbscUserOutCardNotify.additionCards = [PBtagWeaveItem defaultInstance];
  return self;
}
@end

@interface PBCS_UserOperateCard ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 uid;
@property UInt32 operator;
@property UInt32 card;
@property UInt32 fromUid;
@property UInt32 fromType;
@property (strong) PBtagWeaveItem* cards;
@property (strong) PBtagWeaveItem* additionCards;
@end

@implementation PBCS_UserOperateCard

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasOperator {
  return !!hasOperator_;
}
- (void) setHasOperator:(BOOL) _value_ {
  hasOperator_ = !!_value_;
}
@synthesize operator;
- (BOOL) hasCard {
  return !!hasCard_;
}
- (void) setHasCard:(BOOL) _value_ {
  hasCard_ = !!_value_;
}
@synthesize card;
- (BOOL) hasFromUid {
  return !!hasFromUid_;
}
- (void) setHasFromUid:(BOOL) _value_ {
  hasFromUid_ = !!_value_;
}
@synthesize fromUid;
- (BOOL) hasFromType {
  return !!hasFromType_;
}
- (void) setHasFromType:(BOOL) _value_ {
  hasFromType_ = !!_value_;
}
@synthesize fromType;
- (BOOL) hasCards {
  return !!hasCards_;
}
- (void) setHasCards:(BOOL) _value_ {
  hasCards_ = !!_value_;
}
@synthesize cards;
- (BOOL) hasAdditionCards {
  return !!hasAdditionCards_;
}
- (void) setHasAdditionCards:(BOOL) _value_ {
  hasAdditionCards_ = !!_value_;
}
@synthesize additionCards;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.uid = 0;
    self.operator = 0;
    self.card = 0;
    self.fromUid = 0;
    self.fromType = 0;
    self.cards = [PBtagWeaveItem defaultInstance];
    self.additionCards = [PBtagWeaveItem defaultInstance];
  }
  return self;
}
static PBCS_UserOperateCard* defaultPBCS_UserOperateCardInstance = nil;
+ (void) initialize {
  if (self == [PBCS_UserOperateCard class]) {
    defaultPBCS_UserOperateCardInstance = [[PBCS_UserOperateCard alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCS_UserOperateCardInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCS_UserOperateCardInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasOperator) {
    return NO;
  }
  if (!self.hasCard) {
    return NO;
  }
  if (!self.hasFromUid) {
    return NO;
  }
  if (!self.hasFromType) {
    return NO;
  }
  if (!self.hasCards) {
    return NO;
  }
  if (!self.cards.isInitialized) {
    return NO;
  }
  if (self.hasAdditionCards) {
    if (!self.additionCards.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasUid) {
    [output writeUInt32:3 value:self.uid];
  }
  if (self.hasOperator) {
    [output writeUInt32:4 value:self.operator];
  }
  if (self.hasCard) {
    [output writeUInt32:5 value:self.card];
  }
  if (self.hasFromUid) {
    [output writeUInt32:6 value:self.fromUid];
  }
  if (self.hasFromType) {
    [output writeUInt32:7 value:self.fromType];
  }
  if (self.hasCards) {
    [output writeMessage:8 value:self.cards];
  }
  if (self.hasAdditionCards) {
    [output writeMessage:9 value:self.additionCards];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(3, self.uid);
  }
  if (self.hasOperator) {
    size_ += computeUInt32Size(4, self.operator);
  }
  if (self.hasCard) {
    size_ += computeUInt32Size(5, self.card);
  }
  if (self.hasFromUid) {
    size_ += computeUInt32Size(6, self.fromUid);
  }
  if (self.hasFromType) {
    size_ += computeUInt32Size(7, self.fromType);
  }
  if (self.hasCards) {
    size_ += computeMessageSize(8, self.cards);
  }
  if (self.hasAdditionCards) {
    size_ += computeMessageSize(9, self.additionCards);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBCS_UserOperateCard*) parseFromData:(NSData*) data {
  return (PBCS_UserOperateCard*)[[[PBCS_UserOperateCard builder] mergeFromData:data] build];
}
+ (PBCS_UserOperateCard*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_UserOperateCard*)[[[PBCS_UserOperateCard builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCS_UserOperateCard*) parseFromInputStream:(NSInputStream*) input {
  return (PBCS_UserOperateCard*)[[[PBCS_UserOperateCard builder] mergeFromInputStream:input] build];
}
+ (PBCS_UserOperateCard*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_UserOperateCard*)[[[PBCS_UserOperateCard builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_UserOperateCard*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCS_UserOperateCard*)[[[PBCS_UserOperateCard builder] mergeFromCodedInputStream:input] build];
}
+ (PBCS_UserOperateCard*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_UserOperateCard*)[[[PBCS_UserOperateCard builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_UserOperateCardBuilder*) builder {
  return [[PBCS_UserOperateCardBuilder alloc] init];
}
+ (PBCS_UserOperateCardBuilder*) builderWithPrototype:(PBCS_UserOperateCard*) prototype {
  return [[PBCS_UserOperateCard builder] mergeFrom:prototype];
}
- (PBCS_UserOperateCardBuilder*) builder {
  return [PBCS_UserOperateCard builder];
}
- (PBCS_UserOperateCardBuilder*) toBuilder {
  return [PBCS_UserOperateCard builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasOperator) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operator", [NSNumber numberWithInteger:self.operator]];
  }
  if (self.hasCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"card", [NSNumber numberWithInteger:self.card]];
  }
  if (self.hasFromUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUid", [NSNumber numberWithInteger:self.fromUid]];
  }
  if (self.hasFromType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromType", [NSNumber numberWithInteger:self.fromType]];
  }
  if (self.hasCards) {
    [output appendFormat:@"%@%@ {\n", indent, @"cards"];
    [self.cards writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAdditionCards) {
    [output appendFormat:@"%@%@ {\n", indent, @"additionCards"];
    [self.additionCards writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasOperator) {
    [dictionary setObject: [NSNumber numberWithInteger:self.operator] forKey: @"operator"];
  }
  if (self.hasCard) {
    [dictionary setObject: [NSNumber numberWithInteger:self.card] forKey: @"card"];
  }
  if (self.hasFromUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromUid] forKey: @"fromUid"];
  }
  if (self.hasFromType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromType] forKey: @"fromType"];
  }
  if (self.hasCards) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.cards storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"cards"];
  }
  if (self.hasAdditionCards) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.additionCards storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"additionCards"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBCS_UserOperateCard class]]) {
    return NO;
  }
  PBCS_UserOperateCard *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasOperator == otherMessage.hasOperator &&
      (!self.hasOperator || self.operator == otherMessage.operator) &&
      self.hasCard == otherMessage.hasCard &&
      (!self.hasCard || self.card == otherMessage.card) &&
      self.hasFromUid == otherMessage.hasFromUid &&
      (!self.hasFromUid || self.fromUid == otherMessage.fromUid) &&
      self.hasFromType == otherMessage.hasFromType &&
      (!self.hasFromType || self.fromType == otherMessage.fromType) &&
      self.hasCards == otherMessage.hasCards &&
      (!self.hasCards || [self.cards isEqual:otherMessage.cards]) &&
      self.hasAdditionCards == otherMessage.hasAdditionCards &&
      (!self.hasAdditionCards || [self.additionCards isEqual:otherMessage.additionCards]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasOperator) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.operator] hash];
  }
  if (self.hasCard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.card] hash];
  }
  if (self.hasFromUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUid] hash];
  }
  if (self.hasFromType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromType] hash];
  }
  if (self.hasCards) {
    hashCode = hashCode * 31 + [self.cards hash];
  }
  if (self.hasAdditionCards) {
    hashCode = hashCode * 31 + [self.additionCards hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCS_UserOperateCardBuilder()
@property (strong) PBCS_UserOperateCard* resultPbcsUserOperateCard;
@end

@implementation PBCS_UserOperateCardBuilder
@synthesize resultPbcsUserOperateCard;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcsUserOperateCard = [[PBCS_UserOperateCard alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcsUserOperateCard;
}
- (PBCS_UserOperateCardBuilder*) clear {
  self.resultPbcsUserOperateCard = [[PBCS_UserOperateCard alloc] init];
  return self;
}
- (PBCS_UserOperateCardBuilder*) clone {
  return [PBCS_UserOperateCard builderWithPrototype:resultPbcsUserOperateCard];
}
- (PBCS_UserOperateCard*) defaultInstance {
  return [PBCS_UserOperateCard defaultInstance];
}
- (PBCS_UserOperateCard*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCS_UserOperateCard*) buildPartial {
  PBCS_UserOperateCard* returnMe = resultPbcsUserOperateCard;
  self.resultPbcsUserOperateCard = nil;
  return returnMe;
}
- (PBCS_UserOperateCardBuilder*) mergeFrom:(PBCS_UserOperateCard*) other {
  if (other == [PBCS_UserOperateCard defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasOperator) {
    [self setOperator:other.operator];
  }
  if (other.hasCard) {
    [self setCard:other.card];
  }
  if (other.hasFromUid) {
    [self setFromUid:other.fromUid];
  }
  if (other.hasFromType) {
    [self setFromType:other.fromType];
  }
  if (other.hasCards) {
    [self mergeCards:other.cards];
  }
  if (other.hasAdditionCards) {
    [self mergeAdditionCards:other.additionCards];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCS_UserOperateCardBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCS_UserOperateCardBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setOperator:[input readUInt32]];
        break;
      }
      case 40: {
        [self setCard:[input readUInt32]];
        break;
      }
      case 48: {
        [self setFromUid:[input readUInt32]];
        break;
      }
      case 56: {
        [self setFromType:[input readUInt32]];
        break;
      }
      case 66: {
        PBtagWeaveItemBuilder* subBuilder = [PBtagWeaveItem builder];
        if (self.hasCards) {
          [subBuilder mergeFrom:self.cards];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCards:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        PBtagWeaveItemBuilder* subBuilder = [PBtagWeaveItem builder];
        if (self.hasAdditionCards) {
          [subBuilder mergeFrom:self.additionCards];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAdditionCards:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbcsUserOperateCard.hasSeqId;
}
- (UInt32) seqId {
  return resultPbcsUserOperateCard.seqId;
}
- (PBCS_UserOperateCardBuilder*) setSeqId:(UInt32) value {
  resultPbcsUserOperateCard.hasSeqId = YES;
  resultPbcsUserOperateCard.seqId = value;
  return self;
}
- (PBCS_UserOperateCardBuilder*) clearSeqId {
  resultPbcsUserOperateCard.hasSeqId = NO;
  resultPbcsUserOperateCard.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbcsUserOperateCard.hasRoomId;
}
- (UInt32) roomId {
  return resultPbcsUserOperateCard.roomId;
}
- (PBCS_UserOperateCardBuilder*) setRoomId:(UInt32) value {
  resultPbcsUserOperateCard.hasRoomId = YES;
  resultPbcsUserOperateCard.roomId = value;
  return self;
}
- (PBCS_UserOperateCardBuilder*) clearRoomId {
  resultPbcsUserOperateCard.hasRoomId = NO;
  resultPbcsUserOperateCard.roomId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbcsUserOperateCard.hasUid;
}
- (UInt32) uid {
  return resultPbcsUserOperateCard.uid;
}
- (PBCS_UserOperateCardBuilder*) setUid:(UInt32) value {
  resultPbcsUserOperateCard.hasUid = YES;
  resultPbcsUserOperateCard.uid = value;
  return self;
}
- (PBCS_UserOperateCardBuilder*) clearUid {
  resultPbcsUserOperateCard.hasUid = NO;
  resultPbcsUserOperateCard.uid = 0;
  return self;
}
- (BOOL) hasOperator {
  return resultPbcsUserOperateCard.hasOperator;
}
- (UInt32) operator {
  return resultPbcsUserOperateCard.operator;
}
- (PBCS_UserOperateCardBuilder*) setOperator:(UInt32) value {
  resultPbcsUserOperateCard.hasOperator = YES;
  resultPbcsUserOperateCard.operator = value;
  return self;
}
- (PBCS_UserOperateCardBuilder*) clearOperator {
  resultPbcsUserOperateCard.hasOperator = NO;
  resultPbcsUserOperateCard.operator = 0;
  return self;
}
- (BOOL) hasCard {
  return resultPbcsUserOperateCard.hasCard;
}
- (UInt32) card {
  return resultPbcsUserOperateCard.card;
}
- (PBCS_UserOperateCardBuilder*) setCard:(UInt32) value {
  resultPbcsUserOperateCard.hasCard = YES;
  resultPbcsUserOperateCard.card = value;
  return self;
}
- (PBCS_UserOperateCardBuilder*) clearCard {
  resultPbcsUserOperateCard.hasCard = NO;
  resultPbcsUserOperateCard.card = 0;
  return self;
}
- (BOOL) hasFromUid {
  return resultPbcsUserOperateCard.hasFromUid;
}
- (UInt32) fromUid {
  return resultPbcsUserOperateCard.fromUid;
}
- (PBCS_UserOperateCardBuilder*) setFromUid:(UInt32) value {
  resultPbcsUserOperateCard.hasFromUid = YES;
  resultPbcsUserOperateCard.fromUid = value;
  return self;
}
- (PBCS_UserOperateCardBuilder*) clearFromUid {
  resultPbcsUserOperateCard.hasFromUid = NO;
  resultPbcsUserOperateCard.fromUid = 0;
  return self;
}
- (BOOL) hasFromType {
  return resultPbcsUserOperateCard.hasFromType;
}
- (UInt32) fromType {
  return resultPbcsUserOperateCard.fromType;
}
- (PBCS_UserOperateCardBuilder*) setFromType:(UInt32) value {
  resultPbcsUserOperateCard.hasFromType = YES;
  resultPbcsUserOperateCard.fromType = value;
  return self;
}
- (PBCS_UserOperateCardBuilder*) clearFromType {
  resultPbcsUserOperateCard.hasFromType = NO;
  resultPbcsUserOperateCard.fromType = 0;
  return self;
}
- (BOOL) hasCards {
  return resultPbcsUserOperateCard.hasCards;
}
- (PBtagWeaveItem*) cards {
  return resultPbcsUserOperateCard.cards;
}
- (PBCS_UserOperateCardBuilder*) setCards:(PBtagWeaveItem*) value {
  resultPbcsUserOperateCard.hasCards = YES;
  resultPbcsUserOperateCard.cards = value;
  return self;
}
- (PBCS_UserOperateCardBuilder*) setCardsBuilder:(PBtagWeaveItemBuilder*) builderForValue {
  return [self setCards:[builderForValue build]];
}
- (PBCS_UserOperateCardBuilder*) mergeCards:(PBtagWeaveItem*) value {
  if (resultPbcsUserOperateCard.hasCards &&
      resultPbcsUserOperateCard.cards != [PBtagWeaveItem defaultInstance]) {
    resultPbcsUserOperateCard.cards =
      [[[PBtagWeaveItem builderWithPrototype:resultPbcsUserOperateCard.cards] mergeFrom:value] buildPartial];
  } else {
    resultPbcsUserOperateCard.cards = value;
  }
  resultPbcsUserOperateCard.hasCards = YES;
  return self;
}
- (PBCS_UserOperateCardBuilder*) clearCards {
  resultPbcsUserOperateCard.hasCards = NO;
  resultPbcsUserOperateCard.cards = [PBtagWeaveItem defaultInstance];
  return self;
}
- (BOOL) hasAdditionCards {
  return resultPbcsUserOperateCard.hasAdditionCards;
}
- (PBtagWeaveItem*) additionCards {
  return resultPbcsUserOperateCard.additionCards;
}
- (PBCS_UserOperateCardBuilder*) setAdditionCards:(PBtagWeaveItem*) value {
  resultPbcsUserOperateCard.hasAdditionCards = YES;
  resultPbcsUserOperateCard.additionCards = value;
  return self;
}
- (PBCS_UserOperateCardBuilder*) setAdditionCardsBuilder:(PBtagWeaveItemBuilder*) builderForValue {
  return [self setAdditionCards:[builderForValue build]];
}
- (PBCS_UserOperateCardBuilder*) mergeAdditionCards:(PBtagWeaveItem*) value {
  if (resultPbcsUserOperateCard.hasAdditionCards &&
      resultPbcsUserOperateCard.additionCards != [PBtagWeaveItem defaultInstance]) {
    resultPbcsUserOperateCard.additionCards =
      [[[PBtagWeaveItem builderWithPrototype:resultPbcsUserOperateCard.additionCards] mergeFrom:value] buildPartial];
  } else {
    resultPbcsUserOperateCard.additionCards = value;
  }
  resultPbcsUserOperateCard.hasAdditionCards = YES;
  return self;
}
- (PBCS_UserOperateCardBuilder*) clearAdditionCards {
  resultPbcsUserOperateCard.hasAdditionCards = NO;
  resultPbcsUserOperateCard.additionCards = [PBtagWeaveItem defaultInstance];
  return self;
}
@end

@interface PBSC_UserOperateCardRes ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 uid;
@property UInt32 operator;
@property UInt32 card;
@end

@implementation PBSC_UserOperateCardRes

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasOperator {
  return !!hasOperator_;
}
- (void) setHasOperator:(BOOL) _value_ {
  hasOperator_ = !!_value_;
}
@synthesize operator;
- (BOOL) hasCard {
  return !!hasCard_;
}
- (void) setHasCard:(BOOL) _value_ {
  hasCard_ = !!_value_;
}
@synthesize card;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.uid = 0;
    self.operator = 0;
    self.card = 0;
  }
  return self;
}
static PBSC_UserOperateCardRes* defaultPBSC_UserOperateCardResInstance = nil;
+ (void) initialize {
  if (self == [PBSC_UserOperateCardRes class]) {
    defaultPBSC_UserOperateCardResInstance = [[PBSC_UserOperateCardRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_UserOperateCardResInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_UserOperateCardResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasOperator) {
    return NO;
  }
  if (!self.hasCard) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasUid) {
    [output writeUInt32:3 value:self.uid];
  }
  if (self.hasOperator) {
    [output writeUInt32:4 value:self.operator];
  }
  if (self.hasCard) {
    [output writeUInt32:5 value:self.card];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(3, self.uid);
  }
  if (self.hasOperator) {
    size_ += computeUInt32Size(4, self.operator);
  }
  if (self.hasCard) {
    size_ += computeUInt32Size(5, self.card);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_UserOperateCardRes*) parseFromData:(NSData*) data {
  return (PBSC_UserOperateCardRes*)[[[PBSC_UserOperateCardRes builder] mergeFromData:data] build];
}
+ (PBSC_UserOperateCardRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserOperateCardRes*)[[[PBSC_UserOperateCardRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserOperateCardRes*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_UserOperateCardRes*)[[[PBSC_UserOperateCardRes builder] mergeFromInputStream:input] build];
}
+ (PBSC_UserOperateCardRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserOperateCardRes*)[[[PBSC_UserOperateCardRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserOperateCardRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_UserOperateCardRes*)[[[PBSC_UserOperateCardRes builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_UserOperateCardRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserOperateCardRes*)[[[PBSC_UserOperateCardRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserOperateCardResBuilder*) builder {
  return [[PBSC_UserOperateCardResBuilder alloc] init];
}
+ (PBSC_UserOperateCardResBuilder*) builderWithPrototype:(PBSC_UserOperateCardRes*) prototype {
  return [[PBSC_UserOperateCardRes builder] mergeFrom:prototype];
}
- (PBSC_UserOperateCardResBuilder*) builder {
  return [PBSC_UserOperateCardRes builder];
}
- (PBSC_UserOperateCardResBuilder*) toBuilder {
  return [PBSC_UserOperateCardRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasOperator) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operator", [NSNumber numberWithInteger:self.operator]];
  }
  if (self.hasCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"card", [NSNumber numberWithInteger:self.card]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasOperator) {
    [dictionary setObject: [NSNumber numberWithInteger:self.operator] forKey: @"operator"];
  }
  if (self.hasCard) {
    [dictionary setObject: [NSNumber numberWithInteger:self.card] forKey: @"card"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_UserOperateCardRes class]]) {
    return NO;
  }
  PBSC_UserOperateCardRes *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasOperator == otherMessage.hasOperator &&
      (!self.hasOperator || self.operator == otherMessage.operator) &&
      self.hasCard == otherMessage.hasCard &&
      (!self.hasCard || self.card == otherMessage.card) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasOperator) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.operator] hash];
  }
  if (self.hasCard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.card] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_UserOperateCardResBuilder()
@property (strong) PBSC_UserOperateCardRes* resultPbscUserOperateCardRes;
@end

@implementation PBSC_UserOperateCardResBuilder
@synthesize resultPbscUserOperateCardRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscUserOperateCardRes = [[PBSC_UserOperateCardRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscUserOperateCardRes;
}
- (PBSC_UserOperateCardResBuilder*) clear {
  self.resultPbscUserOperateCardRes = [[PBSC_UserOperateCardRes alloc] init];
  return self;
}
- (PBSC_UserOperateCardResBuilder*) clone {
  return [PBSC_UserOperateCardRes builderWithPrototype:resultPbscUserOperateCardRes];
}
- (PBSC_UserOperateCardRes*) defaultInstance {
  return [PBSC_UserOperateCardRes defaultInstance];
}
- (PBSC_UserOperateCardRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_UserOperateCardRes*) buildPartial {
  PBSC_UserOperateCardRes* returnMe = resultPbscUserOperateCardRes;
  self.resultPbscUserOperateCardRes = nil;
  return returnMe;
}
- (PBSC_UserOperateCardResBuilder*) mergeFrom:(PBSC_UserOperateCardRes*) other {
  if (other == [PBSC_UserOperateCardRes defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasOperator) {
    [self setOperator:other.operator];
  }
  if (other.hasCard) {
    [self setCard:other.card];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_UserOperateCardResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_UserOperateCardResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setOperator:[input readUInt32]];
        break;
      }
      case 40: {
        [self setCard:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbscUserOperateCardRes.hasSeqId;
}
- (UInt32) seqId {
  return resultPbscUserOperateCardRes.seqId;
}
- (PBSC_UserOperateCardResBuilder*) setSeqId:(UInt32) value {
  resultPbscUserOperateCardRes.hasSeqId = YES;
  resultPbscUserOperateCardRes.seqId = value;
  return self;
}
- (PBSC_UserOperateCardResBuilder*) clearSeqId {
  resultPbscUserOperateCardRes.hasSeqId = NO;
  resultPbscUserOperateCardRes.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbscUserOperateCardRes.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscUserOperateCardRes.roomId;
}
- (PBSC_UserOperateCardResBuilder*) setRoomId:(UInt32) value {
  resultPbscUserOperateCardRes.hasRoomId = YES;
  resultPbscUserOperateCardRes.roomId = value;
  return self;
}
- (PBSC_UserOperateCardResBuilder*) clearRoomId {
  resultPbscUserOperateCardRes.hasRoomId = NO;
  resultPbscUserOperateCardRes.roomId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbscUserOperateCardRes.hasUid;
}
- (UInt32) uid {
  return resultPbscUserOperateCardRes.uid;
}
- (PBSC_UserOperateCardResBuilder*) setUid:(UInt32) value {
  resultPbscUserOperateCardRes.hasUid = YES;
  resultPbscUserOperateCardRes.uid = value;
  return self;
}
- (PBSC_UserOperateCardResBuilder*) clearUid {
  resultPbscUserOperateCardRes.hasUid = NO;
  resultPbscUserOperateCardRes.uid = 0;
  return self;
}
- (BOOL) hasOperator {
  return resultPbscUserOperateCardRes.hasOperator;
}
- (UInt32) operator {
  return resultPbscUserOperateCardRes.operator;
}
- (PBSC_UserOperateCardResBuilder*) setOperator:(UInt32) value {
  resultPbscUserOperateCardRes.hasOperator = YES;
  resultPbscUserOperateCardRes.operator = value;
  return self;
}
- (PBSC_UserOperateCardResBuilder*) clearOperator {
  resultPbscUserOperateCardRes.hasOperator = NO;
  resultPbscUserOperateCardRes.operator = 0;
  return self;
}
- (BOOL) hasCard {
  return resultPbscUserOperateCardRes.hasCard;
}
- (UInt32) card {
  return resultPbscUserOperateCardRes.card;
}
- (PBSC_UserOperateCardResBuilder*) setCard:(UInt32) value {
  resultPbscUserOperateCardRes.hasCard = YES;
  resultPbscUserOperateCardRes.card = value;
  return self;
}
- (PBSC_UserOperateCardResBuilder*) clearCard {
  resultPbscUserOperateCardRes.hasCard = NO;
  resultPbscUserOperateCardRes.card = 0;
  return self;
}
@end

@interface p_point_change ()
@property UInt32 uid;
@property SInt32 pointChange;
@property SInt32 remainRoundPoint;
@property SInt32 remainGamePoint;
@property (strong) PBAppendableArray * tagertUidArray;
@end

@implementation p_point_change

- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasPointChange {
  return !!hasPointChange_;
}
- (void) setHasPointChange:(BOOL) _value_ {
  hasPointChange_ = !!_value_;
}
@synthesize pointChange;
- (BOOL) hasRemainRoundPoint {
  return !!hasRemainRoundPoint_;
}
- (void) setHasRemainRoundPoint:(BOOL) _value_ {
  hasRemainRoundPoint_ = !!_value_;
}
@synthesize remainRoundPoint;
- (BOOL) hasRemainGamePoint {
  return !!hasRemainGamePoint_;
}
- (void) setHasRemainGamePoint:(BOOL) _value_ {
  hasRemainGamePoint_ = !!_value_;
}
@synthesize remainGamePoint;
@synthesize tagertUidArray;
@dynamic tagertUid;
- (instancetype) init {
  if ((self = [super init])) {
    self.uid = 0;
    self.pointChange = 0;
    self.remainRoundPoint = 0;
    self.remainGamePoint = 0;
  }
  return self;
}
static p_point_change* defaultp_point_changeInstance = nil;
+ (void) initialize {
  if (self == [p_point_change class]) {
    defaultp_point_changeInstance = [[p_point_change alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultp_point_changeInstance;
}
- (instancetype) defaultInstance {
  return defaultp_point_changeInstance;
}
- (PBArray *)tagertUid {
  return tagertUidArray;
}
- (UInt32)tagertUidAtIndex:(NSUInteger)index {
  return [tagertUidArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasPointChange) {
    return NO;
  }
  if (!self.hasRemainRoundPoint) {
    return NO;
  }
  if (!self.hasRemainGamePoint) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUid) {
    [output writeUInt32:1 value:self.uid];
  }
  if (self.hasPointChange) {
    [output writeInt32:2 value:self.pointChange];
  }
  if (self.hasRemainRoundPoint) {
    [output writeInt32:3 value:self.remainRoundPoint];
  }
  if (self.hasRemainGamePoint) {
    [output writeInt32:4 value:self.remainGamePoint];
  }
  const NSUInteger tagertUidArrayCount = self.tagertUidArray.count;
  if (tagertUidArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.tagertUidArray.data;
    for (NSUInteger i = 0; i < tagertUidArrayCount; ++i) {
      [output writeUInt32:5 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUid) {
    size_ += computeUInt32Size(1, self.uid);
  }
  if (self.hasPointChange) {
    size_ += computeInt32Size(2, self.pointChange);
  }
  if (self.hasRemainRoundPoint) {
    size_ += computeInt32Size(3, self.remainRoundPoint);
  }
  if (self.hasRemainGamePoint) {
    size_ += computeInt32Size(4, self.remainGamePoint);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.tagertUidArray.count;
    const UInt32 *values = (const UInt32 *)self.tagertUidArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (p_point_change*) parseFromData:(NSData*) data {
  return (p_point_change*)[[[p_point_change builder] mergeFromData:data] build];
}
+ (p_point_change*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (p_point_change*)[[[p_point_change builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (p_point_change*) parseFromInputStream:(NSInputStream*) input {
  return (p_point_change*)[[[p_point_change builder] mergeFromInputStream:input] build];
}
+ (p_point_change*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (p_point_change*)[[[p_point_change builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (p_point_change*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (p_point_change*)[[[p_point_change builder] mergeFromCodedInputStream:input] build];
}
+ (p_point_change*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (p_point_change*)[[[p_point_change builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (p_point_changeBuilder*) builder {
  return [[p_point_changeBuilder alloc] init];
}
+ (p_point_changeBuilder*) builderWithPrototype:(p_point_change*) prototype {
  return [[p_point_change builder] mergeFrom:prototype];
}
- (p_point_changeBuilder*) builder {
  return [p_point_change builder];
}
- (p_point_changeBuilder*) toBuilder {
  return [p_point_change builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasPointChange) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pointChange", [NSNumber numberWithInteger:self.pointChange]];
  }
  if (self.hasRemainRoundPoint) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remainRoundPoint", [NSNumber numberWithInteger:self.remainRoundPoint]];
  }
  if (self.hasRemainGamePoint) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remainGamePoint", [NSNumber numberWithInteger:self.remainGamePoint]];
  }
  [self.tagertUidArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tagertUid", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasPointChange) {
    [dictionary setObject: [NSNumber numberWithInteger:self.pointChange] forKey: @"pointChange"];
  }
  if (self.hasRemainRoundPoint) {
    [dictionary setObject: [NSNumber numberWithInteger:self.remainRoundPoint] forKey: @"remainRoundPoint"];
  }
  if (self.hasRemainGamePoint) {
    [dictionary setObject: [NSNumber numberWithInteger:self.remainGamePoint] forKey: @"remainGamePoint"];
  }
  NSMutableArray * tagertUidArrayArray = [NSMutableArray new];
  NSUInteger tagertUidArrayCount=self.tagertUidArray.count;
  for(int i=0;i<tagertUidArrayCount;i++){
    [tagertUidArrayArray addObject: @([self.tagertUidArray uint32AtIndex:i])];
  }
  [dictionary setObject: tagertUidArrayArray forKey: @"tagertUid"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[p_point_change class]]) {
    return NO;
  }
  p_point_change *otherMessage = other;
  return
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasPointChange == otherMessage.hasPointChange &&
      (!self.hasPointChange || self.pointChange == otherMessage.pointChange) &&
      self.hasRemainRoundPoint == otherMessage.hasRemainRoundPoint &&
      (!self.hasRemainRoundPoint || self.remainRoundPoint == otherMessage.remainRoundPoint) &&
      self.hasRemainGamePoint == otherMessage.hasRemainGamePoint &&
      (!self.hasRemainGamePoint || self.remainGamePoint == otherMessage.remainGamePoint) &&
      [self.tagertUidArray isEqualToArray:otherMessage.tagertUidArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasPointChange) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.pointChange] hash];
  }
  if (self.hasRemainRoundPoint) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.remainRoundPoint] hash];
  }
  if (self.hasRemainGamePoint) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.remainGamePoint] hash];
  }
  [self.tagertUidArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface p_point_changeBuilder()
@property (strong) p_point_change* resultPPointChange;
@end

@implementation p_point_changeBuilder
@synthesize resultPPointChange;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPPointChange = [[p_point_change alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPPointChange;
}
- (p_point_changeBuilder*) clear {
  self.resultPPointChange = [[p_point_change alloc] init];
  return self;
}
- (p_point_changeBuilder*) clone {
  return [p_point_change builderWithPrototype:resultPPointChange];
}
- (p_point_change*) defaultInstance {
  return [p_point_change defaultInstance];
}
- (p_point_change*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (p_point_change*) buildPartial {
  p_point_change* returnMe = resultPPointChange;
  self.resultPPointChange = nil;
  return returnMe;
}
- (p_point_changeBuilder*) mergeFrom:(p_point_change*) other {
  if (other == [p_point_change defaultInstance]) {
    return self;
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasPointChange) {
    [self setPointChange:other.pointChange];
  }
  if (other.hasRemainRoundPoint) {
    [self setRemainRoundPoint:other.remainRoundPoint];
  }
  if (other.hasRemainGamePoint) {
    [self setRemainGamePoint:other.remainGamePoint];
  }
  if (other.tagertUidArray.count > 0) {
    if (resultPPointChange.tagertUidArray == nil) {
      resultPPointChange.tagertUidArray = [other.tagertUidArray copy];
    } else {
      [resultPPointChange.tagertUidArray appendArray:other.tagertUidArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (p_point_changeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (p_point_changeBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 16: {
        [self setPointChange:[input readInt32]];
        break;
      }
      case 24: {
        [self setRemainRoundPoint:[input readInt32]];
        break;
      }
      case 32: {
        [self setRemainGamePoint:[input readInt32]];
        break;
      }
      case 40: {
        [self addTagertUid:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUid {
  return resultPPointChange.hasUid;
}
- (UInt32) uid {
  return resultPPointChange.uid;
}
- (p_point_changeBuilder*) setUid:(UInt32) value {
  resultPPointChange.hasUid = YES;
  resultPPointChange.uid = value;
  return self;
}
- (p_point_changeBuilder*) clearUid {
  resultPPointChange.hasUid = NO;
  resultPPointChange.uid = 0;
  return self;
}
- (BOOL) hasPointChange {
  return resultPPointChange.hasPointChange;
}
- (SInt32) pointChange {
  return resultPPointChange.pointChange;
}
- (p_point_changeBuilder*) setPointChange:(SInt32) value {
  resultPPointChange.hasPointChange = YES;
  resultPPointChange.pointChange = value;
  return self;
}
- (p_point_changeBuilder*) clearPointChange {
  resultPPointChange.hasPointChange = NO;
  resultPPointChange.pointChange = 0;
  return self;
}
- (BOOL) hasRemainRoundPoint {
  return resultPPointChange.hasRemainRoundPoint;
}
- (SInt32) remainRoundPoint {
  return resultPPointChange.remainRoundPoint;
}
- (p_point_changeBuilder*) setRemainRoundPoint:(SInt32) value {
  resultPPointChange.hasRemainRoundPoint = YES;
  resultPPointChange.remainRoundPoint = value;
  return self;
}
- (p_point_changeBuilder*) clearRemainRoundPoint {
  resultPPointChange.hasRemainRoundPoint = NO;
  resultPPointChange.remainRoundPoint = 0;
  return self;
}
- (BOOL) hasRemainGamePoint {
  return resultPPointChange.hasRemainGamePoint;
}
- (SInt32) remainGamePoint {
  return resultPPointChange.remainGamePoint;
}
- (p_point_changeBuilder*) setRemainGamePoint:(SInt32) value {
  resultPPointChange.hasRemainGamePoint = YES;
  resultPPointChange.remainGamePoint = value;
  return self;
}
- (p_point_changeBuilder*) clearRemainGamePoint {
  resultPPointChange.hasRemainGamePoint = NO;
  resultPPointChange.remainGamePoint = 0;
  return self;
}
- (PBAppendableArray *)tagertUid {
  return resultPPointChange.tagertUidArray;
}
- (UInt32)tagertUidAtIndex:(NSUInteger)index {
  return [resultPPointChange tagertUidAtIndex:index];
}
- (p_point_changeBuilder *)addTagertUid:(UInt32)value {
  if (resultPPointChange.tagertUidArray == nil) {
    resultPPointChange.tagertUidArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultPPointChange.tagertUidArray addUint32:value];
  return self;
}
- (p_point_changeBuilder *)setTagertUidArray:(NSArray *)array {
  resultPPointChange.tagertUidArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (p_point_changeBuilder *)setTagertUidValues:(const UInt32 *)values count:(NSUInteger)count {
  resultPPointChange.tagertUidArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (p_point_changeBuilder *)clearTagertUid {
  resultPPointChange.tagertUidArray = nil;
  return self;
}
@end

@interface PBSC_UserOperateCardNotify ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 uid;
@property UInt32 operateCode;
@property UInt32 card;
@property UInt32 fromUid;
@property PointNameCode pointNameCode;
@property (strong) PBtagWeaveItem* cards;
@property (strong) PBtagWeaveItem* additionCards;
@property (strong) NSMutableArray<p_point_change*> * pointChangeArray;
@end

@implementation PBSC_UserOperateCardNotify

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasOperateCode {
  return !!hasOperateCode_;
}
- (void) setHasOperateCode:(BOOL) _value_ {
  hasOperateCode_ = !!_value_;
}
@synthesize operateCode;
- (BOOL) hasCard {
  return !!hasCard_;
}
- (void) setHasCard:(BOOL) _value_ {
  hasCard_ = !!_value_;
}
@synthesize card;
- (BOOL) hasFromUid {
  return !!hasFromUid_;
}
- (void) setHasFromUid:(BOOL) _value_ {
  hasFromUid_ = !!_value_;
}
@synthesize fromUid;
- (BOOL) hasPointNameCode {
  return !!hasPointNameCode_;
}
- (void) setHasPointNameCode:(BOOL) _value_ {
  hasPointNameCode_ = !!_value_;
}
@synthesize pointNameCode;
- (BOOL) hasCards {
  return !!hasCards_;
}
- (void) setHasCards:(BOOL) _value_ {
  hasCards_ = !!_value_;
}
@synthesize cards;
- (BOOL) hasAdditionCards {
  return !!hasAdditionCards_;
}
- (void) setHasAdditionCards:(BOOL) _value_ {
  hasAdditionCards_ = !!_value_;
}
@synthesize additionCards;
@synthesize pointChangeArray;
@dynamic pointChange;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.uid = 0;
    self.operateCode = 0;
    self.card = 0;
    self.fromUid = 0;
    self.pointNameCode = PointNameCodePncIgnor;
    self.cards = [PBtagWeaveItem defaultInstance];
    self.additionCards = [PBtagWeaveItem defaultInstance];
  }
  return self;
}
static PBSC_UserOperateCardNotify* defaultPBSC_UserOperateCardNotifyInstance = nil;
+ (void) initialize {
  if (self == [PBSC_UserOperateCardNotify class]) {
    defaultPBSC_UserOperateCardNotifyInstance = [[PBSC_UserOperateCardNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_UserOperateCardNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_UserOperateCardNotifyInstance;
}
- (NSArray<p_point_change*> *)pointChange {
  return pointChangeArray;
}
- (p_point_change*)pointChangeAtIndex:(NSUInteger)index {
  return [pointChangeArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasOperateCode) {
    return NO;
  }
  if (!self.hasCard) {
    return NO;
  }
  if (!self.hasFromUid) {
    return NO;
  }
  if (!self.hasCards) {
    return NO;
  }
  if (!self.cards.isInitialized) {
    return NO;
  }
  if (self.hasAdditionCards) {
    if (!self.additionCards.isInitialized) {
      return NO;
    }
  }
  __block BOOL isInitpointChange = YES;
   [self.pointChange enumerateObjectsUsingBlock:^(p_point_change *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitpointChange = NO;
      *stop = YES;
    }
  }];
  if (!isInitpointChange) return isInitpointChange;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasUid) {
    [output writeUInt32:3 value:self.uid];
  }
  if (self.hasOperateCode) {
    [output writeUInt32:4 value:self.operateCode];
  }
  if (self.hasCard) {
    [output writeUInt32:5 value:self.card];
  }
  if (self.hasFromUid) {
    [output writeUInt32:6 value:self.fromUid];
  }
  if (self.hasPointNameCode) {
    [output writeEnum:7 value:self.pointNameCode];
  }
  if (self.hasCards) {
    [output writeMessage:8 value:self.cards];
  }
  if (self.hasAdditionCards) {
    [output writeMessage:9 value:self.additionCards];
  }
  [self.pointChangeArray enumerateObjectsUsingBlock:^(p_point_change *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(3, self.uid);
  }
  if (self.hasOperateCode) {
    size_ += computeUInt32Size(4, self.operateCode);
  }
  if (self.hasCard) {
    size_ += computeUInt32Size(5, self.card);
  }
  if (self.hasFromUid) {
    size_ += computeUInt32Size(6, self.fromUid);
  }
  if (self.hasPointNameCode) {
    size_ += computeEnumSize(7, self.pointNameCode);
  }
  if (self.hasCards) {
    size_ += computeMessageSize(8, self.cards);
  }
  if (self.hasAdditionCards) {
    size_ += computeMessageSize(9, self.additionCards);
  }
  [self.pointChangeArray enumerateObjectsUsingBlock:^(p_point_change *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_UserOperateCardNotify*) parseFromData:(NSData*) data {
  return (PBSC_UserOperateCardNotify*)[[[PBSC_UserOperateCardNotify builder] mergeFromData:data] build];
}
+ (PBSC_UserOperateCardNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserOperateCardNotify*)[[[PBSC_UserOperateCardNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserOperateCardNotify*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_UserOperateCardNotify*)[[[PBSC_UserOperateCardNotify builder] mergeFromInputStream:input] build];
}
+ (PBSC_UserOperateCardNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserOperateCardNotify*)[[[PBSC_UserOperateCardNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserOperateCardNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_UserOperateCardNotify*)[[[PBSC_UserOperateCardNotify builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_UserOperateCardNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserOperateCardNotify*)[[[PBSC_UserOperateCardNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserOperateCardNotifyBuilder*) builder {
  return [[PBSC_UserOperateCardNotifyBuilder alloc] init];
}
+ (PBSC_UserOperateCardNotifyBuilder*) builderWithPrototype:(PBSC_UserOperateCardNotify*) prototype {
  return [[PBSC_UserOperateCardNotify builder] mergeFrom:prototype];
}
- (PBSC_UserOperateCardNotifyBuilder*) builder {
  return [PBSC_UserOperateCardNotify builder];
}
- (PBSC_UserOperateCardNotifyBuilder*) toBuilder {
  return [PBSC_UserOperateCardNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasOperateCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operateCode", [NSNumber numberWithInteger:self.operateCode]];
  }
  if (self.hasCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"card", [NSNumber numberWithInteger:self.card]];
  }
  if (self.hasFromUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUid", [NSNumber numberWithInteger:self.fromUid]];
  }
  if (self.hasPointNameCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pointNameCode", NSStringFromPointNameCode(self.pointNameCode)];
  }
  if (self.hasCards) {
    [output appendFormat:@"%@%@ {\n", indent, @"cards"];
    [self.cards writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAdditionCards) {
    [output appendFormat:@"%@%@ {\n", indent, @"additionCards"];
    [self.additionCards writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.pointChangeArray enumerateObjectsUsingBlock:^(p_point_change *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"pointChange"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasOperateCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.operateCode] forKey: @"operateCode"];
  }
  if (self.hasCard) {
    [dictionary setObject: [NSNumber numberWithInteger:self.card] forKey: @"card"];
  }
  if (self.hasFromUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromUid] forKey: @"fromUid"];
  }
  if (self.hasPointNameCode) {
    [dictionary setObject: @(self.pointNameCode) forKey: @"pointNameCode"];
  }
  if (self.hasCards) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.cards storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"cards"];
  }
  if (self.hasAdditionCards) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.additionCards storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"additionCards"];
  }
  for (p_point_change* element in self.pointChangeArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"pointChange"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_UserOperateCardNotify class]]) {
    return NO;
  }
  PBSC_UserOperateCardNotify *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasOperateCode == otherMessage.hasOperateCode &&
      (!self.hasOperateCode || self.operateCode == otherMessage.operateCode) &&
      self.hasCard == otherMessage.hasCard &&
      (!self.hasCard || self.card == otherMessage.card) &&
      self.hasFromUid == otherMessage.hasFromUid &&
      (!self.hasFromUid || self.fromUid == otherMessage.fromUid) &&
      self.hasPointNameCode == otherMessage.hasPointNameCode &&
      (!self.hasPointNameCode || self.pointNameCode == otherMessage.pointNameCode) &&
      self.hasCards == otherMessage.hasCards &&
      (!self.hasCards || [self.cards isEqual:otherMessage.cards]) &&
      self.hasAdditionCards == otherMessage.hasAdditionCards &&
      (!self.hasAdditionCards || [self.additionCards isEqual:otherMessage.additionCards]) &&
      [self.pointChangeArray isEqualToArray:otherMessage.pointChangeArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasOperateCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.operateCode] hash];
  }
  if (self.hasCard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.card] hash];
  }
  if (self.hasFromUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUid] hash];
  }
  if (self.hasPointNameCode) {
    hashCode = hashCode * 31 + self.pointNameCode;
  }
  if (self.hasCards) {
    hashCode = hashCode * 31 + [self.cards hash];
  }
  if (self.hasAdditionCards) {
    hashCode = hashCode * 31 + [self.additionCards hash];
  }
  [self.pointChangeArray enumerateObjectsUsingBlock:^(p_point_change *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_UserOperateCardNotifyBuilder()
@property (strong) PBSC_UserOperateCardNotify* resultPbscUserOperateCardNotify;
@end

@implementation PBSC_UserOperateCardNotifyBuilder
@synthesize resultPbscUserOperateCardNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscUserOperateCardNotify = [[PBSC_UserOperateCardNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscUserOperateCardNotify;
}
- (PBSC_UserOperateCardNotifyBuilder*) clear {
  self.resultPbscUserOperateCardNotify = [[PBSC_UserOperateCardNotify alloc] init];
  return self;
}
- (PBSC_UserOperateCardNotifyBuilder*) clone {
  return [PBSC_UserOperateCardNotify builderWithPrototype:resultPbscUserOperateCardNotify];
}
- (PBSC_UserOperateCardNotify*) defaultInstance {
  return [PBSC_UserOperateCardNotify defaultInstance];
}
- (PBSC_UserOperateCardNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_UserOperateCardNotify*) buildPartial {
  PBSC_UserOperateCardNotify* returnMe = resultPbscUserOperateCardNotify;
  self.resultPbscUserOperateCardNotify = nil;
  return returnMe;
}
- (PBSC_UserOperateCardNotifyBuilder*) mergeFrom:(PBSC_UserOperateCardNotify*) other {
  if (other == [PBSC_UserOperateCardNotify defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasOperateCode) {
    [self setOperateCode:other.operateCode];
  }
  if (other.hasCard) {
    [self setCard:other.card];
  }
  if (other.hasFromUid) {
    [self setFromUid:other.fromUid];
  }
  if (other.hasPointNameCode) {
    [self setPointNameCode:other.pointNameCode];
  }
  if (other.hasCards) {
    [self mergeCards:other.cards];
  }
  if (other.hasAdditionCards) {
    [self mergeAdditionCards:other.additionCards];
  }
  if (other.pointChangeArray.count > 0) {
    if (resultPbscUserOperateCardNotify.pointChangeArray == nil) {
      resultPbscUserOperateCardNotify.pointChangeArray = [[NSMutableArray alloc] initWithArray:other.pointChangeArray];
    } else {
      [resultPbscUserOperateCardNotify.pointChangeArray addObjectsFromArray:other.pointChangeArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_UserOperateCardNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_UserOperateCardNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setOperateCode:[input readUInt32]];
        break;
      }
      case 40: {
        [self setCard:[input readUInt32]];
        break;
      }
      case 48: {
        [self setFromUid:[input readUInt32]];
        break;
      }
      case 56: {
        PointNameCode value = (PointNameCode)[input readEnum];
        if (PointNameCodeIsValidValue(value)) {
          [self setPointNameCode:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 66: {
        PBtagWeaveItemBuilder* subBuilder = [PBtagWeaveItem builder];
        if (self.hasCards) {
          [subBuilder mergeFrom:self.cards];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCards:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        PBtagWeaveItemBuilder* subBuilder = [PBtagWeaveItem builder];
        if (self.hasAdditionCards) {
          [subBuilder mergeFrom:self.additionCards];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAdditionCards:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        p_point_changeBuilder* subBuilder = [p_point_change builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPointChange:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbscUserOperateCardNotify.hasSeqId;
}
- (UInt32) seqId {
  return resultPbscUserOperateCardNotify.seqId;
}
- (PBSC_UserOperateCardNotifyBuilder*) setSeqId:(UInt32) value {
  resultPbscUserOperateCardNotify.hasSeqId = YES;
  resultPbscUserOperateCardNotify.seqId = value;
  return self;
}
- (PBSC_UserOperateCardNotifyBuilder*) clearSeqId {
  resultPbscUserOperateCardNotify.hasSeqId = NO;
  resultPbscUserOperateCardNotify.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbscUserOperateCardNotify.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscUserOperateCardNotify.roomId;
}
- (PBSC_UserOperateCardNotifyBuilder*) setRoomId:(UInt32) value {
  resultPbscUserOperateCardNotify.hasRoomId = YES;
  resultPbscUserOperateCardNotify.roomId = value;
  return self;
}
- (PBSC_UserOperateCardNotifyBuilder*) clearRoomId {
  resultPbscUserOperateCardNotify.hasRoomId = NO;
  resultPbscUserOperateCardNotify.roomId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbscUserOperateCardNotify.hasUid;
}
- (UInt32) uid {
  return resultPbscUserOperateCardNotify.uid;
}
- (PBSC_UserOperateCardNotifyBuilder*) setUid:(UInt32) value {
  resultPbscUserOperateCardNotify.hasUid = YES;
  resultPbscUserOperateCardNotify.uid = value;
  return self;
}
- (PBSC_UserOperateCardNotifyBuilder*) clearUid {
  resultPbscUserOperateCardNotify.hasUid = NO;
  resultPbscUserOperateCardNotify.uid = 0;
  return self;
}
- (BOOL) hasOperateCode {
  return resultPbscUserOperateCardNotify.hasOperateCode;
}
- (UInt32) operateCode {
  return resultPbscUserOperateCardNotify.operateCode;
}
- (PBSC_UserOperateCardNotifyBuilder*) setOperateCode:(UInt32) value {
  resultPbscUserOperateCardNotify.hasOperateCode = YES;
  resultPbscUserOperateCardNotify.operateCode = value;
  return self;
}
- (PBSC_UserOperateCardNotifyBuilder*) clearOperateCode {
  resultPbscUserOperateCardNotify.hasOperateCode = NO;
  resultPbscUserOperateCardNotify.operateCode = 0;
  return self;
}
- (BOOL) hasCard {
  return resultPbscUserOperateCardNotify.hasCard;
}
- (UInt32) card {
  return resultPbscUserOperateCardNotify.card;
}
- (PBSC_UserOperateCardNotifyBuilder*) setCard:(UInt32) value {
  resultPbscUserOperateCardNotify.hasCard = YES;
  resultPbscUserOperateCardNotify.card = value;
  return self;
}
- (PBSC_UserOperateCardNotifyBuilder*) clearCard {
  resultPbscUserOperateCardNotify.hasCard = NO;
  resultPbscUserOperateCardNotify.card = 0;
  return self;
}
- (BOOL) hasFromUid {
  return resultPbscUserOperateCardNotify.hasFromUid;
}
- (UInt32) fromUid {
  return resultPbscUserOperateCardNotify.fromUid;
}
- (PBSC_UserOperateCardNotifyBuilder*) setFromUid:(UInt32) value {
  resultPbscUserOperateCardNotify.hasFromUid = YES;
  resultPbscUserOperateCardNotify.fromUid = value;
  return self;
}
- (PBSC_UserOperateCardNotifyBuilder*) clearFromUid {
  resultPbscUserOperateCardNotify.hasFromUid = NO;
  resultPbscUserOperateCardNotify.fromUid = 0;
  return self;
}
- (BOOL) hasPointNameCode {
  return resultPbscUserOperateCardNotify.hasPointNameCode;
}
- (PointNameCode) pointNameCode {
  return resultPbscUserOperateCardNotify.pointNameCode;
}
- (PBSC_UserOperateCardNotifyBuilder*) setPointNameCode:(PointNameCode) value {
  resultPbscUserOperateCardNotify.hasPointNameCode = YES;
  resultPbscUserOperateCardNotify.pointNameCode = value;
  return self;
}
- (PBSC_UserOperateCardNotifyBuilder*) clearPointNameCode {
  resultPbscUserOperateCardNotify.hasPointNameCode = NO;
  resultPbscUserOperateCardNotify.pointNameCode = PointNameCodePncIgnor;
  return self;
}
- (BOOL) hasCards {
  return resultPbscUserOperateCardNotify.hasCards;
}
- (PBtagWeaveItem*) cards {
  return resultPbscUserOperateCardNotify.cards;
}
- (PBSC_UserOperateCardNotifyBuilder*) setCards:(PBtagWeaveItem*) value {
  resultPbscUserOperateCardNotify.hasCards = YES;
  resultPbscUserOperateCardNotify.cards = value;
  return self;
}
- (PBSC_UserOperateCardNotifyBuilder*) setCardsBuilder:(PBtagWeaveItemBuilder*) builderForValue {
  return [self setCards:[builderForValue build]];
}
- (PBSC_UserOperateCardNotifyBuilder*) mergeCards:(PBtagWeaveItem*) value {
  if (resultPbscUserOperateCardNotify.hasCards &&
      resultPbscUserOperateCardNotify.cards != [PBtagWeaveItem defaultInstance]) {
    resultPbscUserOperateCardNotify.cards =
      [[[PBtagWeaveItem builderWithPrototype:resultPbscUserOperateCardNotify.cards] mergeFrom:value] buildPartial];
  } else {
    resultPbscUserOperateCardNotify.cards = value;
  }
  resultPbscUserOperateCardNotify.hasCards = YES;
  return self;
}
- (PBSC_UserOperateCardNotifyBuilder*) clearCards {
  resultPbscUserOperateCardNotify.hasCards = NO;
  resultPbscUserOperateCardNotify.cards = [PBtagWeaveItem defaultInstance];
  return self;
}
- (BOOL) hasAdditionCards {
  return resultPbscUserOperateCardNotify.hasAdditionCards;
}
- (PBtagWeaveItem*) additionCards {
  return resultPbscUserOperateCardNotify.additionCards;
}
- (PBSC_UserOperateCardNotifyBuilder*) setAdditionCards:(PBtagWeaveItem*) value {
  resultPbscUserOperateCardNotify.hasAdditionCards = YES;
  resultPbscUserOperateCardNotify.additionCards = value;
  return self;
}
- (PBSC_UserOperateCardNotifyBuilder*) setAdditionCardsBuilder:(PBtagWeaveItemBuilder*) builderForValue {
  return [self setAdditionCards:[builderForValue build]];
}
- (PBSC_UserOperateCardNotifyBuilder*) mergeAdditionCards:(PBtagWeaveItem*) value {
  if (resultPbscUserOperateCardNotify.hasAdditionCards &&
      resultPbscUserOperateCardNotify.additionCards != [PBtagWeaveItem defaultInstance]) {
    resultPbscUserOperateCardNotify.additionCards =
      [[[PBtagWeaveItem builderWithPrototype:resultPbscUserOperateCardNotify.additionCards] mergeFrom:value] buildPartial];
  } else {
    resultPbscUserOperateCardNotify.additionCards = value;
  }
  resultPbscUserOperateCardNotify.hasAdditionCards = YES;
  return self;
}
- (PBSC_UserOperateCardNotifyBuilder*) clearAdditionCards {
  resultPbscUserOperateCardNotify.hasAdditionCards = NO;
  resultPbscUserOperateCardNotify.additionCards = [PBtagWeaveItem defaultInstance];
  return self;
}
- (NSMutableArray<p_point_change*> *)pointChange {
  return resultPbscUserOperateCardNotify.pointChangeArray;
}
- (p_point_change*)pointChangeAtIndex:(NSUInteger)index {
  return [resultPbscUserOperateCardNotify pointChangeAtIndex:index];
}
- (PBSC_UserOperateCardNotifyBuilder *)addPointChange:(p_point_change*)value {
  if (resultPbscUserOperateCardNotify.pointChangeArray == nil) {
    resultPbscUserOperateCardNotify.pointChangeArray = [[NSMutableArray alloc]init];
  }
  [resultPbscUserOperateCardNotify.pointChangeArray addObject:value];
  return self;
}
- (PBSC_UserOperateCardNotifyBuilder *)setPointChangeArray:(NSArray<p_point_change*> *)array {
  resultPbscUserOperateCardNotify.pointChangeArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBSC_UserOperateCardNotifyBuilder *)clearPointChange {
  resultPbscUserOperateCardNotify.pointChangeArray = nil;
  return self;
}
@end

@interface PBSC_UserCanOperateCardsNotify ()
@property UInt32 roomId;
@property UInt32 card;
@property UInt32 fromUid;
@property BOOL fromType;
@property BOOL operateAble;
@property (strong) PBAppendableArray * operateCodesArray;
@end

@implementation PBSC_UserCanOperateCardsNotify

- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasCard {
  return !!hasCard_;
}
- (void) setHasCard:(BOOL) _value_ {
  hasCard_ = !!_value_;
}
@synthesize card;
- (BOOL) hasFromUid {
  return !!hasFromUid_;
}
- (void) setHasFromUid:(BOOL) _value_ {
  hasFromUid_ = !!_value_;
}
@synthesize fromUid;
- (BOOL) hasFromType {
  return !!hasFromType_;
}
- (void) setHasFromType:(BOOL) _value_ {
  hasFromType_ = !!_value_;
}
- (BOOL) fromType {
  return !!fromType_;
}
- (void) setFromType:(BOOL) _value_ {
  fromType_ = !!_value_;
}
- (BOOL) hasOperateAble {
  return !!hasOperateAble_;
}
- (void) setHasOperateAble:(BOOL) _value_ {
  hasOperateAble_ = !!_value_;
}
- (BOOL) operateAble {
  return !!operateAble_;
}
- (void) setOperateAble:(BOOL) _value_ {
  operateAble_ = !!_value_;
}
@synthesize operateCodesArray;
@dynamic operateCodes;
- (instancetype) init {
  if ((self = [super init])) {
    self.roomId = 0;
    self.card = 0;
    self.fromUid = 0;
    self.fromType = NO;
    self.operateAble = NO;
  }
  return self;
}
static PBSC_UserCanOperateCardsNotify* defaultPBSC_UserCanOperateCardsNotifyInstance = nil;
+ (void) initialize {
  if (self == [PBSC_UserCanOperateCardsNotify class]) {
    defaultPBSC_UserCanOperateCardsNotifyInstance = [[PBSC_UserCanOperateCardsNotify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_UserCanOperateCardsNotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_UserCanOperateCardsNotifyInstance;
}
- (PBArray *)operateCodes {
  return operateCodesArray;
}
- (UInt32)operateCodesAtIndex:(NSUInteger)index {
  return [operateCodesArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasCard) {
    return NO;
  }
  if (!self.hasFromUid) {
    return NO;
  }
  if (!self.hasFromType) {
    return NO;
  }
  if (!self.hasOperateAble) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRoomId) {
    [output writeUInt32:1 value:self.roomId];
  }
  if (self.hasCard) {
    [output writeUInt32:2 value:self.card];
  }
  if (self.hasFromUid) {
    [output writeUInt32:3 value:self.fromUid];
  }
  if (self.hasFromType) {
    [output writeBool:4 value:self.fromType];
  }
  if (self.hasOperateAble) {
    [output writeBool:5 value:self.operateAble];
  }
  const NSUInteger operateCodesArrayCount = self.operateCodesArray.count;
  if (operateCodesArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.operateCodesArray.data;
    for (NSUInteger i = 0; i < operateCodesArrayCount; ++i) {
      [output writeUInt32:6 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRoomId) {
    size_ += computeUInt32Size(1, self.roomId);
  }
  if (self.hasCard) {
    size_ += computeUInt32Size(2, self.card);
  }
  if (self.hasFromUid) {
    size_ += computeUInt32Size(3, self.fromUid);
  }
  if (self.hasFromType) {
    size_ += computeBoolSize(4, self.fromType);
  }
  if (self.hasOperateAble) {
    size_ += computeBoolSize(5, self.operateAble);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.operateCodesArray.count;
    const UInt32 *values = (const UInt32 *)self.operateCodesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_UserCanOperateCardsNotify*) parseFromData:(NSData*) data {
  return (PBSC_UserCanOperateCardsNotify*)[[[PBSC_UserCanOperateCardsNotify builder] mergeFromData:data] build];
}
+ (PBSC_UserCanOperateCardsNotify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserCanOperateCardsNotify*)[[[PBSC_UserCanOperateCardsNotify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserCanOperateCardsNotify*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_UserCanOperateCardsNotify*)[[[PBSC_UserCanOperateCardsNotify builder] mergeFromInputStream:input] build];
}
+ (PBSC_UserCanOperateCardsNotify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserCanOperateCardsNotify*)[[[PBSC_UserCanOperateCardsNotify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserCanOperateCardsNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_UserCanOperateCardsNotify*)[[[PBSC_UserCanOperateCardsNotify builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_UserCanOperateCardsNotify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserCanOperateCardsNotify*)[[[PBSC_UserCanOperateCardsNotify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserCanOperateCardsNotifyBuilder*) builder {
  return [[PBSC_UserCanOperateCardsNotifyBuilder alloc] init];
}
+ (PBSC_UserCanOperateCardsNotifyBuilder*) builderWithPrototype:(PBSC_UserCanOperateCardsNotify*) prototype {
  return [[PBSC_UserCanOperateCardsNotify builder] mergeFrom:prototype];
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) builder {
  return [PBSC_UserCanOperateCardsNotify builder];
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) toBuilder {
  return [PBSC_UserCanOperateCardsNotify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"card", [NSNumber numberWithInteger:self.card]];
  }
  if (self.hasFromUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUid", [NSNumber numberWithInteger:self.fromUid]];
  }
  if (self.hasFromType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromType", [NSNumber numberWithBool:self.fromType]];
  }
  if (self.hasOperateAble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operateAble", [NSNumber numberWithBool:self.operateAble]];
  }
  [self.operateCodesArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operateCodes", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasCard) {
    [dictionary setObject: [NSNumber numberWithInteger:self.card] forKey: @"card"];
  }
  if (self.hasFromUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromUid] forKey: @"fromUid"];
  }
  if (self.hasFromType) {
    [dictionary setObject: [NSNumber numberWithBool:self.fromType] forKey: @"fromType"];
  }
  if (self.hasOperateAble) {
    [dictionary setObject: [NSNumber numberWithBool:self.operateAble] forKey: @"operateAble"];
  }
  NSMutableArray * operateCodesArrayArray = [NSMutableArray new];
  NSUInteger operateCodesArrayCount=self.operateCodesArray.count;
  for(int i=0;i<operateCodesArrayCount;i++){
    [operateCodesArrayArray addObject: @([self.operateCodesArray uint32AtIndex:i])];
  }
  [dictionary setObject: operateCodesArrayArray forKey: @"operateCodes"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_UserCanOperateCardsNotify class]]) {
    return NO;
  }
  PBSC_UserCanOperateCardsNotify *otherMessage = other;
  return
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasCard == otherMessage.hasCard &&
      (!self.hasCard || self.card == otherMessage.card) &&
      self.hasFromUid == otherMessage.hasFromUid &&
      (!self.hasFromUid || self.fromUid == otherMessage.fromUid) &&
      self.hasFromType == otherMessage.hasFromType &&
      (!self.hasFromType || self.fromType == otherMessage.fromType) &&
      self.hasOperateAble == otherMessage.hasOperateAble &&
      (!self.hasOperateAble || self.operateAble == otherMessage.operateAble) &&
      [self.operateCodesArray isEqualToArray:otherMessage.operateCodesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasCard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.card] hash];
  }
  if (self.hasFromUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUid] hash];
  }
  if (self.hasFromType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.fromType] hash];
  }
  if (self.hasOperateAble) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.operateAble] hash];
  }
  [self.operateCodesArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_UserCanOperateCardsNotifyBuilder()
@property (strong) PBSC_UserCanOperateCardsNotify* resultPbscUserCanOperateCardsNotify;
@end

@implementation PBSC_UserCanOperateCardsNotifyBuilder
@synthesize resultPbscUserCanOperateCardsNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscUserCanOperateCardsNotify = [[PBSC_UserCanOperateCardsNotify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscUserCanOperateCardsNotify;
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) clear {
  self.resultPbscUserCanOperateCardsNotify = [[PBSC_UserCanOperateCardsNotify alloc] init];
  return self;
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) clone {
  return [PBSC_UserCanOperateCardsNotify builderWithPrototype:resultPbscUserCanOperateCardsNotify];
}
- (PBSC_UserCanOperateCardsNotify*) defaultInstance {
  return [PBSC_UserCanOperateCardsNotify defaultInstance];
}
- (PBSC_UserCanOperateCardsNotify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_UserCanOperateCardsNotify*) buildPartial {
  PBSC_UserCanOperateCardsNotify* returnMe = resultPbscUserCanOperateCardsNotify;
  self.resultPbscUserCanOperateCardsNotify = nil;
  return returnMe;
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) mergeFrom:(PBSC_UserCanOperateCardsNotify*) other {
  if (other == [PBSC_UserCanOperateCardsNotify defaultInstance]) {
    return self;
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasCard) {
    [self setCard:other.card];
  }
  if (other.hasFromUid) {
    [self setFromUid:other.fromUid];
  }
  if (other.hasFromType) {
    [self setFromType:other.fromType];
  }
  if (other.hasOperateAble) {
    [self setOperateAble:other.operateAble];
  }
  if (other.operateCodesArray.count > 0) {
    if (resultPbscUserCanOperateCardsNotify.operateCodesArray == nil) {
      resultPbscUserCanOperateCardsNotify.operateCodesArray = [other.operateCodesArray copy];
    } else {
      [resultPbscUserCanOperateCardsNotify.operateCodesArray appendArray:other.operateCodesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setCard:[input readUInt32]];
        break;
      }
      case 24: {
        [self setFromUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setFromType:[input readBool]];
        break;
      }
      case 40: {
        [self setOperateAble:[input readBool]];
        break;
      }
      case 48: {
        [self addOperateCodes:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRoomId {
  return resultPbscUserCanOperateCardsNotify.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscUserCanOperateCardsNotify.roomId;
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) setRoomId:(UInt32) value {
  resultPbscUserCanOperateCardsNotify.hasRoomId = YES;
  resultPbscUserCanOperateCardsNotify.roomId = value;
  return self;
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) clearRoomId {
  resultPbscUserCanOperateCardsNotify.hasRoomId = NO;
  resultPbscUserCanOperateCardsNotify.roomId = 0;
  return self;
}
- (BOOL) hasCard {
  return resultPbscUserCanOperateCardsNotify.hasCard;
}
- (UInt32) card {
  return resultPbscUserCanOperateCardsNotify.card;
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) setCard:(UInt32) value {
  resultPbscUserCanOperateCardsNotify.hasCard = YES;
  resultPbscUserCanOperateCardsNotify.card = value;
  return self;
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) clearCard {
  resultPbscUserCanOperateCardsNotify.hasCard = NO;
  resultPbscUserCanOperateCardsNotify.card = 0;
  return self;
}
- (BOOL) hasFromUid {
  return resultPbscUserCanOperateCardsNotify.hasFromUid;
}
- (UInt32) fromUid {
  return resultPbscUserCanOperateCardsNotify.fromUid;
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) setFromUid:(UInt32) value {
  resultPbscUserCanOperateCardsNotify.hasFromUid = YES;
  resultPbscUserCanOperateCardsNotify.fromUid = value;
  return self;
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) clearFromUid {
  resultPbscUserCanOperateCardsNotify.hasFromUid = NO;
  resultPbscUserCanOperateCardsNotify.fromUid = 0;
  return self;
}
- (BOOL) hasFromType {
  return resultPbscUserCanOperateCardsNotify.hasFromType;
}
- (BOOL) fromType {
  return resultPbscUserCanOperateCardsNotify.fromType;
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) setFromType:(BOOL) value {
  resultPbscUserCanOperateCardsNotify.hasFromType = YES;
  resultPbscUserCanOperateCardsNotify.fromType = value;
  return self;
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) clearFromType {
  resultPbscUserCanOperateCardsNotify.hasFromType = NO;
  resultPbscUserCanOperateCardsNotify.fromType = NO;
  return self;
}
- (BOOL) hasOperateAble {
  return resultPbscUserCanOperateCardsNotify.hasOperateAble;
}
- (BOOL) operateAble {
  return resultPbscUserCanOperateCardsNotify.operateAble;
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) setOperateAble:(BOOL) value {
  resultPbscUserCanOperateCardsNotify.hasOperateAble = YES;
  resultPbscUserCanOperateCardsNotify.operateAble = value;
  return self;
}
- (PBSC_UserCanOperateCardsNotifyBuilder*) clearOperateAble {
  resultPbscUserCanOperateCardsNotify.hasOperateAble = NO;
  resultPbscUserCanOperateCardsNotify.operateAble = NO;
  return self;
}
- (PBAppendableArray *)operateCodes {
  return resultPbscUserCanOperateCardsNotify.operateCodesArray;
}
- (UInt32)operateCodesAtIndex:(NSUInteger)index {
  return [resultPbscUserCanOperateCardsNotify operateCodesAtIndex:index];
}
- (PBSC_UserCanOperateCardsNotifyBuilder *)addOperateCodes:(UInt32)value {
  if (resultPbscUserCanOperateCardsNotify.operateCodesArray == nil) {
    resultPbscUserCanOperateCardsNotify.operateCodesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultPbscUserCanOperateCardsNotify.operateCodesArray addUint32:value];
  return self;
}
- (PBSC_UserCanOperateCardsNotifyBuilder *)setOperateCodesArray:(NSArray *)array {
  resultPbscUserCanOperateCardsNotify.operateCodesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (PBSC_UserCanOperateCardsNotifyBuilder *)setOperateCodesValues:(const UInt32 *)values count:(NSUInteger)count {
  resultPbscUserCanOperateCardsNotify.operateCodesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (PBSC_UserCanOperateCardsNotifyBuilder *)clearOperateCodes {
  resultPbscUserCanOperateCardsNotify.operateCodesArray = nil;
  return self;
}
@end

@interface PBSC_UserGetCardInBuffer ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 executeUid;
@property UInt32 card;
@property (strong) PBAppendableArray * operateCodesArray;
@end

@implementation PBSC_UserGetCardInBuffer

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasExecuteUid {
  return !!hasExecuteUid_;
}
- (void) setHasExecuteUid:(BOOL) _value_ {
  hasExecuteUid_ = !!_value_;
}
@synthesize executeUid;
- (BOOL) hasCard {
  return !!hasCard_;
}
- (void) setHasCard:(BOOL) _value_ {
  hasCard_ = !!_value_;
}
@synthesize card;
@synthesize operateCodesArray;
@dynamic operateCodes;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.executeUid = 0;
    self.card = 0;
  }
  return self;
}
static PBSC_UserGetCardInBuffer* defaultPBSC_UserGetCardInBufferInstance = nil;
+ (void) initialize {
  if (self == [PBSC_UserGetCardInBuffer class]) {
    defaultPBSC_UserGetCardInBufferInstance = [[PBSC_UserGetCardInBuffer alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_UserGetCardInBufferInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_UserGetCardInBufferInstance;
}
- (PBArray *)operateCodes {
  return operateCodesArray;
}
- (UInt32)operateCodesAtIndex:(NSUInteger)index {
  return [operateCodesArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasExecuteUid) {
    return NO;
  }
  if (!self.hasCard) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasExecuteUid) {
    [output writeUInt32:3 value:self.executeUid];
  }
  if (self.hasCard) {
    [output writeUInt32:4 value:self.card];
  }
  const NSUInteger operateCodesArrayCount = self.operateCodesArray.count;
  if (operateCodesArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.operateCodesArray.data;
    for (NSUInteger i = 0; i < operateCodesArrayCount; ++i) {
      [output writeUInt32:5 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasExecuteUid) {
    size_ += computeUInt32Size(3, self.executeUid);
  }
  if (self.hasCard) {
    size_ += computeUInt32Size(4, self.card);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.operateCodesArray.count;
    const UInt32 *values = (const UInt32 *)self.operateCodesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_UserGetCardInBuffer*) parseFromData:(NSData*) data {
  return (PBSC_UserGetCardInBuffer*)[[[PBSC_UserGetCardInBuffer builder] mergeFromData:data] build];
}
+ (PBSC_UserGetCardInBuffer*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserGetCardInBuffer*)[[[PBSC_UserGetCardInBuffer builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserGetCardInBuffer*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_UserGetCardInBuffer*)[[[PBSC_UserGetCardInBuffer builder] mergeFromInputStream:input] build];
}
+ (PBSC_UserGetCardInBuffer*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserGetCardInBuffer*)[[[PBSC_UserGetCardInBuffer builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserGetCardInBuffer*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_UserGetCardInBuffer*)[[[PBSC_UserGetCardInBuffer builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_UserGetCardInBuffer*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserGetCardInBuffer*)[[[PBSC_UserGetCardInBuffer builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserGetCardInBufferBuilder*) builder {
  return [[PBSC_UserGetCardInBufferBuilder alloc] init];
}
+ (PBSC_UserGetCardInBufferBuilder*) builderWithPrototype:(PBSC_UserGetCardInBuffer*) prototype {
  return [[PBSC_UserGetCardInBuffer builder] mergeFrom:prototype];
}
- (PBSC_UserGetCardInBufferBuilder*) builder {
  return [PBSC_UserGetCardInBuffer builder];
}
- (PBSC_UserGetCardInBufferBuilder*) toBuilder {
  return [PBSC_UserGetCardInBuffer builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasExecuteUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"executeUid", [NSNumber numberWithInteger:self.executeUid]];
  }
  if (self.hasCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"card", [NSNumber numberWithInteger:self.card]];
  }
  [self.operateCodesArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operateCodes", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasExecuteUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.executeUid] forKey: @"executeUid"];
  }
  if (self.hasCard) {
    [dictionary setObject: [NSNumber numberWithInteger:self.card] forKey: @"card"];
  }
  NSMutableArray * operateCodesArrayArray = [NSMutableArray new];
  NSUInteger operateCodesArrayCount=self.operateCodesArray.count;
  for(int i=0;i<operateCodesArrayCount;i++){
    [operateCodesArrayArray addObject: @([self.operateCodesArray uint32AtIndex:i])];
  }
  [dictionary setObject: operateCodesArrayArray forKey: @"operateCodes"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_UserGetCardInBuffer class]]) {
    return NO;
  }
  PBSC_UserGetCardInBuffer *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasExecuteUid == otherMessage.hasExecuteUid &&
      (!self.hasExecuteUid || self.executeUid == otherMessage.executeUid) &&
      self.hasCard == otherMessage.hasCard &&
      (!self.hasCard || self.card == otherMessage.card) &&
      [self.operateCodesArray isEqualToArray:otherMessage.operateCodesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasExecuteUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.executeUid] hash];
  }
  if (self.hasCard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.card] hash];
  }
  [self.operateCodesArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_UserGetCardInBufferBuilder()
@property (strong) PBSC_UserGetCardInBuffer* resultPbscUserGetCardInBuffer;
@end

@implementation PBSC_UserGetCardInBufferBuilder
@synthesize resultPbscUserGetCardInBuffer;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscUserGetCardInBuffer = [[PBSC_UserGetCardInBuffer alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscUserGetCardInBuffer;
}
- (PBSC_UserGetCardInBufferBuilder*) clear {
  self.resultPbscUserGetCardInBuffer = [[PBSC_UserGetCardInBuffer alloc] init];
  return self;
}
- (PBSC_UserGetCardInBufferBuilder*) clone {
  return [PBSC_UserGetCardInBuffer builderWithPrototype:resultPbscUserGetCardInBuffer];
}
- (PBSC_UserGetCardInBuffer*) defaultInstance {
  return [PBSC_UserGetCardInBuffer defaultInstance];
}
- (PBSC_UserGetCardInBuffer*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_UserGetCardInBuffer*) buildPartial {
  PBSC_UserGetCardInBuffer* returnMe = resultPbscUserGetCardInBuffer;
  self.resultPbscUserGetCardInBuffer = nil;
  return returnMe;
}
- (PBSC_UserGetCardInBufferBuilder*) mergeFrom:(PBSC_UserGetCardInBuffer*) other {
  if (other == [PBSC_UserGetCardInBuffer defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasExecuteUid) {
    [self setExecuteUid:other.executeUid];
  }
  if (other.hasCard) {
    [self setCard:other.card];
  }
  if (other.operateCodesArray.count > 0) {
    if (resultPbscUserGetCardInBuffer.operateCodesArray == nil) {
      resultPbscUserGetCardInBuffer.operateCodesArray = [other.operateCodesArray copy];
    } else {
      [resultPbscUserGetCardInBuffer.operateCodesArray appendArray:other.operateCodesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_UserGetCardInBufferBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_UserGetCardInBufferBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setExecuteUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setCard:[input readUInt32]];
        break;
      }
      case 40: {
        [self addOperateCodes:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbscUserGetCardInBuffer.hasSeqId;
}
- (UInt32) seqId {
  return resultPbscUserGetCardInBuffer.seqId;
}
- (PBSC_UserGetCardInBufferBuilder*) setSeqId:(UInt32) value {
  resultPbscUserGetCardInBuffer.hasSeqId = YES;
  resultPbscUserGetCardInBuffer.seqId = value;
  return self;
}
- (PBSC_UserGetCardInBufferBuilder*) clearSeqId {
  resultPbscUserGetCardInBuffer.hasSeqId = NO;
  resultPbscUserGetCardInBuffer.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbscUserGetCardInBuffer.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscUserGetCardInBuffer.roomId;
}
- (PBSC_UserGetCardInBufferBuilder*) setRoomId:(UInt32) value {
  resultPbscUserGetCardInBuffer.hasRoomId = YES;
  resultPbscUserGetCardInBuffer.roomId = value;
  return self;
}
- (PBSC_UserGetCardInBufferBuilder*) clearRoomId {
  resultPbscUserGetCardInBuffer.hasRoomId = NO;
  resultPbscUserGetCardInBuffer.roomId = 0;
  return self;
}
- (BOOL) hasExecuteUid {
  return resultPbscUserGetCardInBuffer.hasExecuteUid;
}
- (UInt32) executeUid {
  return resultPbscUserGetCardInBuffer.executeUid;
}
- (PBSC_UserGetCardInBufferBuilder*) setExecuteUid:(UInt32) value {
  resultPbscUserGetCardInBuffer.hasExecuteUid = YES;
  resultPbscUserGetCardInBuffer.executeUid = value;
  return self;
}
- (PBSC_UserGetCardInBufferBuilder*) clearExecuteUid {
  resultPbscUserGetCardInBuffer.hasExecuteUid = NO;
  resultPbscUserGetCardInBuffer.executeUid = 0;
  return self;
}
- (BOOL) hasCard {
  return resultPbscUserGetCardInBuffer.hasCard;
}
- (UInt32) card {
  return resultPbscUserGetCardInBuffer.card;
}
- (PBSC_UserGetCardInBufferBuilder*) setCard:(UInt32) value {
  resultPbscUserGetCardInBuffer.hasCard = YES;
  resultPbscUserGetCardInBuffer.card = value;
  return self;
}
- (PBSC_UserGetCardInBufferBuilder*) clearCard {
  resultPbscUserGetCardInBuffer.hasCard = NO;
  resultPbscUserGetCardInBuffer.card = 0;
  return self;
}
- (PBAppendableArray *)operateCodes {
  return resultPbscUserGetCardInBuffer.operateCodesArray;
}
- (UInt32)operateCodesAtIndex:(NSUInteger)index {
  return [resultPbscUserGetCardInBuffer operateCodesAtIndex:index];
}
- (PBSC_UserGetCardInBufferBuilder *)addOperateCodes:(UInt32)value {
  if (resultPbscUserGetCardInBuffer.operateCodesArray == nil) {
    resultPbscUserGetCardInBuffer.operateCodesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultPbscUserGetCardInBuffer.operateCodesArray addUint32:value];
  return self;
}
- (PBSC_UserGetCardInBufferBuilder *)setOperateCodesArray:(NSArray *)array {
  resultPbscUserGetCardInBuffer.operateCodesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (PBSC_UserGetCardInBufferBuilder *)setOperateCodesValues:(const UInt32 *)values count:(NSUInteger)count {
  resultPbscUserGetCardInBuffer.operateCodesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (PBSC_UserGetCardInBufferBuilder *)clearOperateCodes {
  resultPbscUserGetCardInBuffer.operateCodesArray = nil;
  return self;
}
@end

@interface PBCS_UserGetCardInBufferAck ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 executeUid;
@property UInt32 card;
@property (strong) PBAppendableArray * operateCodeArray;
@end

@implementation PBCS_UserGetCardInBufferAck

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasExecuteUid {
  return !!hasExecuteUid_;
}
- (void) setHasExecuteUid:(BOOL) _value_ {
  hasExecuteUid_ = !!_value_;
}
@synthesize executeUid;
- (BOOL) hasCard {
  return !!hasCard_;
}
- (void) setHasCard:(BOOL) _value_ {
  hasCard_ = !!_value_;
}
@synthesize card;
@synthesize operateCodeArray;
@dynamic operateCode;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.executeUid = 0;
    self.card = 0;
  }
  return self;
}
static PBCS_UserGetCardInBufferAck* defaultPBCS_UserGetCardInBufferAckInstance = nil;
+ (void) initialize {
  if (self == [PBCS_UserGetCardInBufferAck class]) {
    defaultPBCS_UserGetCardInBufferAckInstance = [[PBCS_UserGetCardInBufferAck alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCS_UserGetCardInBufferAckInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCS_UserGetCardInBufferAckInstance;
}
- (PBArray *)operateCode {
  return operateCodeArray;
}
- (UInt32)operateCodeAtIndex:(NSUInteger)index {
  return [operateCodeArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasExecuteUid) {
    return NO;
  }
  if (!self.hasCard) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasExecuteUid) {
    [output writeUInt32:3 value:self.executeUid];
  }
  if (self.hasCard) {
    [output writeUInt32:4 value:self.card];
  }
  const NSUInteger operateCodeArrayCount = self.operateCodeArray.count;
  if (operateCodeArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.operateCodeArray.data;
    for (NSUInteger i = 0; i < operateCodeArrayCount; ++i) {
      [output writeUInt32:5 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasExecuteUid) {
    size_ += computeUInt32Size(3, self.executeUid);
  }
  if (self.hasCard) {
    size_ += computeUInt32Size(4, self.card);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.operateCodeArray.count;
    const UInt32 *values = (const UInt32 *)self.operateCodeArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBCS_UserGetCardInBufferAck*) parseFromData:(NSData*) data {
  return (PBCS_UserGetCardInBufferAck*)[[[PBCS_UserGetCardInBufferAck builder] mergeFromData:data] build];
}
+ (PBCS_UserGetCardInBufferAck*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_UserGetCardInBufferAck*)[[[PBCS_UserGetCardInBufferAck builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCS_UserGetCardInBufferAck*) parseFromInputStream:(NSInputStream*) input {
  return (PBCS_UserGetCardInBufferAck*)[[[PBCS_UserGetCardInBufferAck builder] mergeFromInputStream:input] build];
}
+ (PBCS_UserGetCardInBufferAck*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_UserGetCardInBufferAck*)[[[PBCS_UserGetCardInBufferAck builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_UserGetCardInBufferAck*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCS_UserGetCardInBufferAck*)[[[PBCS_UserGetCardInBufferAck builder] mergeFromCodedInputStream:input] build];
}
+ (PBCS_UserGetCardInBufferAck*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_UserGetCardInBufferAck*)[[[PBCS_UserGetCardInBufferAck builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_UserGetCardInBufferAckBuilder*) builder {
  return [[PBCS_UserGetCardInBufferAckBuilder alloc] init];
}
+ (PBCS_UserGetCardInBufferAckBuilder*) builderWithPrototype:(PBCS_UserGetCardInBufferAck*) prototype {
  return [[PBCS_UserGetCardInBufferAck builder] mergeFrom:prototype];
}
- (PBCS_UserGetCardInBufferAckBuilder*) builder {
  return [PBCS_UserGetCardInBufferAck builder];
}
- (PBCS_UserGetCardInBufferAckBuilder*) toBuilder {
  return [PBCS_UserGetCardInBufferAck builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasExecuteUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"executeUid", [NSNumber numberWithInteger:self.executeUid]];
  }
  if (self.hasCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"card", [NSNumber numberWithInteger:self.card]];
  }
  [self.operateCodeArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operateCode", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasExecuteUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.executeUid] forKey: @"executeUid"];
  }
  if (self.hasCard) {
    [dictionary setObject: [NSNumber numberWithInteger:self.card] forKey: @"card"];
  }
  NSMutableArray * operateCodeArrayArray = [NSMutableArray new];
  NSUInteger operateCodeArrayCount=self.operateCodeArray.count;
  for(int i=0;i<operateCodeArrayCount;i++){
    [operateCodeArrayArray addObject: @([self.operateCodeArray uint32AtIndex:i])];
  }
  [dictionary setObject: operateCodeArrayArray forKey: @"operateCode"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBCS_UserGetCardInBufferAck class]]) {
    return NO;
  }
  PBCS_UserGetCardInBufferAck *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasExecuteUid == otherMessage.hasExecuteUid &&
      (!self.hasExecuteUid || self.executeUid == otherMessage.executeUid) &&
      self.hasCard == otherMessage.hasCard &&
      (!self.hasCard || self.card == otherMessage.card) &&
      [self.operateCodeArray isEqualToArray:otherMessage.operateCodeArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasExecuteUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.executeUid] hash];
  }
  if (self.hasCard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.card] hash];
  }
  [self.operateCodeArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCS_UserGetCardInBufferAckBuilder()
@property (strong) PBCS_UserGetCardInBufferAck* resultPbcsUserGetCardInBufferAck;
@end

@implementation PBCS_UserGetCardInBufferAckBuilder
@synthesize resultPbcsUserGetCardInBufferAck;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcsUserGetCardInBufferAck = [[PBCS_UserGetCardInBufferAck alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcsUserGetCardInBufferAck;
}
- (PBCS_UserGetCardInBufferAckBuilder*) clear {
  self.resultPbcsUserGetCardInBufferAck = [[PBCS_UserGetCardInBufferAck alloc] init];
  return self;
}
- (PBCS_UserGetCardInBufferAckBuilder*) clone {
  return [PBCS_UserGetCardInBufferAck builderWithPrototype:resultPbcsUserGetCardInBufferAck];
}
- (PBCS_UserGetCardInBufferAck*) defaultInstance {
  return [PBCS_UserGetCardInBufferAck defaultInstance];
}
- (PBCS_UserGetCardInBufferAck*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCS_UserGetCardInBufferAck*) buildPartial {
  PBCS_UserGetCardInBufferAck* returnMe = resultPbcsUserGetCardInBufferAck;
  self.resultPbcsUserGetCardInBufferAck = nil;
  return returnMe;
}
- (PBCS_UserGetCardInBufferAckBuilder*) mergeFrom:(PBCS_UserGetCardInBufferAck*) other {
  if (other == [PBCS_UserGetCardInBufferAck defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasExecuteUid) {
    [self setExecuteUid:other.executeUid];
  }
  if (other.hasCard) {
    [self setCard:other.card];
  }
  if (other.operateCodeArray.count > 0) {
    if (resultPbcsUserGetCardInBufferAck.operateCodeArray == nil) {
      resultPbcsUserGetCardInBufferAck.operateCodeArray = [other.operateCodeArray copy];
    } else {
      [resultPbcsUserGetCardInBufferAck.operateCodeArray appendArray:other.operateCodeArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCS_UserGetCardInBufferAckBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCS_UserGetCardInBufferAckBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setExecuteUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setCard:[input readUInt32]];
        break;
      }
      case 40: {
        [self addOperateCode:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbcsUserGetCardInBufferAck.hasSeqId;
}
- (UInt32) seqId {
  return resultPbcsUserGetCardInBufferAck.seqId;
}
- (PBCS_UserGetCardInBufferAckBuilder*) setSeqId:(UInt32) value {
  resultPbcsUserGetCardInBufferAck.hasSeqId = YES;
  resultPbcsUserGetCardInBufferAck.seqId = value;
  return self;
}
- (PBCS_UserGetCardInBufferAckBuilder*) clearSeqId {
  resultPbcsUserGetCardInBufferAck.hasSeqId = NO;
  resultPbcsUserGetCardInBufferAck.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbcsUserGetCardInBufferAck.hasRoomId;
}
- (UInt32) roomId {
  return resultPbcsUserGetCardInBufferAck.roomId;
}
- (PBCS_UserGetCardInBufferAckBuilder*) setRoomId:(UInt32) value {
  resultPbcsUserGetCardInBufferAck.hasRoomId = YES;
  resultPbcsUserGetCardInBufferAck.roomId = value;
  return self;
}
- (PBCS_UserGetCardInBufferAckBuilder*) clearRoomId {
  resultPbcsUserGetCardInBufferAck.hasRoomId = NO;
  resultPbcsUserGetCardInBufferAck.roomId = 0;
  return self;
}
- (BOOL) hasExecuteUid {
  return resultPbcsUserGetCardInBufferAck.hasExecuteUid;
}
- (UInt32) executeUid {
  return resultPbcsUserGetCardInBufferAck.executeUid;
}
- (PBCS_UserGetCardInBufferAckBuilder*) setExecuteUid:(UInt32) value {
  resultPbcsUserGetCardInBufferAck.hasExecuteUid = YES;
  resultPbcsUserGetCardInBufferAck.executeUid = value;
  return self;
}
- (PBCS_UserGetCardInBufferAckBuilder*) clearExecuteUid {
  resultPbcsUserGetCardInBufferAck.hasExecuteUid = NO;
  resultPbcsUserGetCardInBufferAck.executeUid = 0;
  return self;
}
- (BOOL) hasCard {
  return resultPbcsUserGetCardInBufferAck.hasCard;
}
- (UInt32) card {
  return resultPbcsUserGetCardInBufferAck.card;
}
- (PBCS_UserGetCardInBufferAckBuilder*) setCard:(UInt32) value {
  resultPbcsUserGetCardInBufferAck.hasCard = YES;
  resultPbcsUserGetCardInBufferAck.card = value;
  return self;
}
- (PBCS_UserGetCardInBufferAckBuilder*) clearCard {
  resultPbcsUserGetCardInBufferAck.hasCard = NO;
  resultPbcsUserGetCardInBufferAck.card = 0;
  return self;
}
- (PBAppendableArray *)operateCode {
  return resultPbcsUserGetCardInBufferAck.operateCodeArray;
}
- (UInt32)operateCodeAtIndex:(NSUInteger)index {
  return [resultPbcsUserGetCardInBufferAck operateCodeAtIndex:index];
}
- (PBCS_UserGetCardInBufferAckBuilder *)addOperateCode:(UInt32)value {
  if (resultPbcsUserGetCardInBufferAck.operateCodeArray == nil) {
    resultPbcsUserGetCardInBufferAck.operateCodeArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultPbcsUserGetCardInBufferAck.operateCodeArray addUint32:value];
  return self;
}
- (PBCS_UserGetCardInBufferAckBuilder *)setOperateCodeArray:(NSArray *)array {
  resultPbcsUserGetCardInBufferAck.operateCodeArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (PBCS_UserGetCardInBufferAckBuilder *)setOperateCodeValues:(const UInt32 *)values count:(NSUInteger)count {
  resultPbcsUserGetCardInBufferAck.operateCodeArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (PBCS_UserGetCardInBufferAckBuilder *)clearOperateCode {
  resultPbcsUserGetCardInBufferAck.operateCodeArray = nil;
  return self;
}
@end

@interface PBSC_UserGetCardInBuffer_Notify ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 executeUid;
@property UInt32 card;
@property (strong) NSMutableArray<PBtagWeaveItem*> * cardsInHandArray;
@property BOOL operateAble;
@property (strong) PBAppendableArray * operateCodesArray;
@end

@implementation PBSC_UserGetCardInBuffer_Notify

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasExecuteUid {
  return !!hasExecuteUid_;
}
- (void) setHasExecuteUid:(BOOL) _value_ {
  hasExecuteUid_ = !!_value_;
}
@synthesize executeUid;
- (BOOL) hasCard {
  return !!hasCard_;
}
- (void) setHasCard:(BOOL) _value_ {
  hasCard_ = !!_value_;
}
@synthesize card;
@synthesize cardsInHandArray;
@dynamic cardsInHand;
- (BOOL) hasOperateAble {
  return !!hasOperateAble_;
}
- (void) setHasOperateAble:(BOOL) _value_ {
  hasOperateAble_ = !!_value_;
}
- (BOOL) operateAble {
  return !!operateAble_;
}
- (void) setOperateAble:(BOOL) _value_ {
  operateAble_ = !!_value_;
}
@synthesize operateCodesArray;
@dynamic operateCodes;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.executeUid = 0;
    self.card = 0;
    self.operateAble = NO;
  }
  return self;
}
static PBSC_UserGetCardInBuffer_Notify* defaultPBSC_UserGetCardInBuffer_NotifyInstance = nil;
+ (void) initialize {
  if (self == [PBSC_UserGetCardInBuffer_Notify class]) {
    defaultPBSC_UserGetCardInBuffer_NotifyInstance = [[PBSC_UserGetCardInBuffer_Notify alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_UserGetCardInBuffer_NotifyInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_UserGetCardInBuffer_NotifyInstance;
}
- (NSArray<PBtagWeaveItem*> *)cardsInHand {
  return cardsInHandArray;
}
- (PBtagWeaveItem*)cardsInHandAtIndex:(NSUInteger)index {
  return [cardsInHandArray objectAtIndex:index];
}
- (PBArray *)operateCodes {
  return operateCodesArray;
}
- (UInt32)operateCodesAtIndex:(NSUInteger)index {
  return [operateCodesArray uint32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasExecuteUid) {
    return NO;
  }
  if (!self.hasCard) {
    return NO;
  }
  if (!self.hasOperateAble) {
    return NO;
  }
  __block BOOL isInitcardsInHand = YES;
   [self.cardsInHand enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcardsInHand = NO;
      *stop = YES;
    }
  }];
  if (!isInitcardsInHand) return isInitcardsInHand;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasExecuteUid) {
    [output writeUInt32:3 value:self.executeUid];
  }
  if (self.hasCard) {
    [output writeUInt32:4 value:self.card];
  }
  [self.cardsInHandArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  if (self.hasOperateAble) {
    [output writeBool:6 value:self.operateAble];
  }
  const NSUInteger operateCodesArrayCount = self.operateCodesArray.count;
  if (operateCodesArrayCount > 0) {
    const UInt32 *values = (const UInt32 *)self.operateCodesArray.data;
    for (NSUInteger i = 0; i < operateCodesArrayCount; ++i) {
      [output writeUInt32:7 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasExecuteUid) {
    size_ += computeUInt32Size(3, self.executeUid);
  }
  if (self.hasCard) {
    size_ += computeUInt32Size(4, self.card);
  }
  [self.cardsInHandArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  if (self.hasOperateAble) {
    size_ += computeBoolSize(6, self.operateAble);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.operateCodesArray.count;
    const UInt32 *values = (const UInt32 *)self.operateCodesArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeUInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_UserGetCardInBuffer_Notify*) parseFromData:(NSData*) data {
  return (PBSC_UserGetCardInBuffer_Notify*)[[[PBSC_UserGetCardInBuffer_Notify builder] mergeFromData:data] build];
}
+ (PBSC_UserGetCardInBuffer_Notify*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserGetCardInBuffer_Notify*)[[[PBSC_UserGetCardInBuffer_Notify builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserGetCardInBuffer_Notify*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_UserGetCardInBuffer_Notify*)[[[PBSC_UserGetCardInBuffer_Notify builder] mergeFromInputStream:input] build];
}
+ (PBSC_UserGetCardInBuffer_Notify*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserGetCardInBuffer_Notify*)[[[PBSC_UserGetCardInBuffer_Notify builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserGetCardInBuffer_Notify*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_UserGetCardInBuffer_Notify*)[[[PBSC_UserGetCardInBuffer_Notify builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_UserGetCardInBuffer_Notify*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_UserGetCardInBuffer_Notify*)[[[PBSC_UserGetCardInBuffer_Notify builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_UserGetCardInBuffer_NotifyBuilder*) builder {
  return [[PBSC_UserGetCardInBuffer_NotifyBuilder alloc] init];
}
+ (PBSC_UserGetCardInBuffer_NotifyBuilder*) builderWithPrototype:(PBSC_UserGetCardInBuffer_Notify*) prototype {
  return [[PBSC_UserGetCardInBuffer_Notify builder] mergeFrom:prototype];
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) builder {
  return [PBSC_UserGetCardInBuffer_Notify builder];
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) toBuilder {
  return [PBSC_UserGetCardInBuffer_Notify builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasExecuteUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"executeUid", [NSNumber numberWithInteger:self.executeUid]];
  }
  if (self.hasCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"card", [NSNumber numberWithInteger:self.card]];
  }
  [self.cardsInHandArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"cardsInHand"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasOperateAble) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operateAble", [NSNumber numberWithBool:self.operateAble]];
  }
  [self.operateCodesArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"operateCodes", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasExecuteUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.executeUid] forKey: @"executeUid"];
  }
  if (self.hasCard) {
    [dictionary setObject: [NSNumber numberWithInteger:self.card] forKey: @"card"];
  }
  for (PBtagWeaveItem* element in self.cardsInHandArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"cardsInHand"];
  }
  if (self.hasOperateAble) {
    [dictionary setObject: [NSNumber numberWithBool:self.operateAble] forKey: @"operateAble"];
  }
  NSMutableArray * operateCodesArrayArray = [NSMutableArray new];
  NSUInteger operateCodesArrayCount=self.operateCodesArray.count;
  for(int i=0;i<operateCodesArrayCount;i++){
    [operateCodesArrayArray addObject: @([self.operateCodesArray uint32AtIndex:i])];
  }
  [dictionary setObject: operateCodesArrayArray forKey: @"operateCodes"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_UserGetCardInBuffer_Notify class]]) {
    return NO;
  }
  PBSC_UserGetCardInBuffer_Notify *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasExecuteUid == otherMessage.hasExecuteUid &&
      (!self.hasExecuteUid || self.executeUid == otherMessage.executeUid) &&
      self.hasCard == otherMessage.hasCard &&
      (!self.hasCard || self.card == otherMessage.card) &&
      [self.cardsInHandArray isEqualToArray:otherMessage.cardsInHandArray] &&
      self.hasOperateAble == otherMessage.hasOperateAble &&
      (!self.hasOperateAble || self.operateAble == otherMessage.operateAble) &&
      [self.operateCodesArray isEqualToArray:otherMessage.operateCodesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasExecuteUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.executeUid] hash];
  }
  if (self.hasCard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.card] hash];
  }
  [self.cardsInHandArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasOperateAble) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.operateAble] hash];
  }
  [self.operateCodesArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_UserGetCardInBuffer_NotifyBuilder()
@property (strong) PBSC_UserGetCardInBuffer_Notify* resultPbscUserGetCardInBufferNotify;
@end

@implementation PBSC_UserGetCardInBuffer_NotifyBuilder
@synthesize resultPbscUserGetCardInBufferNotify;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscUserGetCardInBufferNotify = [[PBSC_UserGetCardInBuffer_Notify alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscUserGetCardInBufferNotify;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) clear {
  self.resultPbscUserGetCardInBufferNotify = [[PBSC_UserGetCardInBuffer_Notify alloc] init];
  return self;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) clone {
  return [PBSC_UserGetCardInBuffer_Notify builderWithPrototype:resultPbscUserGetCardInBufferNotify];
}
- (PBSC_UserGetCardInBuffer_Notify*) defaultInstance {
  return [PBSC_UserGetCardInBuffer_Notify defaultInstance];
}
- (PBSC_UserGetCardInBuffer_Notify*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_UserGetCardInBuffer_Notify*) buildPartial {
  PBSC_UserGetCardInBuffer_Notify* returnMe = resultPbscUserGetCardInBufferNotify;
  self.resultPbscUserGetCardInBufferNotify = nil;
  return returnMe;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) mergeFrom:(PBSC_UserGetCardInBuffer_Notify*) other {
  if (other == [PBSC_UserGetCardInBuffer_Notify defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasExecuteUid) {
    [self setExecuteUid:other.executeUid];
  }
  if (other.hasCard) {
    [self setCard:other.card];
  }
  if (other.cardsInHandArray.count > 0) {
    if (resultPbscUserGetCardInBufferNotify.cardsInHandArray == nil) {
      resultPbscUserGetCardInBufferNotify.cardsInHandArray = [[NSMutableArray alloc] initWithArray:other.cardsInHandArray];
    } else {
      [resultPbscUserGetCardInBufferNotify.cardsInHandArray addObjectsFromArray:other.cardsInHandArray];
    }
  }
  if (other.hasOperateAble) {
    [self setOperateAble:other.operateAble];
  }
  if (other.operateCodesArray.count > 0) {
    if (resultPbscUserGetCardInBufferNotify.operateCodesArray == nil) {
      resultPbscUserGetCardInBufferNotify.operateCodesArray = [other.operateCodesArray copy];
    } else {
      [resultPbscUserGetCardInBufferNotify.operateCodesArray appendArray:other.operateCodesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setExecuteUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setCard:[input readUInt32]];
        break;
      }
      case 42: {
        PBtagWeaveItemBuilder* subBuilder = [PBtagWeaveItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCardsInHand:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setOperateAble:[input readBool]];
        break;
      }
      case 56: {
        [self addOperateCodes:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbscUserGetCardInBufferNotify.hasSeqId;
}
- (UInt32) seqId {
  return resultPbscUserGetCardInBufferNotify.seqId;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) setSeqId:(UInt32) value {
  resultPbscUserGetCardInBufferNotify.hasSeqId = YES;
  resultPbscUserGetCardInBufferNotify.seqId = value;
  return self;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) clearSeqId {
  resultPbscUserGetCardInBufferNotify.hasSeqId = NO;
  resultPbscUserGetCardInBufferNotify.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbscUserGetCardInBufferNotify.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscUserGetCardInBufferNotify.roomId;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) setRoomId:(UInt32) value {
  resultPbscUserGetCardInBufferNotify.hasRoomId = YES;
  resultPbscUserGetCardInBufferNotify.roomId = value;
  return self;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) clearRoomId {
  resultPbscUserGetCardInBufferNotify.hasRoomId = NO;
  resultPbscUserGetCardInBufferNotify.roomId = 0;
  return self;
}
- (BOOL) hasExecuteUid {
  return resultPbscUserGetCardInBufferNotify.hasExecuteUid;
}
- (UInt32) executeUid {
  return resultPbscUserGetCardInBufferNotify.executeUid;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) setExecuteUid:(UInt32) value {
  resultPbscUserGetCardInBufferNotify.hasExecuteUid = YES;
  resultPbscUserGetCardInBufferNotify.executeUid = value;
  return self;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) clearExecuteUid {
  resultPbscUserGetCardInBufferNotify.hasExecuteUid = NO;
  resultPbscUserGetCardInBufferNotify.executeUid = 0;
  return self;
}
- (BOOL) hasCard {
  return resultPbscUserGetCardInBufferNotify.hasCard;
}
- (UInt32) card {
  return resultPbscUserGetCardInBufferNotify.card;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) setCard:(UInt32) value {
  resultPbscUserGetCardInBufferNotify.hasCard = YES;
  resultPbscUserGetCardInBufferNotify.card = value;
  return self;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) clearCard {
  resultPbscUserGetCardInBufferNotify.hasCard = NO;
  resultPbscUserGetCardInBufferNotify.card = 0;
  return self;
}
- (NSMutableArray<PBtagWeaveItem*> *)cardsInHand {
  return resultPbscUserGetCardInBufferNotify.cardsInHandArray;
}
- (PBtagWeaveItem*)cardsInHandAtIndex:(NSUInteger)index {
  return [resultPbscUserGetCardInBufferNotify cardsInHandAtIndex:index];
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder *)addCardsInHand:(PBtagWeaveItem*)value {
  if (resultPbscUserGetCardInBufferNotify.cardsInHandArray == nil) {
    resultPbscUserGetCardInBufferNotify.cardsInHandArray = [[NSMutableArray alloc]init];
  }
  [resultPbscUserGetCardInBufferNotify.cardsInHandArray addObject:value];
  return self;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder *)setCardsInHandArray:(NSArray<PBtagWeaveItem*> *)array {
  resultPbscUserGetCardInBufferNotify.cardsInHandArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder *)clearCardsInHand {
  resultPbscUserGetCardInBufferNotify.cardsInHandArray = nil;
  return self;
}
- (BOOL) hasOperateAble {
  return resultPbscUserGetCardInBufferNotify.hasOperateAble;
}
- (BOOL) operateAble {
  return resultPbscUserGetCardInBufferNotify.operateAble;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) setOperateAble:(BOOL) value {
  resultPbscUserGetCardInBufferNotify.hasOperateAble = YES;
  resultPbscUserGetCardInBufferNotify.operateAble = value;
  return self;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder*) clearOperateAble {
  resultPbscUserGetCardInBufferNotify.hasOperateAble = NO;
  resultPbscUserGetCardInBufferNotify.operateAble = NO;
  return self;
}
- (PBAppendableArray *)operateCodes {
  return resultPbscUserGetCardInBufferNotify.operateCodesArray;
}
- (UInt32)operateCodesAtIndex:(NSUInteger)index {
  return [resultPbscUserGetCardInBufferNotify operateCodesAtIndex:index];
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder *)addOperateCodes:(UInt32)value {
  if (resultPbscUserGetCardInBufferNotify.operateCodesArray == nil) {
    resultPbscUserGetCardInBufferNotify.operateCodesArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeUInt32];
  }
  [resultPbscUserGetCardInBufferNotify.operateCodesArray addUint32:value];
  return self;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder *)setOperateCodesArray:(NSArray *)array {
  resultPbscUserGetCardInBufferNotify.operateCodesArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeUInt32];
  return self;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder *)setOperateCodesValues:(const UInt32 *)values count:(NSUInteger)count {
  resultPbscUserGetCardInBufferNotify.operateCodesArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeUInt32];
  return self;
}
- (PBSC_UserGetCardInBuffer_NotifyBuilder *)clearOperateCodes {
  resultPbscUserGetCardInBufferNotify.operateCodesArray = nil;
  return self;
}
@end

@interface PBCS_PingRoom ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 uid;
@property UInt32 stampc;
@property (strong) NSString* payload;
@end

@implementation PBCS_PingRoom

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasStampc {
  return !!hasStampc_;
}
- (void) setHasStampc:(BOOL) _value_ {
  hasStampc_ = !!_value_;
}
@synthesize stampc;
- (BOOL) hasPayload {
  return !!hasPayload_;
}
- (void) setHasPayload:(BOOL) _value_ {
  hasPayload_ = !!_value_;
}
@synthesize payload;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.uid = 0;
    self.stampc = 0;
    self.payload = @"";
  }
  return self;
}
static PBCS_PingRoom* defaultPBCS_PingRoomInstance = nil;
+ (void) initialize {
  if (self == [PBCS_PingRoom class]) {
    defaultPBCS_PingRoomInstance = [[PBCS_PingRoom alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCS_PingRoomInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCS_PingRoomInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasStampc) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasUid) {
    [output writeUInt32:3 value:self.uid];
  }
  if (self.hasStampc) {
    [output writeUInt32:4 value:self.stampc];
  }
  if (self.hasPayload) {
    [output writeString:5 value:self.payload];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(3, self.uid);
  }
  if (self.hasStampc) {
    size_ += computeUInt32Size(4, self.stampc);
  }
  if (self.hasPayload) {
    size_ += computeStringSize(5, self.payload);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBCS_PingRoom*) parseFromData:(NSData*) data {
  return (PBCS_PingRoom*)[[[PBCS_PingRoom builder] mergeFromData:data] build];
}
+ (PBCS_PingRoom*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_PingRoom*)[[[PBCS_PingRoom builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCS_PingRoom*) parseFromInputStream:(NSInputStream*) input {
  return (PBCS_PingRoom*)[[[PBCS_PingRoom builder] mergeFromInputStream:input] build];
}
+ (PBCS_PingRoom*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_PingRoom*)[[[PBCS_PingRoom builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_PingRoom*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCS_PingRoom*)[[[PBCS_PingRoom builder] mergeFromCodedInputStream:input] build];
}
+ (PBCS_PingRoom*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_PingRoom*)[[[PBCS_PingRoom builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_PingRoomBuilder*) builder {
  return [[PBCS_PingRoomBuilder alloc] init];
}
+ (PBCS_PingRoomBuilder*) builderWithPrototype:(PBCS_PingRoom*) prototype {
  return [[PBCS_PingRoom builder] mergeFrom:prototype];
}
- (PBCS_PingRoomBuilder*) builder {
  return [PBCS_PingRoom builder];
}
- (PBCS_PingRoomBuilder*) toBuilder {
  return [PBCS_PingRoom builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasStampc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stampc", [NSNumber numberWithInteger:self.stampc]];
  }
  if (self.hasPayload) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payload", self.payload];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasStampc) {
    [dictionary setObject: [NSNumber numberWithInteger:self.stampc] forKey: @"stampc"];
  }
  if (self.hasPayload) {
    [dictionary setObject: self.payload forKey: @"payload"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBCS_PingRoom class]]) {
    return NO;
  }
  PBCS_PingRoom *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasStampc == otherMessage.hasStampc &&
      (!self.hasStampc || self.stampc == otherMessage.stampc) &&
      self.hasPayload == otherMessage.hasPayload &&
      (!self.hasPayload || [self.payload isEqual:otherMessage.payload]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasStampc) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.stampc] hash];
  }
  if (self.hasPayload) {
    hashCode = hashCode * 31 + [self.payload hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCS_PingRoomBuilder()
@property (strong) PBCS_PingRoom* resultPbcsPingRoom;
@end

@implementation PBCS_PingRoomBuilder
@synthesize resultPbcsPingRoom;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcsPingRoom = [[PBCS_PingRoom alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcsPingRoom;
}
- (PBCS_PingRoomBuilder*) clear {
  self.resultPbcsPingRoom = [[PBCS_PingRoom alloc] init];
  return self;
}
- (PBCS_PingRoomBuilder*) clone {
  return [PBCS_PingRoom builderWithPrototype:resultPbcsPingRoom];
}
- (PBCS_PingRoom*) defaultInstance {
  return [PBCS_PingRoom defaultInstance];
}
- (PBCS_PingRoom*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCS_PingRoom*) buildPartial {
  PBCS_PingRoom* returnMe = resultPbcsPingRoom;
  self.resultPbcsPingRoom = nil;
  return returnMe;
}
- (PBCS_PingRoomBuilder*) mergeFrom:(PBCS_PingRoom*) other {
  if (other == [PBCS_PingRoom defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasStampc) {
    [self setStampc:other.stampc];
  }
  if (other.hasPayload) {
    [self setPayload:other.payload];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCS_PingRoomBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCS_PingRoomBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setStampc:[input readUInt32]];
        break;
      }
      case 42: {
        [self setPayload:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbcsPingRoom.hasSeqId;
}
- (UInt32) seqId {
  return resultPbcsPingRoom.seqId;
}
- (PBCS_PingRoomBuilder*) setSeqId:(UInt32) value {
  resultPbcsPingRoom.hasSeqId = YES;
  resultPbcsPingRoom.seqId = value;
  return self;
}
- (PBCS_PingRoomBuilder*) clearSeqId {
  resultPbcsPingRoom.hasSeqId = NO;
  resultPbcsPingRoom.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbcsPingRoom.hasRoomId;
}
- (UInt32) roomId {
  return resultPbcsPingRoom.roomId;
}
- (PBCS_PingRoomBuilder*) setRoomId:(UInt32) value {
  resultPbcsPingRoom.hasRoomId = YES;
  resultPbcsPingRoom.roomId = value;
  return self;
}
- (PBCS_PingRoomBuilder*) clearRoomId {
  resultPbcsPingRoom.hasRoomId = NO;
  resultPbcsPingRoom.roomId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbcsPingRoom.hasUid;
}
- (UInt32) uid {
  return resultPbcsPingRoom.uid;
}
- (PBCS_PingRoomBuilder*) setUid:(UInt32) value {
  resultPbcsPingRoom.hasUid = YES;
  resultPbcsPingRoom.uid = value;
  return self;
}
- (PBCS_PingRoomBuilder*) clearUid {
  resultPbcsPingRoom.hasUid = NO;
  resultPbcsPingRoom.uid = 0;
  return self;
}
- (BOOL) hasStampc {
  return resultPbcsPingRoom.hasStampc;
}
- (UInt32) stampc {
  return resultPbcsPingRoom.stampc;
}
- (PBCS_PingRoomBuilder*) setStampc:(UInt32) value {
  resultPbcsPingRoom.hasStampc = YES;
  resultPbcsPingRoom.stampc = value;
  return self;
}
- (PBCS_PingRoomBuilder*) clearStampc {
  resultPbcsPingRoom.hasStampc = NO;
  resultPbcsPingRoom.stampc = 0;
  return self;
}
- (BOOL) hasPayload {
  return resultPbcsPingRoom.hasPayload;
}
- (NSString*) payload {
  return resultPbcsPingRoom.payload;
}
- (PBCS_PingRoomBuilder*) setPayload:(NSString*) value {
  resultPbcsPingRoom.hasPayload = YES;
  resultPbcsPingRoom.payload = value;
  return self;
}
- (PBCS_PingRoomBuilder*) clearPayload {
  resultPbcsPingRoom.hasPayload = NO;
  resultPbcsPingRoom.payload = @"";
  return self;
}
@end

@interface PBSC_PingRoomRes ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 uid;
@property UInt32 stampc;
@property UInt32 stamps;
@end

@implementation PBSC_PingRoomRes

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasStampc {
  return !!hasStampc_;
}
- (void) setHasStampc:(BOOL) _value_ {
  hasStampc_ = !!_value_;
}
@synthesize stampc;
- (BOOL) hasStamps {
  return !!hasStamps_;
}
- (void) setHasStamps:(BOOL) _value_ {
  hasStamps_ = !!_value_;
}
@synthesize stamps;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.uid = 0;
    self.stampc = 0;
    self.stamps = 0;
  }
  return self;
}
static PBSC_PingRoomRes* defaultPBSC_PingRoomResInstance = nil;
+ (void) initialize {
  if (self == [PBSC_PingRoomRes class]) {
    defaultPBSC_PingRoomResInstance = [[PBSC_PingRoomRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_PingRoomResInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_PingRoomResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasStampc) {
    return NO;
  }
  if (!self.hasStamps) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasUid) {
    [output writeUInt32:3 value:self.uid];
  }
  if (self.hasStampc) {
    [output writeUInt32:4 value:self.stampc];
  }
  if (self.hasStamps) {
    [output writeUInt32:5 value:self.stamps];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(3, self.uid);
  }
  if (self.hasStampc) {
    size_ += computeUInt32Size(4, self.stampc);
  }
  if (self.hasStamps) {
    size_ += computeUInt32Size(5, self.stamps);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_PingRoomRes*) parseFromData:(NSData*) data {
  return (PBSC_PingRoomRes*)[[[PBSC_PingRoomRes builder] mergeFromData:data] build];
}
+ (PBSC_PingRoomRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_PingRoomRes*)[[[PBSC_PingRoomRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_PingRoomRes*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_PingRoomRes*)[[[PBSC_PingRoomRes builder] mergeFromInputStream:input] build];
}
+ (PBSC_PingRoomRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_PingRoomRes*)[[[PBSC_PingRoomRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_PingRoomRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_PingRoomRes*)[[[PBSC_PingRoomRes builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_PingRoomRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_PingRoomRes*)[[[PBSC_PingRoomRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_PingRoomResBuilder*) builder {
  return [[PBSC_PingRoomResBuilder alloc] init];
}
+ (PBSC_PingRoomResBuilder*) builderWithPrototype:(PBSC_PingRoomRes*) prototype {
  return [[PBSC_PingRoomRes builder] mergeFrom:prototype];
}
- (PBSC_PingRoomResBuilder*) builder {
  return [PBSC_PingRoomRes builder];
}
- (PBSC_PingRoomResBuilder*) toBuilder {
  return [PBSC_PingRoomRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasStampc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stampc", [NSNumber numberWithInteger:self.stampc]];
  }
  if (self.hasStamps) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stamps", [NSNumber numberWithInteger:self.stamps]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasStampc) {
    [dictionary setObject: [NSNumber numberWithInteger:self.stampc] forKey: @"stampc"];
  }
  if (self.hasStamps) {
    [dictionary setObject: [NSNumber numberWithInteger:self.stamps] forKey: @"stamps"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_PingRoomRes class]]) {
    return NO;
  }
  PBSC_PingRoomRes *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasStampc == otherMessage.hasStampc &&
      (!self.hasStampc || self.stampc == otherMessage.stampc) &&
      self.hasStamps == otherMessage.hasStamps &&
      (!self.hasStamps || self.stamps == otherMessage.stamps) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasStampc) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.stampc] hash];
  }
  if (self.hasStamps) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.stamps] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_PingRoomResBuilder()
@property (strong) PBSC_PingRoomRes* resultPbscPingRoomRes;
@end

@implementation PBSC_PingRoomResBuilder
@synthesize resultPbscPingRoomRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscPingRoomRes = [[PBSC_PingRoomRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscPingRoomRes;
}
- (PBSC_PingRoomResBuilder*) clear {
  self.resultPbscPingRoomRes = [[PBSC_PingRoomRes alloc] init];
  return self;
}
- (PBSC_PingRoomResBuilder*) clone {
  return [PBSC_PingRoomRes builderWithPrototype:resultPbscPingRoomRes];
}
- (PBSC_PingRoomRes*) defaultInstance {
  return [PBSC_PingRoomRes defaultInstance];
}
- (PBSC_PingRoomRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_PingRoomRes*) buildPartial {
  PBSC_PingRoomRes* returnMe = resultPbscPingRoomRes;
  self.resultPbscPingRoomRes = nil;
  return returnMe;
}
- (PBSC_PingRoomResBuilder*) mergeFrom:(PBSC_PingRoomRes*) other {
  if (other == [PBSC_PingRoomRes defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasStampc) {
    [self setStampc:other.stampc];
  }
  if (other.hasStamps) {
    [self setStamps:other.stamps];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_PingRoomResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_PingRoomResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setStampc:[input readUInt32]];
        break;
      }
      case 40: {
        [self setStamps:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbscPingRoomRes.hasSeqId;
}
- (UInt32) seqId {
  return resultPbscPingRoomRes.seqId;
}
- (PBSC_PingRoomResBuilder*) setSeqId:(UInt32) value {
  resultPbscPingRoomRes.hasSeqId = YES;
  resultPbscPingRoomRes.seqId = value;
  return self;
}
- (PBSC_PingRoomResBuilder*) clearSeqId {
  resultPbscPingRoomRes.hasSeqId = NO;
  resultPbscPingRoomRes.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbscPingRoomRes.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscPingRoomRes.roomId;
}
- (PBSC_PingRoomResBuilder*) setRoomId:(UInt32) value {
  resultPbscPingRoomRes.hasRoomId = YES;
  resultPbscPingRoomRes.roomId = value;
  return self;
}
- (PBSC_PingRoomResBuilder*) clearRoomId {
  resultPbscPingRoomRes.hasRoomId = NO;
  resultPbscPingRoomRes.roomId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbscPingRoomRes.hasUid;
}
- (UInt32) uid {
  return resultPbscPingRoomRes.uid;
}
- (PBSC_PingRoomResBuilder*) setUid:(UInt32) value {
  resultPbscPingRoomRes.hasUid = YES;
  resultPbscPingRoomRes.uid = value;
  return self;
}
- (PBSC_PingRoomResBuilder*) clearUid {
  resultPbscPingRoomRes.hasUid = NO;
  resultPbscPingRoomRes.uid = 0;
  return self;
}
- (BOOL) hasStampc {
  return resultPbscPingRoomRes.hasStampc;
}
- (UInt32) stampc {
  return resultPbscPingRoomRes.stampc;
}
- (PBSC_PingRoomResBuilder*) setStampc:(UInt32) value {
  resultPbscPingRoomRes.hasStampc = YES;
  resultPbscPingRoomRes.stampc = value;
  return self;
}
- (PBSC_PingRoomResBuilder*) clearStampc {
  resultPbscPingRoomRes.hasStampc = NO;
  resultPbscPingRoomRes.stampc = 0;
  return self;
}
- (BOOL) hasStamps {
  return resultPbscPingRoomRes.hasStamps;
}
- (UInt32) stamps {
  return resultPbscPingRoomRes.stamps;
}
- (PBSC_PingRoomResBuilder*) setStamps:(UInt32) value {
  resultPbscPingRoomRes.hasStamps = YES;
  resultPbscPingRoomRes.stamps = value;
  return self;
}
- (PBSC_PingRoomResBuilder*) clearStamps {
  resultPbscPingRoomRes.hasStamps = NO;
  resultPbscPingRoomRes.stamps = 0;
  return self;
}
@end

@interface PBCS_SendRoomMsgReq ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 uid;
@property UInt32 msgType;
@property UInt32 content;
@end

@implementation PBCS_SendRoomMsgReq

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasMsgType {
  return !!hasMsgType_;
}
- (void) setHasMsgType:(BOOL) _value_ {
  hasMsgType_ = !!_value_;
}
@synthesize msgType;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.uid = 0;
    self.msgType = 0;
    self.content = 0;
  }
  return self;
}
static PBCS_SendRoomMsgReq* defaultPBCS_SendRoomMsgReqInstance = nil;
+ (void) initialize {
  if (self == [PBCS_SendRoomMsgReq class]) {
    defaultPBCS_SendRoomMsgReqInstance = [[PBCS_SendRoomMsgReq alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBCS_SendRoomMsgReqInstance;
}
- (instancetype) defaultInstance {
  return defaultPBCS_SendRoomMsgReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasMsgType) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasUid) {
    [output writeUInt32:3 value:self.uid];
  }
  if (self.hasMsgType) {
    [output writeUInt32:4 value:self.msgType];
  }
  if (self.hasContent) {
    [output writeUInt32:5 value:self.content];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(3, self.uid);
  }
  if (self.hasMsgType) {
    size_ += computeUInt32Size(4, self.msgType);
  }
  if (self.hasContent) {
    size_ += computeUInt32Size(5, self.content);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBCS_SendRoomMsgReq*) parseFromData:(NSData*) data {
  return (PBCS_SendRoomMsgReq*)[[[PBCS_SendRoomMsgReq builder] mergeFromData:data] build];
}
+ (PBCS_SendRoomMsgReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_SendRoomMsgReq*)[[[PBCS_SendRoomMsgReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBCS_SendRoomMsgReq*) parseFromInputStream:(NSInputStream*) input {
  return (PBCS_SendRoomMsgReq*)[[[PBCS_SendRoomMsgReq builder] mergeFromInputStream:input] build];
}
+ (PBCS_SendRoomMsgReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_SendRoomMsgReq*)[[[PBCS_SendRoomMsgReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_SendRoomMsgReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBCS_SendRoomMsgReq*)[[[PBCS_SendRoomMsgReq builder] mergeFromCodedInputStream:input] build];
}
+ (PBCS_SendRoomMsgReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBCS_SendRoomMsgReq*)[[[PBCS_SendRoomMsgReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBCS_SendRoomMsgReqBuilder*) builder {
  return [[PBCS_SendRoomMsgReqBuilder alloc] init];
}
+ (PBCS_SendRoomMsgReqBuilder*) builderWithPrototype:(PBCS_SendRoomMsgReq*) prototype {
  return [[PBCS_SendRoomMsgReq builder] mergeFrom:prototype];
}
- (PBCS_SendRoomMsgReqBuilder*) builder {
  return [PBCS_SendRoomMsgReq builder];
}
- (PBCS_SendRoomMsgReqBuilder*) toBuilder {
  return [PBCS_SendRoomMsgReq builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasMsgType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgType", [NSNumber numberWithInteger:self.msgType]];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", [NSNumber numberWithInteger:self.content]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasMsgType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.msgType] forKey: @"msgType"];
  }
  if (self.hasContent) {
    [dictionary setObject: [NSNumber numberWithInteger:self.content] forKey: @"content"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBCS_SendRoomMsgReq class]]) {
    return NO;
  }
  PBCS_SendRoomMsgReq *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasMsgType == otherMessage.hasMsgType &&
      (!self.hasMsgType || self.msgType == otherMessage.msgType) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || self.content == otherMessage.content) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasMsgType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.msgType] hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.content] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBCS_SendRoomMsgReqBuilder()
@property (strong) PBCS_SendRoomMsgReq* resultPbcsSendRoomMsgReq;
@end

@implementation PBCS_SendRoomMsgReqBuilder
@synthesize resultPbcsSendRoomMsgReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbcsSendRoomMsgReq = [[PBCS_SendRoomMsgReq alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbcsSendRoomMsgReq;
}
- (PBCS_SendRoomMsgReqBuilder*) clear {
  self.resultPbcsSendRoomMsgReq = [[PBCS_SendRoomMsgReq alloc] init];
  return self;
}
- (PBCS_SendRoomMsgReqBuilder*) clone {
  return [PBCS_SendRoomMsgReq builderWithPrototype:resultPbcsSendRoomMsgReq];
}
- (PBCS_SendRoomMsgReq*) defaultInstance {
  return [PBCS_SendRoomMsgReq defaultInstance];
}
- (PBCS_SendRoomMsgReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBCS_SendRoomMsgReq*) buildPartial {
  PBCS_SendRoomMsgReq* returnMe = resultPbcsSendRoomMsgReq;
  self.resultPbcsSendRoomMsgReq = nil;
  return returnMe;
}
- (PBCS_SendRoomMsgReqBuilder*) mergeFrom:(PBCS_SendRoomMsgReq*) other {
  if (other == [PBCS_SendRoomMsgReq defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasMsgType) {
    [self setMsgType:other.msgType];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBCS_SendRoomMsgReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBCS_SendRoomMsgReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setMsgType:[input readUInt32]];
        break;
      }
      case 40: {
        [self setContent:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbcsSendRoomMsgReq.hasSeqId;
}
- (UInt32) seqId {
  return resultPbcsSendRoomMsgReq.seqId;
}
- (PBCS_SendRoomMsgReqBuilder*) setSeqId:(UInt32) value {
  resultPbcsSendRoomMsgReq.hasSeqId = YES;
  resultPbcsSendRoomMsgReq.seqId = value;
  return self;
}
- (PBCS_SendRoomMsgReqBuilder*) clearSeqId {
  resultPbcsSendRoomMsgReq.hasSeqId = NO;
  resultPbcsSendRoomMsgReq.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbcsSendRoomMsgReq.hasRoomId;
}
- (UInt32) roomId {
  return resultPbcsSendRoomMsgReq.roomId;
}
- (PBCS_SendRoomMsgReqBuilder*) setRoomId:(UInt32) value {
  resultPbcsSendRoomMsgReq.hasRoomId = YES;
  resultPbcsSendRoomMsgReq.roomId = value;
  return self;
}
- (PBCS_SendRoomMsgReqBuilder*) clearRoomId {
  resultPbcsSendRoomMsgReq.hasRoomId = NO;
  resultPbcsSendRoomMsgReq.roomId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbcsSendRoomMsgReq.hasUid;
}
- (UInt32) uid {
  return resultPbcsSendRoomMsgReq.uid;
}
- (PBCS_SendRoomMsgReqBuilder*) setUid:(UInt32) value {
  resultPbcsSendRoomMsgReq.hasUid = YES;
  resultPbcsSendRoomMsgReq.uid = value;
  return self;
}
- (PBCS_SendRoomMsgReqBuilder*) clearUid {
  resultPbcsSendRoomMsgReq.hasUid = NO;
  resultPbcsSendRoomMsgReq.uid = 0;
  return self;
}
- (BOOL) hasMsgType {
  return resultPbcsSendRoomMsgReq.hasMsgType;
}
- (UInt32) msgType {
  return resultPbcsSendRoomMsgReq.msgType;
}
- (PBCS_SendRoomMsgReqBuilder*) setMsgType:(UInt32) value {
  resultPbcsSendRoomMsgReq.hasMsgType = YES;
  resultPbcsSendRoomMsgReq.msgType = value;
  return self;
}
- (PBCS_SendRoomMsgReqBuilder*) clearMsgType {
  resultPbcsSendRoomMsgReq.hasMsgType = NO;
  resultPbcsSendRoomMsgReq.msgType = 0;
  return self;
}
- (BOOL) hasContent {
  return resultPbcsSendRoomMsgReq.hasContent;
}
- (UInt32) content {
  return resultPbcsSendRoomMsgReq.content;
}
- (PBCS_SendRoomMsgReqBuilder*) setContent:(UInt32) value {
  resultPbcsSendRoomMsgReq.hasContent = YES;
  resultPbcsSendRoomMsgReq.content = value;
  return self;
}
- (PBCS_SendRoomMsgReqBuilder*) clearContent {
  resultPbcsSendRoomMsgReq.hasContent = NO;
  resultPbcsSendRoomMsgReq.content = 0;
  return self;
}
@end

@interface PBSC_SendRoomMsgRes ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 uid;
@property UInt32 rescode;
@property UInt64 sendTime;
@end

@implementation PBSC_SendRoomMsgRes

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasRescode {
  return !!hasRescode_;
}
- (void) setHasRescode:(BOOL) _value_ {
  hasRescode_ = !!_value_;
}
@synthesize rescode;
- (BOOL) hasSendTime {
  return !!hasSendTime_;
}
- (void) setHasSendTime:(BOOL) _value_ {
  hasSendTime_ = !!_value_;
}
@synthesize sendTime;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.uid = 0;
    self.rescode = 0;
    self.sendTime = 0L;
  }
  return self;
}
static PBSC_SendRoomMsgRes* defaultPBSC_SendRoomMsgResInstance = nil;
+ (void) initialize {
  if (self == [PBSC_SendRoomMsgRes class]) {
    defaultPBSC_SendRoomMsgResInstance = [[PBSC_SendRoomMsgRes alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_SendRoomMsgResInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_SendRoomMsgResInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasRescode) {
    return NO;
  }
  if (!self.hasSendTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasUid) {
    [output writeUInt32:3 value:self.uid];
  }
  if (self.hasRescode) {
    [output writeUInt32:4 value:self.rescode];
  }
  if (self.hasSendTime) {
    [output writeUInt64:5 value:self.sendTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasUid) {
    size_ += computeUInt32Size(3, self.uid);
  }
  if (self.hasRescode) {
    size_ += computeUInt32Size(4, self.rescode);
  }
  if (self.hasSendTime) {
    size_ += computeUInt64Size(5, self.sendTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_SendRoomMsgRes*) parseFromData:(NSData*) data {
  return (PBSC_SendRoomMsgRes*)[[[PBSC_SendRoomMsgRes builder] mergeFromData:data] build];
}
+ (PBSC_SendRoomMsgRes*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_SendRoomMsgRes*)[[[PBSC_SendRoomMsgRes builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_SendRoomMsgRes*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_SendRoomMsgRes*)[[[PBSC_SendRoomMsgRes builder] mergeFromInputStream:input] build];
}
+ (PBSC_SendRoomMsgRes*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_SendRoomMsgRes*)[[[PBSC_SendRoomMsgRes builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_SendRoomMsgRes*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_SendRoomMsgRes*)[[[PBSC_SendRoomMsgRes builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_SendRoomMsgRes*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_SendRoomMsgRes*)[[[PBSC_SendRoomMsgRes builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_SendRoomMsgResBuilder*) builder {
  return [[PBSC_SendRoomMsgResBuilder alloc] init];
}
+ (PBSC_SendRoomMsgResBuilder*) builderWithPrototype:(PBSC_SendRoomMsgRes*) prototype {
  return [[PBSC_SendRoomMsgRes builder] mergeFrom:prototype];
}
- (PBSC_SendRoomMsgResBuilder*) builder {
  return [PBSC_SendRoomMsgRes builder];
}
- (PBSC_SendRoomMsgResBuilder*) toBuilder {
  return [PBSC_SendRoomMsgRes builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasRescode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rescode", [NSNumber numberWithInteger:self.rescode]];
  }
  if (self.hasSendTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sendTime", [NSNumber numberWithLongLong:self.sendTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasRescode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.rescode] forKey: @"rescode"];
  }
  if (self.hasSendTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sendTime] forKey: @"sendTime"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_SendRoomMsgRes class]]) {
    return NO;
  }
  PBSC_SendRoomMsgRes *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasRescode == otherMessage.hasRescode &&
      (!self.hasRescode || self.rescode == otherMessage.rescode) &&
      self.hasSendTime == otherMessage.hasSendTime &&
      (!self.hasSendTime || self.sendTime == otherMessage.sendTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasRescode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rescode] hash];
  }
  if (self.hasSendTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sendTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_SendRoomMsgResBuilder()
@property (strong) PBSC_SendRoomMsgRes* resultPbscSendRoomMsgRes;
@end

@implementation PBSC_SendRoomMsgResBuilder
@synthesize resultPbscSendRoomMsgRes;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscSendRoomMsgRes = [[PBSC_SendRoomMsgRes alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscSendRoomMsgRes;
}
- (PBSC_SendRoomMsgResBuilder*) clear {
  self.resultPbscSendRoomMsgRes = [[PBSC_SendRoomMsgRes alloc] init];
  return self;
}
- (PBSC_SendRoomMsgResBuilder*) clone {
  return [PBSC_SendRoomMsgRes builderWithPrototype:resultPbscSendRoomMsgRes];
}
- (PBSC_SendRoomMsgRes*) defaultInstance {
  return [PBSC_SendRoomMsgRes defaultInstance];
}
- (PBSC_SendRoomMsgRes*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_SendRoomMsgRes*) buildPartial {
  PBSC_SendRoomMsgRes* returnMe = resultPbscSendRoomMsgRes;
  self.resultPbscSendRoomMsgRes = nil;
  return returnMe;
}
- (PBSC_SendRoomMsgResBuilder*) mergeFrom:(PBSC_SendRoomMsgRes*) other {
  if (other == [PBSC_SendRoomMsgRes defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasRescode) {
    [self setRescode:other.rescode];
  }
  if (other.hasSendTime) {
    [self setSendTime:other.sendTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_SendRoomMsgResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_SendRoomMsgResBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setRescode:[input readUInt32]];
        break;
      }
      case 40: {
        [self setSendTime:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbscSendRoomMsgRes.hasSeqId;
}
- (UInt32) seqId {
  return resultPbscSendRoomMsgRes.seqId;
}
- (PBSC_SendRoomMsgResBuilder*) setSeqId:(UInt32) value {
  resultPbscSendRoomMsgRes.hasSeqId = YES;
  resultPbscSendRoomMsgRes.seqId = value;
  return self;
}
- (PBSC_SendRoomMsgResBuilder*) clearSeqId {
  resultPbscSendRoomMsgRes.hasSeqId = NO;
  resultPbscSendRoomMsgRes.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbscSendRoomMsgRes.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscSendRoomMsgRes.roomId;
}
- (PBSC_SendRoomMsgResBuilder*) setRoomId:(UInt32) value {
  resultPbscSendRoomMsgRes.hasRoomId = YES;
  resultPbscSendRoomMsgRes.roomId = value;
  return self;
}
- (PBSC_SendRoomMsgResBuilder*) clearRoomId {
  resultPbscSendRoomMsgRes.hasRoomId = NO;
  resultPbscSendRoomMsgRes.roomId = 0;
  return self;
}
- (BOOL) hasUid {
  return resultPbscSendRoomMsgRes.hasUid;
}
- (UInt32) uid {
  return resultPbscSendRoomMsgRes.uid;
}
- (PBSC_SendRoomMsgResBuilder*) setUid:(UInt32) value {
  resultPbscSendRoomMsgRes.hasUid = YES;
  resultPbscSendRoomMsgRes.uid = value;
  return self;
}
- (PBSC_SendRoomMsgResBuilder*) clearUid {
  resultPbscSendRoomMsgRes.hasUid = NO;
  resultPbscSendRoomMsgRes.uid = 0;
  return self;
}
- (BOOL) hasRescode {
  return resultPbscSendRoomMsgRes.hasRescode;
}
- (UInt32) rescode {
  return resultPbscSendRoomMsgRes.rescode;
}
- (PBSC_SendRoomMsgResBuilder*) setRescode:(UInt32) value {
  resultPbscSendRoomMsgRes.hasRescode = YES;
  resultPbscSendRoomMsgRes.rescode = value;
  return self;
}
- (PBSC_SendRoomMsgResBuilder*) clearRescode {
  resultPbscSendRoomMsgRes.hasRescode = NO;
  resultPbscSendRoomMsgRes.rescode = 0;
  return self;
}
- (BOOL) hasSendTime {
  return resultPbscSendRoomMsgRes.hasSendTime;
}
- (UInt64) sendTime {
  return resultPbscSendRoomMsgRes.sendTime;
}
- (PBSC_SendRoomMsgResBuilder*) setSendTime:(UInt64) value {
  resultPbscSendRoomMsgRes.hasSendTime = YES;
  resultPbscSendRoomMsgRes.sendTime = value;
  return self;
}
- (PBSC_SendRoomMsgResBuilder*) clearSendTime {
  resultPbscSendRoomMsgRes.hasSendTime = NO;
  resultPbscSendRoomMsgRes.sendTime = 0L;
  return self;
}
@end

@interface PBSC_BroadCastRoomMsg ()
@property UInt32 seqId;
@property UInt32 roomId;
@property UInt32 fromUid;
@property UInt32 msgType;
@property UInt32 content;
@property UInt64 sendTime;
@end

@implementation PBSC_BroadCastRoomMsg

- (BOOL) hasSeqId {
  return !!hasSeqId_;
}
- (void) setHasSeqId:(BOOL) _value_ {
  hasSeqId_ = !!_value_;
}
@synthesize seqId;
- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasFromUid {
  return !!hasFromUid_;
}
- (void) setHasFromUid:(BOOL) _value_ {
  hasFromUid_ = !!_value_;
}
@synthesize fromUid;
- (BOOL) hasMsgType {
  return !!hasMsgType_;
}
- (void) setHasMsgType:(BOOL) _value_ {
  hasMsgType_ = !!_value_;
}
@synthesize msgType;
- (BOOL) hasContent {
  return !!hasContent_;
}
- (void) setHasContent:(BOOL) _value_ {
  hasContent_ = !!_value_;
}
@synthesize content;
- (BOOL) hasSendTime {
  return !!hasSendTime_;
}
- (void) setHasSendTime:(BOOL) _value_ {
  hasSendTime_ = !!_value_;
}
@synthesize sendTime;
- (instancetype) init {
  if ((self = [super init])) {
    self.seqId = 0;
    self.roomId = 0;
    self.fromUid = 0;
    self.msgType = 0;
    self.content = 0;
    self.sendTime = 0L;
  }
  return self;
}
static PBSC_BroadCastRoomMsg* defaultPBSC_BroadCastRoomMsgInstance = nil;
+ (void) initialize {
  if (self == [PBSC_BroadCastRoomMsg class]) {
    defaultPBSC_BroadCastRoomMsgInstance = [[PBSC_BroadCastRoomMsg alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_BroadCastRoomMsgInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_BroadCastRoomMsgInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSeqId) {
    return NO;
  }
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasFromUid) {
    return NO;
  }
  if (!self.hasMsgType) {
    return NO;
  }
  if (!self.hasContent) {
    return NO;
  }
  if (!self.hasSendTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSeqId) {
    [output writeUInt32:1 value:self.seqId];
  }
  if (self.hasRoomId) {
    [output writeUInt32:2 value:self.roomId];
  }
  if (self.hasFromUid) {
    [output writeUInt32:3 value:self.fromUid];
  }
  if (self.hasMsgType) {
    [output writeUInt32:4 value:self.msgType];
  }
  if (self.hasContent) {
    [output writeUInt32:5 value:self.content];
  }
  if (self.hasSendTime) {
    [output writeUInt64:6 value:self.sendTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSeqId) {
    size_ += computeUInt32Size(1, self.seqId);
  }
  if (self.hasRoomId) {
    size_ += computeUInt32Size(2, self.roomId);
  }
  if (self.hasFromUid) {
    size_ += computeUInt32Size(3, self.fromUid);
  }
  if (self.hasMsgType) {
    size_ += computeUInt32Size(4, self.msgType);
  }
  if (self.hasContent) {
    size_ += computeUInt32Size(5, self.content);
  }
  if (self.hasSendTime) {
    size_ += computeUInt64Size(6, self.sendTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_BroadCastRoomMsg*) parseFromData:(NSData*) data {
  return (PBSC_BroadCastRoomMsg*)[[[PBSC_BroadCastRoomMsg builder] mergeFromData:data] build];
}
+ (PBSC_BroadCastRoomMsg*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_BroadCastRoomMsg*)[[[PBSC_BroadCastRoomMsg builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_BroadCastRoomMsg*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_BroadCastRoomMsg*)[[[PBSC_BroadCastRoomMsg builder] mergeFromInputStream:input] build];
}
+ (PBSC_BroadCastRoomMsg*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_BroadCastRoomMsg*)[[[PBSC_BroadCastRoomMsg builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_BroadCastRoomMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_BroadCastRoomMsg*)[[[PBSC_BroadCastRoomMsg builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_BroadCastRoomMsg*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_BroadCastRoomMsg*)[[[PBSC_BroadCastRoomMsg builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_BroadCastRoomMsgBuilder*) builder {
  return [[PBSC_BroadCastRoomMsgBuilder alloc] init];
}
+ (PBSC_BroadCastRoomMsgBuilder*) builderWithPrototype:(PBSC_BroadCastRoomMsg*) prototype {
  return [[PBSC_BroadCastRoomMsg builder] mergeFrom:prototype];
}
- (PBSC_BroadCastRoomMsgBuilder*) builder {
  return [PBSC_BroadCastRoomMsg builder];
}
- (PBSC_BroadCastRoomMsgBuilder*) toBuilder {
  return [PBSC_BroadCastRoomMsg builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSeqId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"seqId", [NSNumber numberWithInteger:self.seqId]];
  }
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasFromUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromUid", [NSNumber numberWithInteger:self.fromUid]];
  }
  if (self.hasMsgType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgType", [NSNumber numberWithInteger:self.msgType]];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", [NSNumber numberWithInteger:self.content]];
  }
  if (self.hasSendTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sendTime", [NSNumber numberWithLongLong:self.sendTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasSeqId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.seqId] forKey: @"seqId"];
  }
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasFromUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.fromUid] forKey: @"fromUid"];
  }
  if (self.hasMsgType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.msgType] forKey: @"msgType"];
  }
  if (self.hasContent) {
    [dictionary setObject: [NSNumber numberWithInteger:self.content] forKey: @"content"];
  }
  if (self.hasSendTime) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.sendTime] forKey: @"sendTime"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_BroadCastRoomMsg class]]) {
    return NO;
  }
  PBSC_BroadCastRoomMsg *otherMessage = other;
  return
      self.hasSeqId == otherMessage.hasSeqId &&
      (!self.hasSeqId || self.seqId == otherMessage.seqId) &&
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasFromUid == otherMessage.hasFromUid &&
      (!self.hasFromUid || self.fromUid == otherMessage.fromUid) &&
      self.hasMsgType == otherMessage.hasMsgType &&
      (!self.hasMsgType || self.msgType == otherMessage.msgType) &&
      self.hasContent == otherMessage.hasContent &&
      (!self.hasContent || self.content == otherMessage.content) &&
      self.hasSendTime == otherMessage.hasSendTime &&
      (!self.hasSendTime || self.sendTime == otherMessage.sendTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSeqId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.seqId] hash];
  }
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasFromUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fromUid] hash];
  }
  if (self.hasMsgType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.msgType] hash];
  }
  if (self.hasContent) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.content] hash];
  }
  if (self.hasSendTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.sendTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_BroadCastRoomMsgBuilder()
@property (strong) PBSC_BroadCastRoomMsg* resultPbscBroadCastRoomMsg;
@end

@implementation PBSC_BroadCastRoomMsgBuilder
@synthesize resultPbscBroadCastRoomMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscBroadCastRoomMsg = [[PBSC_BroadCastRoomMsg alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscBroadCastRoomMsg;
}
- (PBSC_BroadCastRoomMsgBuilder*) clear {
  self.resultPbscBroadCastRoomMsg = [[PBSC_BroadCastRoomMsg alloc] init];
  return self;
}
- (PBSC_BroadCastRoomMsgBuilder*) clone {
  return [PBSC_BroadCastRoomMsg builderWithPrototype:resultPbscBroadCastRoomMsg];
}
- (PBSC_BroadCastRoomMsg*) defaultInstance {
  return [PBSC_BroadCastRoomMsg defaultInstance];
}
- (PBSC_BroadCastRoomMsg*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_BroadCastRoomMsg*) buildPartial {
  PBSC_BroadCastRoomMsg* returnMe = resultPbscBroadCastRoomMsg;
  self.resultPbscBroadCastRoomMsg = nil;
  return returnMe;
}
- (PBSC_BroadCastRoomMsgBuilder*) mergeFrom:(PBSC_BroadCastRoomMsg*) other {
  if (other == [PBSC_BroadCastRoomMsg defaultInstance]) {
    return self;
  }
  if (other.hasSeqId) {
    [self setSeqId:other.seqId];
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasFromUid) {
    [self setFromUid:other.fromUid];
  }
  if (other.hasMsgType) {
    [self setMsgType:other.msgType];
  }
  if (other.hasContent) {
    [self setContent:other.content];
  }
  if (other.hasSendTime) {
    [self setSendTime:other.sendTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_BroadCastRoomMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_BroadCastRoomMsgBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSeqId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 24: {
        [self setFromUid:[input readUInt32]];
        break;
      }
      case 32: {
        [self setMsgType:[input readUInt32]];
        break;
      }
      case 40: {
        [self setContent:[input readUInt32]];
        break;
      }
      case 48: {
        [self setSendTime:[input readUInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasSeqId {
  return resultPbscBroadCastRoomMsg.hasSeqId;
}
- (UInt32) seqId {
  return resultPbscBroadCastRoomMsg.seqId;
}
- (PBSC_BroadCastRoomMsgBuilder*) setSeqId:(UInt32) value {
  resultPbscBroadCastRoomMsg.hasSeqId = YES;
  resultPbscBroadCastRoomMsg.seqId = value;
  return self;
}
- (PBSC_BroadCastRoomMsgBuilder*) clearSeqId {
  resultPbscBroadCastRoomMsg.hasSeqId = NO;
  resultPbscBroadCastRoomMsg.seqId = 0;
  return self;
}
- (BOOL) hasRoomId {
  return resultPbscBroadCastRoomMsg.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscBroadCastRoomMsg.roomId;
}
- (PBSC_BroadCastRoomMsgBuilder*) setRoomId:(UInt32) value {
  resultPbscBroadCastRoomMsg.hasRoomId = YES;
  resultPbscBroadCastRoomMsg.roomId = value;
  return self;
}
- (PBSC_BroadCastRoomMsgBuilder*) clearRoomId {
  resultPbscBroadCastRoomMsg.hasRoomId = NO;
  resultPbscBroadCastRoomMsg.roomId = 0;
  return self;
}
- (BOOL) hasFromUid {
  return resultPbscBroadCastRoomMsg.hasFromUid;
}
- (UInt32) fromUid {
  return resultPbscBroadCastRoomMsg.fromUid;
}
- (PBSC_BroadCastRoomMsgBuilder*) setFromUid:(UInt32) value {
  resultPbscBroadCastRoomMsg.hasFromUid = YES;
  resultPbscBroadCastRoomMsg.fromUid = value;
  return self;
}
- (PBSC_BroadCastRoomMsgBuilder*) clearFromUid {
  resultPbscBroadCastRoomMsg.hasFromUid = NO;
  resultPbscBroadCastRoomMsg.fromUid = 0;
  return self;
}
- (BOOL) hasMsgType {
  return resultPbscBroadCastRoomMsg.hasMsgType;
}
- (UInt32) msgType {
  return resultPbscBroadCastRoomMsg.msgType;
}
- (PBSC_BroadCastRoomMsgBuilder*) setMsgType:(UInt32) value {
  resultPbscBroadCastRoomMsg.hasMsgType = YES;
  resultPbscBroadCastRoomMsg.msgType = value;
  return self;
}
- (PBSC_BroadCastRoomMsgBuilder*) clearMsgType {
  resultPbscBroadCastRoomMsg.hasMsgType = NO;
  resultPbscBroadCastRoomMsg.msgType = 0;
  return self;
}
- (BOOL) hasContent {
  return resultPbscBroadCastRoomMsg.hasContent;
}
- (UInt32) content {
  return resultPbscBroadCastRoomMsg.content;
}
- (PBSC_BroadCastRoomMsgBuilder*) setContent:(UInt32) value {
  resultPbscBroadCastRoomMsg.hasContent = YES;
  resultPbscBroadCastRoomMsg.content = value;
  return self;
}
- (PBSC_BroadCastRoomMsgBuilder*) clearContent {
  resultPbscBroadCastRoomMsg.hasContent = NO;
  resultPbscBroadCastRoomMsg.content = 0;
  return self;
}
- (BOOL) hasSendTime {
  return resultPbscBroadCastRoomMsg.hasSendTime;
}
- (UInt64) sendTime {
  return resultPbscBroadCastRoomMsg.sendTime;
}
- (PBSC_BroadCastRoomMsgBuilder*) setSendTime:(UInt64) value {
  resultPbscBroadCastRoomMsg.hasSendTime = YES;
  resultPbscBroadCastRoomMsg.sendTime = value;
  return self;
}
- (PBSC_BroadCastRoomMsgBuilder*) clearSendTime {
  resultPbscBroadCastRoomMsg.hasSendTime = NO;
  resultPbscBroadCastRoomMsg.sendTime = 0L;
  return self;
}
@end

@interface p_round_over_user_stat ()
@property UInt32 uid;
@property SInt32 pointChange;
@property SInt32 point;
@property (strong) NSMutableArray<PBtagWeaveItem*> * cardsInHandArray;
@property (strong) NSMutableArray<PBtagWeaveItem*> * cardsInTableArray;
@end

@implementation p_round_over_user_stat

- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasPointChange {
  return !!hasPointChange_;
}
- (void) setHasPointChange:(BOOL) _value_ {
  hasPointChange_ = !!_value_;
}
@synthesize pointChange;
- (BOOL) hasPoint {
  return !!hasPoint_;
}
- (void) setHasPoint:(BOOL) _value_ {
  hasPoint_ = !!_value_;
}
@synthesize point;
@synthesize cardsInHandArray;
@dynamic cardsInHand;
@synthesize cardsInTableArray;
@dynamic cardsInTable;
- (instancetype) init {
  if ((self = [super init])) {
    self.uid = 0;
    self.pointChange = 0;
    self.point = 0;
  }
  return self;
}
static p_round_over_user_stat* defaultp_round_over_user_statInstance = nil;
+ (void) initialize {
  if (self == [p_round_over_user_stat class]) {
    defaultp_round_over_user_statInstance = [[p_round_over_user_stat alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultp_round_over_user_statInstance;
}
- (instancetype) defaultInstance {
  return defaultp_round_over_user_statInstance;
}
- (NSArray<PBtagWeaveItem*> *)cardsInHand {
  return cardsInHandArray;
}
- (PBtagWeaveItem*)cardsInHandAtIndex:(NSUInteger)index {
  return [cardsInHandArray objectAtIndex:index];
}
- (NSArray<PBtagWeaveItem*> *)cardsInTable {
  return cardsInTableArray;
}
- (PBtagWeaveItem*)cardsInTableAtIndex:(NSUInteger)index {
  return [cardsInTableArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasPointChange) {
    return NO;
  }
  __block BOOL isInitcardsInHand = YES;
   [self.cardsInHand enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcardsInHand = NO;
      *stop = YES;
    }
  }];
  if (!isInitcardsInHand) return isInitcardsInHand;
  __block BOOL isInitcardsInTable = YES;
   [self.cardsInTable enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcardsInTable = NO;
      *stop = YES;
    }
  }];
  if (!isInitcardsInTable) return isInitcardsInTable;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUid) {
    [output writeUInt32:1 value:self.uid];
  }
  if (self.hasPointChange) {
    [output writeInt32:2 value:self.pointChange];
  }
  if (self.hasPoint) {
    [output writeInt32:3 value:self.point];
  }
  [self.cardsInHandArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  [self.cardsInTableArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUid) {
    size_ += computeUInt32Size(1, self.uid);
  }
  if (self.hasPointChange) {
    size_ += computeInt32Size(2, self.pointChange);
  }
  if (self.hasPoint) {
    size_ += computeInt32Size(3, self.point);
  }
  [self.cardsInHandArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  [self.cardsInTableArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (p_round_over_user_stat*) parseFromData:(NSData*) data {
  return (p_round_over_user_stat*)[[[p_round_over_user_stat builder] mergeFromData:data] build];
}
+ (p_round_over_user_stat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (p_round_over_user_stat*)[[[p_round_over_user_stat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (p_round_over_user_stat*) parseFromInputStream:(NSInputStream*) input {
  return (p_round_over_user_stat*)[[[p_round_over_user_stat builder] mergeFromInputStream:input] build];
}
+ (p_round_over_user_stat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (p_round_over_user_stat*)[[[p_round_over_user_stat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (p_round_over_user_stat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (p_round_over_user_stat*)[[[p_round_over_user_stat builder] mergeFromCodedInputStream:input] build];
}
+ (p_round_over_user_stat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (p_round_over_user_stat*)[[[p_round_over_user_stat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (p_round_over_user_statBuilder*) builder {
  return [[p_round_over_user_statBuilder alloc] init];
}
+ (p_round_over_user_statBuilder*) builderWithPrototype:(p_round_over_user_stat*) prototype {
  return [[p_round_over_user_stat builder] mergeFrom:prototype];
}
- (p_round_over_user_statBuilder*) builder {
  return [p_round_over_user_stat builder];
}
- (p_round_over_user_statBuilder*) toBuilder {
  return [p_round_over_user_stat builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasPointChange) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pointChange", [NSNumber numberWithInteger:self.pointChange]];
  }
  if (self.hasPoint) {
    [output appendFormat:@"%@%@: %@\n", indent, @"point", [NSNumber numberWithInteger:self.point]];
  }
  [self.cardsInHandArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"cardsInHand"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.cardsInTableArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"cardsInTable"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasPointChange) {
    [dictionary setObject: [NSNumber numberWithInteger:self.pointChange] forKey: @"pointChange"];
  }
  if (self.hasPoint) {
    [dictionary setObject: [NSNumber numberWithInteger:self.point] forKey: @"point"];
  }
  for (PBtagWeaveItem* element in self.cardsInHandArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"cardsInHand"];
  }
  for (PBtagWeaveItem* element in self.cardsInTableArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"cardsInTable"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[p_round_over_user_stat class]]) {
    return NO;
  }
  p_round_over_user_stat *otherMessage = other;
  return
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasPointChange == otherMessage.hasPointChange &&
      (!self.hasPointChange || self.pointChange == otherMessage.pointChange) &&
      self.hasPoint == otherMessage.hasPoint &&
      (!self.hasPoint || self.point == otherMessage.point) &&
      [self.cardsInHandArray isEqualToArray:otherMessage.cardsInHandArray] &&
      [self.cardsInTableArray isEqualToArray:otherMessage.cardsInTableArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasPointChange) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.pointChange] hash];
  }
  if (self.hasPoint) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.point] hash];
  }
  [self.cardsInHandArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.cardsInTableArray enumerateObjectsUsingBlock:^(PBtagWeaveItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface p_round_over_user_statBuilder()
@property (strong) p_round_over_user_stat* resultPRoundOverUserStat;
@end

@implementation p_round_over_user_statBuilder
@synthesize resultPRoundOverUserStat;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPRoundOverUserStat = [[p_round_over_user_stat alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPRoundOverUserStat;
}
- (p_round_over_user_statBuilder*) clear {
  self.resultPRoundOverUserStat = [[p_round_over_user_stat alloc] init];
  return self;
}
- (p_round_over_user_statBuilder*) clone {
  return [p_round_over_user_stat builderWithPrototype:resultPRoundOverUserStat];
}
- (p_round_over_user_stat*) defaultInstance {
  return [p_round_over_user_stat defaultInstance];
}
- (p_round_over_user_stat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (p_round_over_user_stat*) buildPartial {
  p_round_over_user_stat* returnMe = resultPRoundOverUserStat;
  self.resultPRoundOverUserStat = nil;
  return returnMe;
}
- (p_round_over_user_statBuilder*) mergeFrom:(p_round_over_user_stat*) other {
  if (other == [p_round_over_user_stat defaultInstance]) {
    return self;
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasPointChange) {
    [self setPointChange:other.pointChange];
  }
  if (other.hasPoint) {
    [self setPoint:other.point];
  }
  if (other.cardsInHandArray.count > 0) {
    if (resultPRoundOverUserStat.cardsInHandArray == nil) {
      resultPRoundOverUserStat.cardsInHandArray = [[NSMutableArray alloc] initWithArray:other.cardsInHandArray];
    } else {
      [resultPRoundOverUserStat.cardsInHandArray addObjectsFromArray:other.cardsInHandArray];
    }
  }
  if (other.cardsInTableArray.count > 0) {
    if (resultPRoundOverUserStat.cardsInTableArray == nil) {
      resultPRoundOverUserStat.cardsInTableArray = [[NSMutableArray alloc] initWithArray:other.cardsInTableArray];
    } else {
      [resultPRoundOverUserStat.cardsInTableArray addObjectsFromArray:other.cardsInTableArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (p_round_over_user_statBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (p_round_over_user_statBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 16: {
        [self setPointChange:[input readInt32]];
        break;
      }
      case 24: {
        [self setPoint:[input readInt32]];
        break;
      }
      case 34: {
        PBtagWeaveItemBuilder* subBuilder = [PBtagWeaveItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCardsInHand:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        PBtagWeaveItemBuilder* subBuilder = [PBtagWeaveItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCardsInTable:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUid {
  return resultPRoundOverUserStat.hasUid;
}
- (UInt32) uid {
  return resultPRoundOverUserStat.uid;
}
- (p_round_over_user_statBuilder*) setUid:(UInt32) value {
  resultPRoundOverUserStat.hasUid = YES;
  resultPRoundOverUserStat.uid = value;
  return self;
}
- (p_round_over_user_statBuilder*) clearUid {
  resultPRoundOverUserStat.hasUid = NO;
  resultPRoundOverUserStat.uid = 0;
  return self;
}
- (BOOL) hasPointChange {
  return resultPRoundOverUserStat.hasPointChange;
}
- (SInt32) pointChange {
  return resultPRoundOverUserStat.pointChange;
}
- (p_round_over_user_statBuilder*) setPointChange:(SInt32) value {
  resultPRoundOverUserStat.hasPointChange = YES;
  resultPRoundOverUserStat.pointChange = value;
  return self;
}
- (p_round_over_user_statBuilder*) clearPointChange {
  resultPRoundOverUserStat.hasPointChange = NO;
  resultPRoundOverUserStat.pointChange = 0;
  return self;
}
- (BOOL) hasPoint {
  return resultPRoundOverUserStat.hasPoint;
}
- (SInt32) point {
  return resultPRoundOverUserStat.point;
}
- (p_round_over_user_statBuilder*) setPoint:(SInt32) value {
  resultPRoundOverUserStat.hasPoint = YES;
  resultPRoundOverUserStat.point = value;
  return self;
}
- (p_round_over_user_statBuilder*) clearPoint {
  resultPRoundOverUserStat.hasPoint = NO;
  resultPRoundOverUserStat.point = 0;
  return self;
}
- (NSMutableArray<PBtagWeaveItem*> *)cardsInHand {
  return resultPRoundOverUserStat.cardsInHandArray;
}
- (PBtagWeaveItem*)cardsInHandAtIndex:(NSUInteger)index {
  return [resultPRoundOverUserStat cardsInHandAtIndex:index];
}
- (p_round_over_user_statBuilder *)addCardsInHand:(PBtagWeaveItem*)value {
  if (resultPRoundOverUserStat.cardsInHandArray == nil) {
    resultPRoundOverUserStat.cardsInHandArray = [[NSMutableArray alloc]init];
  }
  [resultPRoundOverUserStat.cardsInHandArray addObject:value];
  return self;
}
- (p_round_over_user_statBuilder *)setCardsInHandArray:(NSArray<PBtagWeaveItem*> *)array {
  resultPRoundOverUserStat.cardsInHandArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (p_round_over_user_statBuilder *)clearCardsInHand {
  resultPRoundOverUserStat.cardsInHandArray = nil;
  return self;
}
- (NSMutableArray<PBtagWeaveItem*> *)cardsInTable {
  return resultPRoundOverUserStat.cardsInTableArray;
}
- (PBtagWeaveItem*)cardsInTableAtIndex:(NSUInteger)index {
  return [resultPRoundOverUserStat cardsInTableAtIndex:index];
}
- (p_round_over_user_statBuilder *)addCardsInTable:(PBtagWeaveItem*)value {
  if (resultPRoundOverUserStat.cardsInTableArray == nil) {
    resultPRoundOverUserStat.cardsInTableArray = [[NSMutableArray alloc]init];
  }
  [resultPRoundOverUserStat.cardsInTableArray addObject:value];
  return self;
}
- (p_round_over_user_statBuilder *)setCardsInTableArray:(NSArray<PBtagWeaveItem*> *)array {
  resultPRoundOverUserStat.cardsInTableArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (p_round_over_user_statBuilder *)clearCardsInTable {
  resultPRoundOverUserStat.cardsInTableArray = nil;
  return self;
}
@end

@interface PBSC_HuPai ()
@property UInt32 roomId;
@property UInt32 winer;
@property UInt32 lastWiner;
@property UInt32 card;
@property UInt32 diaPaoUid;
@property HuNameCode hucode;
@property UInt32 huPoint;
@property UInt32 serverTime;
@property UInt32 curRounds;
@property UInt32 maxRounds;
@property (strong) NSMutableArray<p_round_over_user_stat*> * userStatisArray;
@end

@implementation PBSC_HuPai

- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasWiner {
  return !!hasWiner_;
}
- (void) setHasWiner:(BOOL) _value_ {
  hasWiner_ = !!_value_;
}
@synthesize winer;
- (BOOL) hasLastWiner {
  return !!hasLastWiner_;
}
- (void) setHasLastWiner:(BOOL) _value_ {
  hasLastWiner_ = !!_value_;
}
@synthesize lastWiner;
- (BOOL) hasCard {
  return !!hasCard_;
}
- (void) setHasCard:(BOOL) _value_ {
  hasCard_ = !!_value_;
}
@synthesize card;
- (BOOL) hasDiaPaoUid {
  return !!hasDiaPaoUid_;
}
- (void) setHasDiaPaoUid:(BOOL) _value_ {
  hasDiaPaoUid_ = !!_value_;
}
@synthesize diaPaoUid;
- (BOOL) hasHucode {
  return !!hasHucode_;
}
- (void) setHasHucode:(BOOL) _value_ {
  hasHucode_ = !!_value_;
}
@synthesize hucode;
- (BOOL) hasHuPoint {
  return !!hasHuPoint_;
}
- (void) setHasHuPoint:(BOOL) _value_ {
  hasHuPoint_ = !!_value_;
}
@synthesize huPoint;
- (BOOL) hasServerTime {
  return !!hasServerTime_;
}
- (void) setHasServerTime:(BOOL) _value_ {
  hasServerTime_ = !!_value_;
}
@synthesize serverTime;
- (BOOL) hasCurRounds {
  return !!hasCurRounds_;
}
- (void) setHasCurRounds:(BOOL) _value_ {
  hasCurRounds_ = !!_value_;
}
@synthesize curRounds;
- (BOOL) hasMaxRounds {
  return !!hasMaxRounds_;
}
- (void) setHasMaxRounds:(BOOL) _value_ {
  hasMaxRounds_ = !!_value_;
}
@synthesize maxRounds;
@synthesize userStatisArray;
@dynamic userStatis;
- (instancetype) init {
  if ((self = [super init])) {
    self.roomId = 0;
    self.winer = 0;
    self.lastWiner = 0;
    self.card = 0;
    self.diaPaoUid = 0;
    self.hucode = HuNameCodeHncChihu;
    self.huPoint = 0;
    self.serverTime = 0;
    self.curRounds = 0;
    self.maxRounds = 0;
  }
  return self;
}
static PBSC_HuPai* defaultPBSC_HuPaiInstance = nil;
+ (void) initialize {
  if (self == [PBSC_HuPai class]) {
    defaultPBSC_HuPaiInstance = [[PBSC_HuPai alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_HuPaiInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_HuPaiInstance;
}
- (NSArray<p_round_over_user_stat*> *)userStatis {
  return userStatisArray;
}
- (p_round_over_user_stat*)userStatisAtIndex:(NSUInteger)index {
  return [userStatisArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasWiner) {
    return NO;
  }
  if (!self.hasCard) {
    return NO;
  }
  if (!self.hasDiaPaoUid) {
    return NO;
  }
  if (!self.hasHucode) {
    return NO;
  }
  if (!self.hasHuPoint) {
    return NO;
  }
  __block BOOL isInituserStatis = YES;
   [self.userStatis enumerateObjectsUsingBlock:^(p_round_over_user_stat *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserStatis = NO;
      *stop = YES;
    }
  }];
  if (!isInituserStatis) return isInituserStatis;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRoomId) {
    [output writeUInt32:1 value:self.roomId];
  }
  if (self.hasWiner) {
    [output writeUInt32:2 value:self.winer];
  }
  if (self.hasLastWiner) {
    [output writeUInt32:3 value:self.lastWiner];
  }
  if (self.hasCard) {
    [output writeUInt32:4 value:self.card];
  }
  if (self.hasDiaPaoUid) {
    [output writeUInt32:5 value:self.diaPaoUid];
  }
  if (self.hasHucode) {
    [output writeEnum:6 value:self.hucode];
  }
  if (self.hasHuPoint) {
    [output writeUInt32:7 value:self.huPoint];
  }
  if (self.hasServerTime) {
    [output writeUInt32:8 value:self.serverTime];
  }
  if (self.hasCurRounds) {
    [output writeUInt32:9 value:self.curRounds];
  }
  if (self.hasMaxRounds) {
    [output writeUInt32:10 value:self.maxRounds];
  }
  [self.userStatisArray enumerateObjectsUsingBlock:^(p_round_over_user_stat *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:11 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRoomId) {
    size_ += computeUInt32Size(1, self.roomId);
  }
  if (self.hasWiner) {
    size_ += computeUInt32Size(2, self.winer);
  }
  if (self.hasLastWiner) {
    size_ += computeUInt32Size(3, self.lastWiner);
  }
  if (self.hasCard) {
    size_ += computeUInt32Size(4, self.card);
  }
  if (self.hasDiaPaoUid) {
    size_ += computeUInt32Size(5, self.diaPaoUid);
  }
  if (self.hasHucode) {
    size_ += computeEnumSize(6, self.hucode);
  }
  if (self.hasHuPoint) {
    size_ += computeUInt32Size(7, self.huPoint);
  }
  if (self.hasServerTime) {
    size_ += computeUInt32Size(8, self.serverTime);
  }
  if (self.hasCurRounds) {
    size_ += computeUInt32Size(9, self.curRounds);
  }
  if (self.hasMaxRounds) {
    size_ += computeUInt32Size(10, self.maxRounds);
  }
  [self.userStatisArray enumerateObjectsUsingBlock:^(p_round_over_user_stat *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(11, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_HuPai*) parseFromData:(NSData*) data {
  return (PBSC_HuPai*)[[[PBSC_HuPai builder] mergeFromData:data] build];
}
+ (PBSC_HuPai*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_HuPai*)[[[PBSC_HuPai builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_HuPai*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_HuPai*)[[[PBSC_HuPai builder] mergeFromInputStream:input] build];
}
+ (PBSC_HuPai*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_HuPai*)[[[PBSC_HuPai builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_HuPai*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_HuPai*)[[[PBSC_HuPai builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_HuPai*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_HuPai*)[[[PBSC_HuPai builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_HuPaiBuilder*) builder {
  return [[PBSC_HuPaiBuilder alloc] init];
}
+ (PBSC_HuPaiBuilder*) builderWithPrototype:(PBSC_HuPai*) prototype {
  return [[PBSC_HuPai builder] mergeFrom:prototype];
}
- (PBSC_HuPaiBuilder*) builder {
  return [PBSC_HuPai builder];
}
- (PBSC_HuPaiBuilder*) toBuilder {
  return [PBSC_HuPai builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasWiner) {
    [output appendFormat:@"%@%@: %@\n", indent, @"winer", [NSNumber numberWithInteger:self.winer]];
  }
  if (self.hasLastWiner) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastWiner", [NSNumber numberWithInteger:self.lastWiner]];
  }
  if (self.hasCard) {
    [output appendFormat:@"%@%@: %@\n", indent, @"card", [NSNumber numberWithInteger:self.card]];
  }
  if (self.hasDiaPaoUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"diaPaoUid", [NSNumber numberWithInteger:self.diaPaoUid]];
  }
  if (self.hasHucode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hucode", NSStringFromHuNameCode(self.hucode)];
  }
  if (self.hasHuPoint) {
    [output appendFormat:@"%@%@: %@\n", indent, @"huPoint", [NSNumber numberWithInteger:self.huPoint]];
  }
  if (self.hasServerTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverTime", [NSNumber numberWithInteger:self.serverTime]];
  }
  if (self.hasCurRounds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"curRounds", [NSNumber numberWithInteger:self.curRounds]];
  }
  if (self.hasMaxRounds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxRounds", [NSNumber numberWithInteger:self.maxRounds]];
  }
  [self.userStatisArray enumerateObjectsUsingBlock:^(p_round_over_user_stat *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userStatis"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasWiner) {
    [dictionary setObject: [NSNumber numberWithInteger:self.winer] forKey: @"winer"];
  }
  if (self.hasLastWiner) {
    [dictionary setObject: [NSNumber numberWithInteger:self.lastWiner] forKey: @"lastWiner"];
  }
  if (self.hasCard) {
    [dictionary setObject: [NSNumber numberWithInteger:self.card] forKey: @"card"];
  }
  if (self.hasDiaPaoUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.diaPaoUid] forKey: @"diaPaoUid"];
  }
  if (self.hasHucode) {
    [dictionary setObject: @(self.hucode) forKey: @"hucode"];
  }
  if (self.hasHuPoint) {
    [dictionary setObject: [NSNumber numberWithInteger:self.huPoint] forKey: @"huPoint"];
  }
  if (self.hasServerTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.serverTime] forKey: @"serverTime"];
  }
  if (self.hasCurRounds) {
    [dictionary setObject: [NSNumber numberWithInteger:self.curRounds] forKey: @"curRounds"];
  }
  if (self.hasMaxRounds) {
    [dictionary setObject: [NSNumber numberWithInteger:self.maxRounds] forKey: @"maxRounds"];
  }
  for (p_round_over_user_stat* element in self.userStatisArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"userStatis"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_HuPai class]]) {
    return NO;
  }
  PBSC_HuPai *otherMessage = other;
  return
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasWiner == otherMessage.hasWiner &&
      (!self.hasWiner || self.winer == otherMessage.winer) &&
      self.hasLastWiner == otherMessage.hasLastWiner &&
      (!self.hasLastWiner || self.lastWiner == otherMessage.lastWiner) &&
      self.hasCard == otherMessage.hasCard &&
      (!self.hasCard || self.card == otherMessage.card) &&
      self.hasDiaPaoUid == otherMessage.hasDiaPaoUid &&
      (!self.hasDiaPaoUid || self.diaPaoUid == otherMessage.diaPaoUid) &&
      self.hasHucode == otherMessage.hasHucode &&
      (!self.hasHucode || self.hucode == otherMessage.hucode) &&
      self.hasHuPoint == otherMessage.hasHuPoint &&
      (!self.hasHuPoint || self.huPoint == otherMessage.huPoint) &&
      self.hasServerTime == otherMessage.hasServerTime &&
      (!self.hasServerTime || self.serverTime == otherMessage.serverTime) &&
      self.hasCurRounds == otherMessage.hasCurRounds &&
      (!self.hasCurRounds || self.curRounds == otherMessage.curRounds) &&
      self.hasMaxRounds == otherMessage.hasMaxRounds &&
      (!self.hasMaxRounds || self.maxRounds == otherMessage.maxRounds) &&
      [self.userStatisArray isEqualToArray:otherMessage.userStatisArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasWiner) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.winer] hash];
  }
  if (self.hasLastWiner) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lastWiner] hash];
  }
  if (self.hasCard) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.card] hash];
  }
  if (self.hasDiaPaoUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.diaPaoUid] hash];
  }
  if (self.hasHucode) {
    hashCode = hashCode * 31 + self.hucode;
  }
  if (self.hasHuPoint) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.huPoint] hash];
  }
  if (self.hasServerTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.serverTime] hash];
  }
  if (self.hasCurRounds) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.curRounds] hash];
  }
  if (self.hasMaxRounds) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxRounds] hash];
  }
  [self.userStatisArray enumerateObjectsUsingBlock:^(p_round_over_user_stat *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_HuPaiBuilder()
@property (strong) PBSC_HuPai* resultPbscHuPai;
@end

@implementation PBSC_HuPaiBuilder
@synthesize resultPbscHuPai;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscHuPai = [[PBSC_HuPai alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscHuPai;
}
- (PBSC_HuPaiBuilder*) clear {
  self.resultPbscHuPai = [[PBSC_HuPai alloc] init];
  return self;
}
- (PBSC_HuPaiBuilder*) clone {
  return [PBSC_HuPai builderWithPrototype:resultPbscHuPai];
}
- (PBSC_HuPai*) defaultInstance {
  return [PBSC_HuPai defaultInstance];
}
- (PBSC_HuPai*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_HuPai*) buildPartial {
  PBSC_HuPai* returnMe = resultPbscHuPai;
  self.resultPbscHuPai = nil;
  return returnMe;
}
- (PBSC_HuPaiBuilder*) mergeFrom:(PBSC_HuPai*) other {
  if (other == [PBSC_HuPai defaultInstance]) {
    return self;
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasWiner) {
    [self setWiner:other.winer];
  }
  if (other.hasLastWiner) {
    [self setLastWiner:other.lastWiner];
  }
  if (other.hasCard) {
    [self setCard:other.card];
  }
  if (other.hasDiaPaoUid) {
    [self setDiaPaoUid:other.diaPaoUid];
  }
  if (other.hasHucode) {
    [self setHucode:other.hucode];
  }
  if (other.hasHuPoint) {
    [self setHuPoint:other.huPoint];
  }
  if (other.hasServerTime) {
    [self setServerTime:other.serverTime];
  }
  if (other.hasCurRounds) {
    [self setCurRounds:other.curRounds];
  }
  if (other.hasMaxRounds) {
    [self setMaxRounds:other.maxRounds];
  }
  if (other.userStatisArray.count > 0) {
    if (resultPbscHuPai.userStatisArray == nil) {
      resultPbscHuPai.userStatisArray = [[NSMutableArray alloc] initWithArray:other.userStatisArray];
    } else {
      [resultPbscHuPai.userStatisArray addObjectsFromArray:other.userStatisArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_HuPaiBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_HuPaiBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setWiner:[input readUInt32]];
        break;
      }
      case 24: {
        [self setLastWiner:[input readUInt32]];
        break;
      }
      case 32: {
        [self setCard:[input readUInt32]];
        break;
      }
      case 40: {
        [self setDiaPaoUid:[input readUInt32]];
        break;
      }
      case 48: {
        HuNameCode value = (HuNameCode)[input readEnum];
        if (HuNameCodeIsValidValue(value)) {
          [self setHucode:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 56: {
        [self setHuPoint:[input readUInt32]];
        break;
      }
      case 64: {
        [self setServerTime:[input readUInt32]];
        break;
      }
      case 72: {
        [self setCurRounds:[input readUInt32]];
        break;
      }
      case 80: {
        [self setMaxRounds:[input readUInt32]];
        break;
      }
      case 90: {
        p_round_over_user_statBuilder* subBuilder = [p_round_over_user_stat builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserStatis:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasRoomId {
  return resultPbscHuPai.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscHuPai.roomId;
}
- (PBSC_HuPaiBuilder*) setRoomId:(UInt32) value {
  resultPbscHuPai.hasRoomId = YES;
  resultPbscHuPai.roomId = value;
  return self;
}
- (PBSC_HuPaiBuilder*) clearRoomId {
  resultPbscHuPai.hasRoomId = NO;
  resultPbscHuPai.roomId = 0;
  return self;
}
- (BOOL) hasWiner {
  return resultPbscHuPai.hasWiner;
}
- (UInt32) winer {
  return resultPbscHuPai.winer;
}
- (PBSC_HuPaiBuilder*) setWiner:(UInt32) value {
  resultPbscHuPai.hasWiner = YES;
  resultPbscHuPai.winer = value;
  return self;
}
- (PBSC_HuPaiBuilder*) clearWiner {
  resultPbscHuPai.hasWiner = NO;
  resultPbscHuPai.winer = 0;
  return self;
}
- (BOOL) hasLastWiner {
  return resultPbscHuPai.hasLastWiner;
}
- (UInt32) lastWiner {
  return resultPbscHuPai.lastWiner;
}
- (PBSC_HuPaiBuilder*) setLastWiner:(UInt32) value {
  resultPbscHuPai.hasLastWiner = YES;
  resultPbscHuPai.lastWiner = value;
  return self;
}
- (PBSC_HuPaiBuilder*) clearLastWiner {
  resultPbscHuPai.hasLastWiner = NO;
  resultPbscHuPai.lastWiner = 0;
  return self;
}
- (BOOL) hasCard {
  return resultPbscHuPai.hasCard;
}
- (UInt32) card {
  return resultPbscHuPai.card;
}
- (PBSC_HuPaiBuilder*) setCard:(UInt32) value {
  resultPbscHuPai.hasCard = YES;
  resultPbscHuPai.card = value;
  return self;
}
- (PBSC_HuPaiBuilder*) clearCard {
  resultPbscHuPai.hasCard = NO;
  resultPbscHuPai.card = 0;
  return self;
}
- (BOOL) hasDiaPaoUid {
  return resultPbscHuPai.hasDiaPaoUid;
}
- (UInt32) diaPaoUid {
  return resultPbscHuPai.diaPaoUid;
}
- (PBSC_HuPaiBuilder*) setDiaPaoUid:(UInt32) value {
  resultPbscHuPai.hasDiaPaoUid = YES;
  resultPbscHuPai.diaPaoUid = value;
  return self;
}
- (PBSC_HuPaiBuilder*) clearDiaPaoUid {
  resultPbscHuPai.hasDiaPaoUid = NO;
  resultPbscHuPai.diaPaoUid = 0;
  return self;
}
- (BOOL) hasHucode {
  return resultPbscHuPai.hasHucode;
}
- (HuNameCode) hucode {
  return resultPbscHuPai.hucode;
}
- (PBSC_HuPaiBuilder*) setHucode:(HuNameCode) value {
  resultPbscHuPai.hasHucode = YES;
  resultPbscHuPai.hucode = value;
  return self;
}
- (PBSC_HuPaiBuilder*) clearHucode {
  resultPbscHuPai.hasHucode = NO;
  resultPbscHuPai.hucode = HuNameCodeHncChihu;
  return self;
}
- (BOOL) hasHuPoint {
  return resultPbscHuPai.hasHuPoint;
}
- (UInt32) huPoint {
  return resultPbscHuPai.huPoint;
}
- (PBSC_HuPaiBuilder*) setHuPoint:(UInt32) value {
  resultPbscHuPai.hasHuPoint = YES;
  resultPbscHuPai.huPoint = value;
  return self;
}
- (PBSC_HuPaiBuilder*) clearHuPoint {
  resultPbscHuPai.hasHuPoint = NO;
  resultPbscHuPai.huPoint = 0;
  return self;
}
- (BOOL) hasServerTime {
  return resultPbscHuPai.hasServerTime;
}
- (UInt32) serverTime {
  return resultPbscHuPai.serverTime;
}
- (PBSC_HuPaiBuilder*) setServerTime:(UInt32) value {
  resultPbscHuPai.hasServerTime = YES;
  resultPbscHuPai.serverTime = value;
  return self;
}
- (PBSC_HuPaiBuilder*) clearServerTime {
  resultPbscHuPai.hasServerTime = NO;
  resultPbscHuPai.serverTime = 0;
  return self;
}
- (BOOL) hasCurRounds {
  return resultPbscHuPai.hasCurRounds;
}
- (UInt32) curRounds {
  return resultPbscHuPai.curRounds;
}
- (PBSC_HuPaiBuilder*) setCurRounds:(UInt32) value {
  resultPbscHuPai.hasCurRounds = YES;
  resultPbscHuPai.curRounds = value;
  return self;
}
- (PBSC_HuPaiBuilder*) clearCurRounds {
  resultPbscHuPai.hasCurRounds = NO;
  resultPbscHuPai.curRounds = 0;
  return self;
}
- (BOOL) hasMaxRounds {
  return resultPbscHuPai.hasMaxRounds;
}
- (UInt32) maxRounds {
  return resultPbscHuPai.maxRounds;
}
- (PBSC_HuPaiBuilder*) setMaxRounds:(UInt32) value {
  resultPbscHuPai.hasMaxRounds = YES;
  resultPbscHuPai.maxRounds = value;
  return self;
}
- (PBSC_HuPaiBuilder*) clearMaxRounds {
  resultPbscHuPai.hasMaxRounds = NO;
  resultPbscHuPai.maxRounds = 0;
  return self;
}
- (NSMutableArray<p_round_over_user_stat*> *)userStatis {
  return resultPbscHuPai.userStatisArray;
}
- (p_round_over_user_stat*)userStatisAtIndex:(NSUInteger)index {
  return [resultPbscHuPai userStatisAtIndex:index];
}
- (PBSC_HuPaiBuilder *)addUserStatis:(p_round_over_user_stat*)value {
  if (resultPbscHuPai.userStatisArray == nil) {
    resultPbscHuPai.userStatisArray = [[NSMutableArray alloc]init];
  }
  [resultPbscHuPai.userStatisArray addObject:value];
  return self;
}
- (PBSC_HuPaiBuilder *)setUserStatisArray:(NSArray<p_round_over_user_stat*> *)array {
  resultPbscHuPai.userStatisArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBSC_HuPaiBuilder *)clearUserStatis {
  resultPbscHuPai.userStatisArray = nil;
  return self;
}
@end

@interface PBSC_RoomGameOver ()
@property UInt32 roomId;
@property (strong) NSMutableArray<p_game_over_user_stat*> * roomStatArray;
@property UInt32 serverTime;
@property UInt32 maxRounds;
@end

@implementation PBSC_RoomGameOver

- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
@synthesize roomStatArray;
@dynamic roomStat;
- (BOOL) hasServerTime {
  return !!hasServerTime_;
}
- (void) setHasServerTime:(BOOL) _value_ {
  hasServerTime_ = !!_value_;
}
@synthesize serverTime;
- (BOOL) hasMaxRounds {
  return !!hasMaxRounds_;
}
- (void) setHasMaxRounds:(BOOL) _value_ {
  hasMaxRounds_ = !!_value_;
}
@synthesize maxRounds;
- (instancetype) init {
  if ((self = [super init])) {
    self.roomId = 0;
    self.serverTime = 0;
    self.maxRounds = 0;
  }
  return self;
}
static PBSC_RoomGameOver* defaultPBSC_RoomGameOverInstance = nil;
+ (void) initialize {
  if (self == [PBSC_RoomGameOver class]) {
    defaultPBSC_RoomGameOverInstance = [[PBSC_RoomGameOver alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_RoomGameOverInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_RoomGameOverInstance;
}
- (NSArray<p_game_over_user_stat*> *)roomStat {
  return roomStatArray;
}
- (p_game_over_user_stat*)roomStatAtIndex:(NSUInteger)index {
  return [roomStatArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasRoomId) {
    return NO;
  }
  __block BOOL isInitroomStat = YES;
   [self.roomStat enumerateObjectsUsingBlock:^(p_game_over_user_stat *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitroomStat = NO;
      *stop = YES;
    }
  }];
  if (!isInitroomStat) return isInitroomStat;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRoomId) {
    [output writeUInt32:1 value:self.roomId];
  }
  [self.roomStatArray enumerateObjectsUsingBlock:^(p_game_over_user_stat *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasServerTime) {
    [output writeUInt32:3 value:self.serverTime];
  }
  if (self.hasMaxRounds) {
    [output writeUInt32:4 value:self.maxRounds];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRoomId) {
    size_ += computeUInt32Size(1, self.roomId);
  }
  [self.roomStatArray enumerateObjectsUsingBlock:^(p_game_over_user_stat *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasServerTime) {
    size_ += computeUInt32Size(3, self.serverTime);
  }
  if (self.hasMaxRounds) {
    size_ += computeUInt32Size(4, self.maxRounds);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_RoomGameOver*) parseFromData:(NSData*) data {
  return (PBSC_RoomGameOver*)[[[PBSC_RoomGameOver builder] mergeFromData:data] build];
}
+ (PBSC_RoomGameOver*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_RoomGameOver*)[[[PBSC_RoomGameOver builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_RoomGameOver*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_RoomGameOver*)[[[PBSC_RoomGameOver builder] mergeFromInputStream:input] build];
}
+ (PBSC_RoomGameOver*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_RoomGameOver*)[[[PBSC_RoomGameOver builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_RoomGameOver*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_RoomGameOver*)[[[PBSC_RoomGameOver builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_RoomGameOver*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_RoomGameOver*)[[[PBSC_RoomGameOver builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_RoomGameOverBuilder*) builder {
  return [[PBSC_RoomGameOverBuilder alloc] init];
}
+ (PBSC_RoomGameOverBuilder*) builderWithPrototype:(PBSC_RoomGameOver*) prototype {
  return [[PBSC_RoomGameOver builder] mergeFrom:prototype];
}
- (PBSC_RoomGameOverBuilder*) builder {
  return [PBSC_RoomGameOver builder];
}
- (PBSC_RoomGameOverBuilder*) toBuilder {
  return [PBSC_RoomGameOver builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  [self.roomStatArray enumerateObjectsUsingBlock:^(p_game_over_user_stat *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomStat"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasServerTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverTime", [NSNumber numberWithInteger:self.serverTime]];
  }
  if (self.hasMaxRounds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxRounds", [NSNumber numberWithInteger:self.maxRounds]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  for (p_game_over_user_stat* element in self.roomStatArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"roomStat"];
  }
  if (self.hasServerTime) {
    [dictionary setObject: [NSNumber numberWithInteger:self.serverTime] forKey: @"serverTime"];
  }
  if (self.hasMaxRounds) {
    [dictionary setObject: [NSNumber numberWithInteger:self.maxRounds] forKey: @"maxRounds"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_RoomGameOver class]]) {
    return NO;
  }
  PBSC_RoomGameOver *otherMessage = other;
  return
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      [self.roomStatArray isEqualToArray:otherMessage.roomStatArray] &&
      self.hasServerTime == otherMessage.hasServerTime &&
      (!self.hasServerTime || self.serverTime == otherMessage.serverTime) &&
      self.hasMaxRounds == otherMessage.hasMaxRounds &&
      (!self.hasMaxRounds || self.maxRounds == otherMessage.maxRounds) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  [self.roomStatArray enumerateObjectsUsingBlock:^(p_game_over_user_stat *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasServerTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.serverTime] hash];
  }
  if (self.hasMaxRounds) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxRounds] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_RoomGameOverBuilder()
@property (strong) PBSC_RoomGameOver* resultPbscRoomGameOver;
@end

@implementation PBSC_RoomGameOverBuilder
@synthesize resultPbscRoomGameOver;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscRoomGameOver = [[PBSC_RoomGameOver alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscRoomGameOver;
}
- (PBSC_RoomGameOverBuilder*) clear {
  self.resultPbscRoomGameOver = [[PBSC_RoomGameOver alloc] init];
  return self;
}
- (PBSC_RoomGameOverBuilder*) clone {
  return [PBSC_RoomGameOver builderWithPrototype:resultPbscRoomGameOver];
}
- (PBSC_RoomGameOver*) defaultInstance {
  return [PBSC_RoomGameOver defaultInstance];
}
- (PBSC_RoomGameOver*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_RoomGameOver*) buildPartial {
  PBSC_RoomGameOver* returnMe = resultPbscRoomGameOver;
  self.resultPbscRoomGameOver = nil;
  return returnMe;
}
- (PBSC_RoomGameOverBuilder*) mergeFrom:(PBSC_RoomGameOver*) other {
  if (other == [PBSC_RoomGameOver defaultInstance]) {
    return self;
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.roomStatArray.count > 0) {
    if (resultPbscRoomGameOver.roomStatArray == nil) {
      resultPbscRoomGameOver.roomStatArray = [[NSMutableArray alloc] initWithArray:other.roomStatArray];
    } else {
      [resultPbscRoomGameOver.roomStatArray addObjectsFromArray:other.roomStatArray];
    }
  }
  if (other.hasServerTime) {
    [self setServerTime:other.serverTime];
  }
  if (other.hasMaxRounds) {
    [self setMaxRounds:other.maxRounds];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_RoomGameOverBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_RoomGameOverBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 18: {
        p_game_over_user_statBuilder* subBuilder = [p_game_over_user_stat builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRoomStat:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setServerTime:[input readUInt32]];
        break;
      }
      case 32: {
        [self setMaxRounds:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRoomId {
  return resultPbscRoomGameOver.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscRoomGameOver.roomId;
}
- (PBSC_RoomGameOverBuilder*) setRoomId:(UInt32) value {
  resultPbscRoomGameOver.hasRoomId = YES;
  resultPbscRoomGameOver.roomId = value;
  return self;
}
- (PBSC_RoomGameOverBuilder*) clearRoomId {
  resultPbscRoomGameOver.hasRoomId = NO;
  resultPbscRoomGameOver.roomId = 0;
  return self;
}
- (NSMutableArray<p_game_over_user_stat*> *)roomStat {
  return resultPbscRoomGameOver.roomStatArray;
}
- (p_game_over_user_stat*)roomStatAtIndex:(NSUInteger)index {
  return [resultPbscRoomGameOver roomStatAtIndex:index];
}
- (PBSC_RoomGameOverBuilder *)addRoomStat:(p_game_over_user_stat*)value {
  if (resultPbscRoomGameOver.roomStatArray == nil) {
    resultPbscRoomGameOver.roomStatArray = [[NSMutableArray alloc]init];
  }
  [resultPbscRoomGameOver.roomStatArray addObject:value];
  return self;
}
- (PBSC_RoomGameOverBuilder *)setRoomStatArray:(NSArray<p_game_over_user_stat*> *)array {
  resultPbscRoomGameOver.roomStatArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (PBSC_RoomGameOverBuilder *)clearRoomStat {
  resultPbscRoomGameOver.roomStatArray = nil;
  return self;
}
- (BOOL) hasServerTime {
  return resultPbscRoomGameOver.hasServerTime;
}
- (UInt32) serverTime {
  return resultPbscRoomGameOver.serverTime;
}
- (PBSC_RoomGameOverBuilder*) setServerTime:(UInt32) value {
  resultPbscRoomGameOver.hasServerTime = YES;
  resultPbscRoomGameOver.serverTime = value;
  return self;
}
- (PBSC_RoomGameOverBuilder*) clearServerTime {
  resultPbscRoomGameOver.hasServerTime = NO;
  resultPbscRoomGameOver.serverTime = 0;
  return self;
}
- (BOOL) hasMaxRounds {
  return resultPbscRoomGameOver.hasMaxRounds;
}
- (UInt32) maxRounds {
  return resultPbscRoomGameOver.maxRounds;
}
- (PBSC_RoomGameOverBuilder*) setMaxRounds:(UInt32) value {
  resultPbscRoomGameOver.hasMaxRounds = YES;
  resultPbscRoomGameOver.maxRounds = value;
  return self;
}
- (PBSC_RoomGameOverBuilder*) clearMaxRounds {
  resultPbscRoomGameOver.hasMaxRounds = NO;
  resultPbscRoomGameOver.maxRounds = 0;
  return self;
}
@end

@interface p_game_over_user_stat ()
@property UInt32 uid;
@property UInt32 rank;
@property SInt32 point;
@property UInt32 maxPoint;
@property UInt32 zhongzhuangCount;
@property UInt32 maxZhongzhuangCount;
@property UInt32 winCount;
@property UInt32 dianpaoCount;
@end

@implementation p_game_over_user_stat

- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasRank {
  return !!hasRank_;
}
- (void) setHasRank:(BOOL) _value_ {
  hasRank_ = !!_value_;
}
@synthesize rank;
- (BOOL) hasPoint {
  return !!hasPoint_;
}
- (void) setHasPoint:(BOOL) _value_ {
  hasPoint_ = !!_value_;
}
@synthesize point;
- (BOOL) hasMaxPoint {
  return !!hasMaxPoint_;
}
- (void) setHasMaxPoint:(BOOL) _value_ {
  hasMaxPoint_ = !!_value_;
}
@synthesize maxPoint;
- (BOOL) hasZhongzhuangCount {
  return !!hasZhongzhuangCount_;
}
- (void) setHasZhongzhuangCount:(BOOL) _value_ {
  hasZhongzhuangCount_ = !!_value_;
}
@synthesize zhongzhuangCount;
- (BOOL) hasMaxZhongzhuangCount {
  return !!hasMaxZhongzhuangCount_;
}
- (void) setHasMaxZhongzhuangCount:(BOOL) _value_ {
  hasMaxZhongzhuangCount_ = !!_value_;
}
@synthesize maxZhongzhuangCount;
- (BOOL) hasWinCount {
  return !!hasWinCount_;
}
- (void) setHasWinCount:(BOOL) _value_ {
  hasWinCount_ = !!_value_;
}
@synthesize winCount;
- (BOOL) hasDianpaoCount {
  return !!hasDianpaoCount_;
}
- (void) setHasDianpaoCount:(BOOL) _value_ {
  hasDianpaoCount_ = !!_value_;
}
@synthesize dianpaoCount;
- (instancetype) init {
  if ((self = [super init])) {
    self.uid = 0;
    self.rank = 0;
    self.point = 0;
    self.maxPoint = 0;
    self.zhongzhuangCount = 0;
    self.maxZhongzhuangCount = 0;
    self.winCount = 0;
    self.dianpaoCount = 0;
  }
  return self;
}
static p_game_over_user_stat* defaultp_game_over_user_statInstance = nil;
+ (void) initialize {
  if (self == [p_game_over_user_stat class]) {
    defaultp_game_over_user_statInstance = [[p_game_over_user_stat alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultp_game_over_user_statInstance;
}
- (instancetype) defaultInstance {
  return defaultp_game_over_user_statInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasRank) {
    return NO;
  }
  if (!self.hasPoint) {
    return NO;
  }
  if (!self.hasMaxPoint) {
    return NO;
  }
  if (!self.hasZhongzhuangCount) {
    return NO;
  }
  if (!self.hasMaxZhongzhuangCount) {
    return NO;
  }
  if (!self.hasWinCount) {
    return NO;
  }
  if (!self.hasDianpaoCount) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUid) {
    [output writeUInt32:1 value:self.uid];
  }
  if (self.hasRank) {
    [output writeUInt32:2 value:self.rank];
  }
  if (self.hasPoint) {
    [output writeInt32:3 value:self.point];
  }
  if (self.hasMaxPoint) {
    [output writeUInt32:4 value:self.maxPoint];
  }
  if (self.hasZhongzhuangCount) {
    [output writeUInt32:5 value:self.zhongzhuangCount];
  }
  if (self.hasMaxZhongzhuangCount) {
    [output writeUInt32:6 value:self.maxZhongzhuangCount];
  }
  if (self.hasWinCount) {
    [output writeUInt32:7 value:self.winCount];
  }
  if (self.hasDianpaoCount) {
    [output writeUInt32:8 value:self.dianpaoCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUid) {
    size_ += computeUInt32Size(1, self.uid);
  }
  if (self.hasRank) {
    size_ += computeUInt32Size(2, self.rank);
  }
  if (self.hasPoint) {
    size_ += computeInt32Size(3, self.point);
  }
  if (self.hasMaxPoint) {
    size_ += computeUInt32Size(4, self.maxPoint);
  }
  if (self.hasZhongzhuangCount) {
    size_ += computeUInt32Size(5, self.zhongzhuangCount);
  }
  if (self.hasMaxZhongzhuangCount) {
    size_ += computeUInt32Size(6, self.maxZhongzhuangCount);
  }
  if (self.hasWinCount) {
    size_ += computeUInt32Size(7, self.winCount);
  }
  if (self.hasDianpaoCount) {
    size_ += computeUInt32Size(8, self.dianpaoCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (p_game_over_user_stat*) parseFromData:(NSData*) data {
  return (p_game_over_user_stat*)[[[p_game_over_user_stat builder] mergeFromData:data] build];
}
+ (p_game_over_user_stat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (p_game_over_user_stat*)[[[p_game_over_user_stat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (p_game_over_user_stat*) parseFromInputStream:(NSInputStream*) input {
  return (p_game_over_user_stat*)[[[p_game_over_user_stat builder] mergeFromInputStream:input] build];
}
+ (p_game_over_user_stat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (p_game_over_user_stat*)[[[p_game_over_user_stat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (p_game_over_user_stat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (p_game_over_user_stat*)[[[p_game_over_user_stat builder] mergeFromCodedInputStream:input] build];
}
+ (p_game_over_user_stat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (p_game_over_user_stat*)[[[p_game_over_user_stat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (p_game_over_user_statBuilder*) builder {
  return [[p_game_over_user_statBuilder alloc] init];
}
+ (p_game_over_user_statBuilder*) builderWithPrototype:(p_game_over_user_stat*) prototype {
  return [[p_game_over_user_stat builder] mergeFrom:prototype];
}
- (p_game_over_user_statBuilder*) builder {
  return [p_game_over_user_stat builder];
}
- (p_game_over_user_statBuilder*) toBuilder {
  return [p_game_over_user_stat builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInteger:self.uid]];
  }
  if (self.hasRank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rank", [NSNumber numberWithInteger:self.rank]];
  }
  if (self.hasPoint) {
    [output appendFormat:@"%@%@: %@\n", indent, @"point", [NSNumber numberWithInteger:self.point]];
  }
  if (self.hasMaxPoint) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxPoint", [NSNumber numberWithInteger:self.maxPoint]];
  }
  if (self.hasZhongzhuangCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"zhongzhuangCount", [NSNumber numberWithInteger:self.zhongzhuangCount]];
  }
  if (self.hasMaxZhongzhuangCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxZhongzhuangCount", [NSNumber numberWithInteger:self.maxZhongzhuangCount]];
  }
  if (self.hasWinCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"winCount", [NSNumber numberWithInteger:self.winCount]];
  }
  if (self.hasDianpaoCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dianpaoCount", [NSNumber numberWithInteger:self.dianpaoCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uid] forKey: @"uid"];
  }
  if (self.hasRank) {
    [dictionary setObject: [NSNumber numberWithInteger:self.rank] forKey: @"rank"];
  }
  if (self.hasPoint) {
    [dictionary setObject: [NSNumber numberWithInteger:self.point] forKey: @"point"];
  }
  if (self.hasMaxPoint) {
    [dictionary setObject: [NSNumber numberWithInteger:self.maxPoint] forKey: @"maxPoint"];
  }
  if (self.hasZhongzhuangCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.zhongzhuangCount] forKey: @"zhongzhuangCount"];
  }
  if (self.hasMaxZhongzhuangCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.maxZhongzhuangCount] forKey: @"maxZhongzhuangCount"];
  }
  if (self.hasWinCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.winCount] forKey: @"winCount"];
  }
  if (self.hasDianpaoCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.dianpaoCount] forKey: @"dianpaoCount"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[p_game_over_user_stat class]]) {
    return NO;
  }
  p_game_over_user_stat *otherMessage = other;
  return
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasRank == otherMessage.hasRank &&
      (!self.hasRank || self.rank == otherMessage.rank) &&
      self.hasPoint == otherMessage.hasPoint &&
      (!self.hasPoint || self.point == otherMessage.point) &&
      self.hasMaxPoint == otherMessage.hasMaxPoint &&
      (!self.hasMaxPoint || self.maxPoint == otherMessage.maxPoint) &&
      self.hasZhongzhuangCount == otherMessage.hasZhongzhuangCount &&
      (!self.hasZhongzhuangCount || self.zhongzhuangCount == otherMessage.zhongzhuangCount) &&
      self.hasMaxZhongzhuangCount == otherMessage.hasMaxZhongzhuangCount &&
      (!self.hasMaxZhongzhuangCount || self.maxZhongzhuangCount == otherMessage.maxZhongzhuangCount) &&
      self.hasWinCount == otherMessage.hasWinCount &&
      (!self.hasWinCount || self.winCount == otherMessage.winCount) &&
      self.hasDianpaoCount == otherMessage.hasDianpaoCount &&
      (!self.hasDianpaoCount || self.dianpaoCount == otherMessage.dianpaoCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uid] hash];
  }
  if (self.hasRank) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rank] hash];
  }
  if (self.hasPoint) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.point] hash];
  }
  if (self.hasMaxPoint) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxPoint] hash];
  }
  if (self.hasZhongzhuangCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.zhongzhuangCount] hash];
  }
  if (self.hasMaxZhongzhuangCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxZhongzhuangCount] hash];
  }
  if (self.hasWinCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.winCount] hash];
  }
  if (self.hasDianpaoCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.dianpaoCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface p_game_over_user_statBuilder()
@property (strong) p_game_over_user_stat* resultPGameOverUserStat;
@end

@implementation p_game_over_user_statBuilder
@synthesize resultPGameOverUserStat;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPGameOverUserStat = [[p_game_over_user_stat alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPGameOverUserStat;
}
- (p_game_over_user_statBuilder*) clear {
  self.resultPGameOverUserStat = [[p_game_over_user_stat alloc] init];
  return self;
}
- (p_game_over_user_statBuilder*) clone {
  return [p_game_over_user_stat builderWithPrototype:resultPGameOverUserStat];
}
- (p_game_over_user_stat*) defaultInstance {
  return [p_game_over_user_stat defaultInstance];
}
- (p_game_over_user_stat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (p_game_over_user_stat*) buildPartial {
  p_game_over_user_stat* returnMe = resultPGameOverUserStat;
  self.resultPGameOverUserStat = nil;
  return returnMe;
}
- (p_game_over_user_statBuilder*) mergeFrom:(p_game_over_user_stat*) other {
  if (other == [p_game_over_user_stat defaultInstance]) {
    return self;
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasRank) {
    [self setRank:other.rank];
  }
  if (other.hasPoint) {
    [self setPoint:other.point];
  }
  if (other.hasMaxPoint) {
    [self setMaxPoint:other.maxPoint];
  }
  if (other.hasZhongzhuangCount) {
    [self setZhongzhuangCount:other.zhongzhuangCount];
  }
  if (other.hasMaxZhongzhuangCount) {
    [self setMaxZhongzhuangCount:other.maxZhongzhuangCount];
  }
  if (other.hasWinCount) {
    [self setWinCount:other.winCount];
  }
  if (other.hasDianpaoCount) {
    [self setDianpaoCount:other.dianpaoCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (p_game_over_user_statBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (p_game_over_user_statBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUid:[input readUInt32]];
        break;
      }
      case 16: {
        [self setRank:[input readUInt32]];
        break;
      }
      case 24: {
        [self setPoint:[input readInt32]];
        break;
      }
      case 32: {
        [self setMaxPoint:[input readUInt32]];
        break;
      }
      case 40: {
        [self setZhongzhuangCount:[input readUInt32]];
        break;
      }
      case 48: {
        [self setMaxZhongzhuangCount:[input readUInt32]];
        break;
      }
      case 56: {
        [self setWinCount:[input readUInt32]];
        break;
      }
      case 64: {
        [self setDianpaoCount:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUid {
  return resultPGameOverUserStat.hasUid;
}
- (UInt32) uid {
  return resultPGameOverUserStat.uid;
}
- (p_game_over_user_statBuilder*) setUid:(UInt32) value {
  resultPGameOverUserStat.hasUid = YES;
  resultPGameOverUserStat.uid = value;
  return self;
}
- (p_game_over_user_statBuilder*) clearUid {
  resultPGameOverUserStat.hasUid = NO;
  resultPGameOverUserStat.uid = 0;
  return self;
}
- (BOOL) hasRank {
  return resultPGameOverUserStat.hasRank;
}
- (UInt32) rank {
  return resultPGameOverUserStat.rank;
}
- (p_game_over_user_statBuilder*) setRank:(UInt32) value {
  resultPGameOverUserStat.hasRank = YES;
  resultPGameOverUserStat.rank = value;
  return self;
}
- (p_game_over_user_statBuilder*) clearRank {
  resultPGameOverUserStat.hasRank = NO;
  resultPGameOverUserStat.rank = 0;
  return self;
}
- (BOOL) hasPoint {
  return resultPGameOverUserStat.hasPoint;
}
- (SInt32) point {
  return resultPGameOverUserStat.point;
}
- (p_game_over_user_statBuilder*) setPoint:(SInt32) value {
  resultPGameOverUserStat.hasPoint = YES;
  resultPGameOverUserStat.point = value;
  return self;
}
- (p_game_over_user_statBuilder*) clearPoint {
  resultPGameOverUserStat.hasPoint = NO;
  resultPGameOverUserStat.point = 0;
  return self;
}
- (BOOL) hasMaxPoint {
  return resultPGameOverUserStat.hasMaxPoint;
}
- (UInt32) maxPoint {
  return resultPGameOverUserStat.maxPoint;
}
- (p_game_over_user_statBuilder*) setMaxPoint:(UInt32) value {
  resultPGameOverUserStat.hasMaxPoint = YES;
  resultPGameOverUserStat.maxPoint = value;
  return self;
}
- (p_game_over_user_statBuilder*) clearMaxPoint {
  resultPGameOverUserStat.hasMaxPoint = NO;
  resultPGameOverUserStat.maxPoint = 0;
  return self;
}
- (BOOL) hasZhongzhuangCount {
  return resultPGameOverUserStat.hasZhongzhuangCount;
}
- (UInt32) zhongzhuangCount {
  return resultPGameOverUserStat.zhongzhuangCount;
}
- (p_game_over_user_statBuilder*) setZhongzhuangCount:(UInt32) value {
  resultPGameOverUserStat.hasZhongzhuangCount = YES;
  resultPGameOverUserStat.zhongzhuangCount = value;
  return self;
}
- (p_game_over_user_statBuilder*) clearZhongzhuangCount {
  resultPGameOverUserStat.hasZhongzhuangCount = NO;
  resultPGameOverUserStat.zhongzhuangCount = 0;
  return self;
}
- (BOOL) hasMaxZhongzhuangCount {
  return resultPGameOverUserStat.hasMaxZhongzhuangCount;
}
- (UInt32) maxZhongzhuangCount {
  return resultPGameOverUserStat.maxZhongzhuangCount;
}
- (p_game_over_user_statBuilder*) setMaxZhongzhuangCount:(UInt32) value {
  resultPGameOverUserStat.hasMaxZhongzhuangCount = YES;
  resultPGameOverUserStat.maxZhongzhuangCount = value;
  return self;
}
- (p_game_over_user_statBuilder*) clearMaxZhongzhuangCount {
  resultPGameOverUserStat.hasMaxZhongzhuangCount = NO;
  resultPGameOverUserStat.maxZhongzhuangCount = 0;
  return self;
}
- (BOOL) hasWinCount {
  return resultPGameOverUserStat.hasWinCount;
}
- (UInt32) winCount {
  return resultPGameOverUserStat.winCount;
}
- (p_game_over_user_statBuilder*) setWinCount:(UInt32) value {
  resultPGameOverUserStat.hasWinCount = YES;
  resultPGameOverUserStat.winCount = value;
  return self;
}
- (p_game_over_user_statBuilder*) clearWinCount {
  resultPGameOverUserStat.hasWinCount = NO;
  resultPGameOverUserStat.winCount = 0;
  return self;
}
- (BOOL) hasDianpaoCount {
  return resultPGameOverUserStat.hasDianpaoCount;
}
- (UInt32) dianpaoCount {
  return resultPGameOverUserStat.dianpaoCount;
}
- (p_game_over_user_statBuilder*) setDianpaoCount:(UInt32) value {
  resultPGameOverUserStat.hasDianpaoCount = YES;
  resultPGameOverUserStat.dianpaoCount = value;
  return self;
}
- (p_game_over_user_statBuilder*) clearDianpaoCount {
  resultPGameOverUserStat.hasDianpaoCount = NO;
  resultPGameOverUserStat.dianpaoCount = 0;
  return self;
}
@end

@interface PBSC_BroadCastWhoIsExcutorUser ()
@property UInt32 roomId;
@property UInt32 executeUid;
@end

@implementation PBSC_BroadCastWhoIsExcutorUser

- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasExecuteUid {
  return !!hasExecuteUid_;
}
- (void) setHasExecuteUid:(BOOL) _value_ {
  hasExecuteUid_ = !!_value_;
}
@synthesize executeUid;
- (instancetype) init {
  if ((self = [super init])) {
    self.roomId = 0;
    self.executeUid = 0;
  }
  return self;
}
static PBSC_BroadCastWhoIsExcutorUser* defaultPBSC_BroadCastWhoIsExcutorUserInstance = nil;
+ (void) initialize {
  if (self == [PBSC_BroadCastWhoIsExcutorUser class]) {
    defaultPBSC_BroadCastWhoIsExcutorUserInstance = [[PBSC_BroadCastWhoIsExcutorUser alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPBSC_BroadCastWhoIsExcutorUserInstance;
}
- (instancetype) defaultInstance {
  return defaultPBSC_BroadCastWhoIsExcutorUserInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRoomId) {
    return NO;
  }
  if (!self.hasExecuteUid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRoomId) {
    [output writeUInt32:1 value:self.roomId];
  }
  if (self.hasExecuteUid) {
    [output writeUInt32:2 value:self.executeUid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRoomId) {
    size_ += computeUInt32Size(1, self.roomId);
  }
  if (self.hasExecuteUid) {
    size_ += computeUInt32Size(2, self.executeUid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PBSC_BroadCastWhoIsExcutorUser*) parseFromData:(NSData*) data {
  return (PBSC_BroadCastWhoIsExcutorUser*)[[[PBSC_BroadCastWhoIsExcutorUser builder] mergeFromData:data] build];
}
+ (PBSC_BroadCastWhoIsExcutorUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_BroadCastWhoIsExcutorUser*)[[[PBSC_BroadCastWhoIsExcutorUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PBSC_BroadCastWhoIsExcutorUser*) parseFromInputStream:(NSInputStream*) input {
  return (PBSC_BroadCastWhoIsExcutorUser*)[[[PBSC_BroadCastWhoIsExcutorUser builder] mergeFromInputStream:input] build];
}
+ (PBSC_BroadCastWhoIsExcutorUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_BroadCastWhoIsExcutorUser*)[[[PBSC_BroadCastWhoIsExcutorUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_BroadCastWhoIsExcutorUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PBSC_BroadCastWhoIsExcutorUser*)[[[PBSC_BroadCastWhoIsExcutorUser builder] mergeFromCodedInputStream:input] build];
}
+ (PBSC_BroadCastWhoIsExcutorUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PBSC_BroadCastWhoIsExcutorUser*)[[[PBSC_BroadCastWhoIsExcutorUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PBSC_BroadCastWhoIsExcutorUserBuilder*) builder {
  return [[PBSC_BroadCastWhoIsExcutorUserBuilder alloc] init];
}
+ (PBSC_BroadCastWhoIsExcutorUserBuilder*) builderWithPrototype:(PBSC_BroadCastWhoIsExcutorUser*) prototype {
  return [[PBSC_BroadCastWhoIsExcutorUser builder] mergeFrom:prototype];
}
- (PBSC_BroadCastWhoIsExcutorUserBuilder*) builder {
  return [PBSC_BroadCastWhoIsExcutorUser builder];
}
- (PBSC_BroadCastWhoIsExcutorUserBuilder*) toBuilder {
  return [PBSC_BroadCastWhoIsExcutorUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", [NSNumber numberWithInteger:self.roomId]];
  }
  if (self.hasExecuteUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"executeUid", [NSNumber numberWithInteger:self.executeUid]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRoomId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.roomId] forKey: @"roomId"];
  }
  if (self.hasExecuteUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.executeUid] forKey: @"executeUid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PBSC_BroadCastWhoIsExcutorUser class]]) {
    return NO;
  }
  PBSC_BroadCastWhoIsExcutorUser *otherMessage = other;
  return
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || self.roomId == otherMessage.roomId) &&
      self.hasExecuteUid == otherMessage.hasExecuteUid &&
      (!self.hasExecuteUid || self.executeUid == otherMessage.executeUid) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.roomId] hash];
  }
  if (self.hasExecuteUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.executeUid] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PBSC_BroadCastWhoIsExcutorUserBuilder()
@property (strong) PBSC_BroadCastWhoIsExcutorUser* resultPbscBroadCastWhoIsExcutorUser;
@end

@implementation PBSC_BroadCastWhoIsExcutorUserBuilder
@synthesize resultPbscBroadCastWhoIsExcutorUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPbscBroadCastWhoIsExcutorUser = [[PBSC_BroadCastWhoIsExcutorUser alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPbscBroadCastWhoIsExcutorUser;
}
- (PBSC_BroadCastWhoIsExcutorUserBuilder*) clear {
  self.resultPbscBroadCastWhoIsExcutorUser = [[PBSC_BroadCastWhoIsExcutorUser alloc] init];
  return self;
}
- (PBSC_BroadCastWhoIsExcutorUserBuilder*) clone {
  return [PBSC_BroadCastWhoIsExcutorUser builderWithPrototype:resultPbscBroadCastWhoIsExcutorUser];
}
- (PBSC_BroadCastWhoIsExcutorUser*) defaultInstance {
  return [PBSC_BroadCastWhoIsExcutorUser defaultInstance];
}
- (PBSC_BroadCastWhoIsExcutorUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PBSC_BroadCastWhoIsExcutorUser*) buildPartial {
  PBSC_BroadCastWhoIsExcutorUser* returnMe = resultPbscBroadCastWhoIsExcutorUser;
  self.resultPbscBroadCastWhoIsExcutorUser = nil;
  return returnMe;
}
- (PBSC_BroadCastWhoIsExcutorUserBuilder*) mergeFrom:(PBSC_BroadCastWhoIsExcutorUser*) other {
  if (other == [PBSC_BroadCastWhoIsExcutorUser defaultInstance]) {
    return self;
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasExecuteUid) {
    [self setExecuteUid:other.executeUid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PBSC_BroadCastWhoIsExcutorUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PBSC_BroadCastWhoIsExcutorUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRoomId:[input readUInt32]];
        break;
      }
      case 16: {
        [self setExecuteUid:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRoomId {
  return resultPbscBroadCastWhoIsExcutorUser.hasRoomId;
}
- (UInt32) roomId {
  return resultPbscBroadCastWhoIsExcutorUser.roomId;
}
- (PBSC_BroadCastWhoIsExcutorUserBuilder*) setRoomId:(UInt32) value {
  resultPbscBroadCastWhoIsExcutorUser.hasRoomId = YES;
  resultPbscBroadCastWhoIsExcutorUser.roomId = value;
  return self;
}
- (PBSC_BroadCastWhoIsExcutorUserBuilder*) clearRoomId {
  resultPbscBroadCastWhoIsExcutorUser.hasRoomId = NO;
  resultPbscBroadCastWhoIsExcutorUser.roomId = 0;
  return self;
}
- (BOOL) hasExecuteUid {
  return resultPbscBroadCastWhoIsExcutorUser.hasExecuteUid;
}
- (UInt32) executeUid {
  return resultPbscBroadCastWhoIsExcutorUser.executeUid;
}
- (PBSC_BroadCastWhoIsExcutorUserBuilder*) setExecuteUid:(UInt32) value {
  resultPbscBroadCastWhoIsExcutorUser.hasExecuteUid = YES;
  resultPbscBroadCastWhoIsExcutorUser.executeUid = value;
  return self;
}
- (PBSC_BroadCastWhoIsExcutorUserBuilder*) clearExecuteUid {
  resultPbscBroadCastWhoIsExcutorUser.hasExecuteUid = NO;
  resultPbscBroadCastWhoIsExcutorUser.executeUid = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
